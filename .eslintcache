[{"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\index.js":"1","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\App.js":"2","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\reportWebVitals.js":"3","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Routes.js":"4","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Profile.js":"5","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Navbar.js":"6","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\AddCountry.js":"7","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\ForgotPassword.js":"8","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\NewUserPwd.js":"9","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\DummyNav.js":"10","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\main.js":"11","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\user\\AddUser.js":"12","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\Logout.js":"13","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\Login.js":"14","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\UserForgotpwd.js":"15","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\Forgotpassword.js":"16","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\client\\AddClient.js":"17","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\contractor\\Addcontractor.js":"18","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\user\\UserList.js":"19","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\client\\ClientList.js":"20","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\AddInvoice.js":"21","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\contractor\\Contractorlist.js":"22","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\Completed.js":"23","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\TrashQuote.js":"24","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\Cancelled.js":"25","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\AllQ.js":"26","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\Pending.js":"27","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\AddQuotation.js":"28","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\EditQuotation.js":"29","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\QuotationList.js":"30","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\landingPage\\LandingPage.js":"31","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\ProfileForgotPassword.js":"32","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\TextBox.js":"33","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\landingPage\\ListCountries.js":"34","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\Button.js":"35","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\axiosinstance.js":"36","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\Utilities.js":"37","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\SaveAlert.js":"38","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\CategoryList.js":"39","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\DateFormat.js":"40","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\contractor\\ContPO.js":"41","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\ClientInvoice.js":"42","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\ContractorInvoice.js":"43","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\SearchAccordion.js":"44","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\landingPage\\CountryFlags.js":"45","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\Clientcontinvoice.js":"46","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\Payment.js":"47","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Invoice.js":"48","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\contractor\\ContPO_list.js":"49","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Payments\\MulipleClientInvPayments.js":"50","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\Calculator.js":"51","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\Sidebar.js":"52","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartCardMonth.js":"53","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartCard.js":"54","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\BarChart.js":"55","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartCardCalender.js":"56","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\Top5.js":"57","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Payments\\EditPayments.js":"58","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartData.js":"59","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\DateFilter.js":"60","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\Pdf.js":"61"},{"size":597,"mtime":1623125900981,"results":"62","hashOfConfig":"63"},{"size":237,"mtime":1623125900870,"results":"64","hashOfConfig":"63"},{"size":375,"mtime":1623125900981,"results":"65","hashOfConfig":"63"},{"size":6879,"mtime":1633676832215,"results":"66","hashOfConfig":"63"},{"size":13857,"mtime":1623751157144,"results":"67","hashOfConfig":"63"},{"size":6201,"mtime":1623125900897,"results":"68","hashOfConfig":"63"},{"size":7375,"mtime":1623751157018,"results":"69","hashOfConfig":"63"},{"size":4978,"mtime":1627388804012,"results":"70","hashOfConfig":"63"},{"size":4031,"mtime":1627388804056,"results":"71","hashOfConfig":"63"},{"size":4447,"mtime":1626330344003,"results":"72","hashOfConfig":"63"},{"size":31551,"mtime":1633956593946,"results":"73","hashOfConfig":"63"},{"size":29003,"mtime":1623751157324,"results":"74","hashOfConfig":"63"},{"size":1008,"mtime":1632892001443,"results":"75","hashOfConfig":"63"},{"size":5303,"mtime":1632891995594,"results":"76","hashOfConfig":"63"},{"size":4107,"mtime":1627388804107,"results":"77","hashOfConfig":"63"},{"size":6151,"mtime":1623751157376,"results":"78","hashOfConfig":"63"},{"size":11472,"mtime":1631341798488,"results":"79","hashOfConfig":"63"},{"size":10251,"mtime":1631342764501,"results":"80","hashOfConfig":"63"},{"size":10772,"mtime":1623751157345,"results":"81","hashOfConfig":"63"},{"size":8540,"mtime":1623751157291,"results":"82","hashOfConfig":"63"},{"size":9743,"mtime":1623751157202,"results":"83","hashOfConfig":"63"},{"size":9842,"mtime":1632722718578,"results":"84","hashOfConfig":"63"},{"size":36697,"mtime":1631514691564,"results":"85","hashOfConfig":"63"},{"size":7559,"mtime":1633503064146,"results":"86","hashOfConfig":"63"},{"size":36697,"mtime":1631514719244,"results":"87","hashOfConfig":"63"},{"size":36380,"mtime":1631514734131,"results":"88","hashOfConfig":"63"},{"size":39256,"mtime":1631524897029,"results":"89","hashOfConfig":"63"},{"size":63181,"mtime":1633949402863,"results":"90","hashOfConfig":"63"},{"size":61481,"mtime":1628595500813,"results":"91","hashOfConfig":"63"},{"size":43470,"mtime":1633958193045,"results":"92","hashOfConfig":"63"},{"size":10461,"mtime":1633936999739,"results":"93","hashOfConfig":"63"},{"size":4103,"mtime":1623125900950,"results":"94","hashOfConfig":"63"},{"size":1003,"mtime":1626326906752,"results":"95","hashOfConfig":"63"},{"size":1393,"mtime":1623125900946,"results":"96","hashOfConfig":"63"},{"size":382,"mtime":1623125900966,"results":"97","hashOfConfig":"63"},{"size":492,"mtime":1632728650404,"results":"98","hashOfConfig":"63"},{"size":170,"mtime":1623125900981,"results":"99","hashOfConfig":"63"},{"size":1577,"mtime":1625817975247,"results":"100","hashOfConfig":"63"},{"size":657,"mtime":1623125900966,"results":"101","hashOfConfig":"63"},{"size":799,"mtime":1625817975239,"results":"102","hashOfConfig":"63"},{"size":25864,"mtime":1633948752154,"results":"103","hashOfConfig":"63"},{"size":25773,"mtime":1633949552023,"results":"104","hashOfConfig":"63"},{"size":26869,"mtime":1633948668260,"results":"105","hashOfConfig":"63"},{"size":16017,"mtime":1631517798432,"results":"106","hashOfConfig":"63"},{"size":929,"mtime":1633945363191,"results":"107","hashOfConfig":"63"},{"size":12251,"mtime":1633513863280,"results":"108","hashOfConfig":"63"},{"size":5008,"mtime":1633501365476,"results":"109","hashOfConfig":"63"},{"size":1823,"mtime":1623125900877,"results":"110","hashOfConfig":"63"},{"size":3993,"mtime":1633504390644,"results":"111","hashOfConfig":"63"},{"size":19888,"mtime":1633501990931,"results":"112","hashOfConfig":"63"},{"size":2913,"mtime":1623125900966,"results":"113","hashOfConfig":"63"},{"size":1059,"mtime":1633695557268,"results":"114","hashOfConfig":"63"},{"size":3878,"mtime":1633952588800,"results":"115","hashOfConfig":"63"},{"size":4265,"mtime":1633953448004,"results":"116","hashOfConfig":"63"},{"size":6257,"mtime":1633954213387,"results":"117","hashOfConfig":"63"},{"size":8439,"mtime":1633954137941,"results":"118","hashOfConfig":"63"},{"size":3173,"mtime":1633695948003,"results":"119","hashOfConfig":"63"},{"size":9456,"mtime":1626327068198,"results":"120","hashOfConfig":"63"},{"size":3761,"mtime":1633950944480,"results":"121","hashOfConfig":"63"},{"size":346,"mtime":1623125900966,"results":"122","hashOfConfig":"63"},{"size":855,"mtime":1633956194764,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"uz9rxk",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"126"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"126"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"126"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"126"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"126"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"126"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":59,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"126"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"158","usedDeprecatedRules":"126"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"126"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"126"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"126"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"126"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"126"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"126"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"126"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"126"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"126"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"126"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"126"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"126"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"126"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"126"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":74,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"126"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"126"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"126"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"126"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"126"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"126"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"126"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"126"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"126"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"126"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"126"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"126"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"126"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"126"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"126"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\index.js",[],["286","287"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\App.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\reportWebVitals.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Routes.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Profile.js",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image\r\n} from 'react-bootstrap';\r\nimport CustomTextBox from './utils/TextBox'\r\nimport Logo from '../components/img/logo-light.png'\r\nimport swal from 'sweetalert'\r\nimport { Link } from 'react-router-dom'\r\nimport ProfileForgotpassword from './auth/ProfileForgotPassword'\r\nimport axiosInstance from './utils/axiosinstance'\r\nimport ListCountries from './administration/landingPage/ListCountries';\r\nimport { Alert } from './utils/Utilities';\r\n\r\n\r\nexport class Profile extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: '',\r\n            full_name: '',\r\n            user_name: '',\r\n            country: '',\r\n            email: '',\r\n            department: '',\r\n            address: '',\r\n            mobile: '',\r\n            role: '',\r\n            country_list: [],\r\n            resetPassword: false,\r\n            countrynames:[],\r\n            contact_person:'',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        axiosInstance.post(`/country/list`)\r\n            .then(res => {\r\n                const country_list = res.data.response.country_list\r\n                // console.log(res.data.session)\r\n                this.setState({ country_list })\r\n                // console.log(country_list);\r\n                const user_details = res.data.session.users\r\n                // console.log(user_details)\r\n                const newcountry = user_details.country.split(',')\r\n                const selected = newcountry.map(id => country_list.find(count => count.id == id))\r\n                let array = []\r\n                if(user_details.role == '2'){\r\n                selected.map(country => array.push(country.name))\r\n                }\r\n                this.setState({\r\n                    id: user_details.id,\r\n                    full_name: user_details.fname,\r\n                    user_name: user_details.name,\r\n                    country: user_details.country,\r\n                    email: user_details.email,\r\n                    address: user_details.address,\r\n                    mobile: user_details.phone,\r\n                    role: user_details.role,\r\n                    countrynames:array,\r\n                    contact_person:user_details.contact_person\r\n                })\r\n            })\r\n        \r\n        // console.log(user_details)\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onEdit = (e) => {\r\n        e.preventDefault();\r\n        const { id,full_name, user_name, country, email,address,mobile, user_type, position, contact_person } = this.state;\r\n        const data = {id,fname: full_name, email, address, phone:mobile,department:\"test\",contact_person:\"test\"}\r\n        axiosInstance.post(`/profile/edit/${id}`,data)\r\n        .then(res=>{\r\n            // console.log(res.data)\r\n            Alert(\"success\",\"Success\",`${res.data.message.success}`)\r\n            this.componentDidMount()\r\n        })\r\n    }\r\n    setPassword = () => {\r\n        this.setState({ resetPassword: !this.state.resetPassword })\r\n    }\r\n\r\n    render() {\r\n        const { full_name, user_name, country,countrynames, email, department, password, address, mobile, resetPassword, id, country_list, role } = this.state;\r\n        return (\r\n            <div>\r\n                {resetPassword ? <ProfileForgotpassword Back={this.setPassword} id={id} /> :\r\n                    <div className=\"component\">\r\n\r\n                        <Row  >\r\n                            <Col lg={3} style={{ marginTop: '100px' }}>\r\n                                <Image src={Logo} className=\"profile-img\" ></Image>\r\n                            </Col>\r\n\r\n                            <Col lg={4} >\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"User name\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"user_name\"\r\n                                    txtBoxValue={user_name}\r\n                                    txtBoxPH=\"User Name\"\r\n                                    changeEvent={this.onChange}\r\n                                    disabled='true'\r\n                                />\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Full name\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"full_name\"\r\n                                    txtBoxValue={full_name}\r\n                                    txtBoxPH=\"Full Name\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                                 <CustomTextBox\r\n                                    txtBoxLabel=\"Address\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"address\"\r\n                                    txtBoxValue={address}\r\n                                    txtBoxID=\"address\"\r\n                                    txtBoxPH=\"Address\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                                {/* <Form.Group >\r\n                                    <Form.Label >Country</Form.Label>\r\n                                    <Form.Control as=\"select\" className=\"select-style\" name=\"country\" value={country} onChange={this.onChange} required>\r\n                                        <option value='0' selected disabled> Country</option>\r\n                                        {country_list.map((country) => {\r\n                                            return <option key={country.id} value={country.id}>{country.name}</option>\r\n                                        })}\r\n                                    </Form.Control>\r\n                                </Form.Group> */}\r\n                            </Col>\r\n\r\n                            {/* 2cond col */}\r\n\r\n                            <Col lg={4} >\r\n                                {/* <Form.Group >\r\n                                    <Form.Label >Department</Form.Label>\r\n                                    <Form.Control as=\"select\" name=\"department\" value={department} onChange={this.onChange} required>\r\n                                        <option value=\"\" selected disabled> Select</option>\r\n                                        <option value=\"Admin\">department 2</option>\r\n                                        <option value=\"User\">department 3</option>\r\n                                        <option value=\"Admin\">department 4</option>\r\n                                        <option value=\"User\">department 5</option>\r\n                                    </Form.Control>\r\n                                </Form.Group> */}\r\n                                {/* <CustomTextBox\r\n                                    txtBoxLabel=\" Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"password\"\r\n                                    txtBoxValue={password}\r\n                                    txtBoxID=\"password\"\r\n                                    txtBoxPH=\"********\"\r\n                                    changeEvent={this.onChange}\r\n                                /> */}\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Email\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"email\"\r\n                                    txtBoxValue={email}\r\n                                    txtBoxPH=\"Email\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Phone Number\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"mobile\"\r\n                                    txtBoxValue={mobile}\r\n                                    txtBoxID=\"mobile\"\r\n                                    txtBoxPH=\"mobile\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                               \r\n                            </Col>\r\n                        </Row><br />\r\n                        {/* {role === '2' &&\r\n                        <Row>\r\n                            <Col lg={3} style={{ marginTop: '100px' }}>\r\n                                <div className='ui center aligned container'><div className='ui huge label'>Permissions</div></div>\r\n                            </Col>\r\n\r\n                            <Col lg={4} md={12} sm={12}>\r\n\r\n                                <Card >\r\n\r\n                                    <table className=\"table table-borderless table-condensed table-hover\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th scope=\"col\">Quotations/Invoice Management</th>\r\n                                                <th scope=\"col\">View</th>\r\n                                                <th scope=\"col\">Edit</th>\r\n\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td scope=\"row\"> <label className='h6'>Quotation Client Section</label></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td scope=\"row\"><label className='h6'>Quotation Contractor Section</label></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td scope=\"row\"><label className='h6'>Invoice Client Section</label></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td scope=\"row\"><label className='h6'>Invoice Contractor Section</label></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n                                                <td> <Form.Check type=\"checkbox\" /></td>\r\n\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </Card><br /></Col>\r\n\r\n                            <Col lg={4} >\r\n\r\n                                <Card >\r\n\r\n                                    <Form.Label >Administration</Form.Label><br />\r\n                                    <div>\r\n                                        <div className='ui checkbox'><input type=\"checkbox\" /><Form.Label >View User</Form.Label></div> <nbsp />\r\n                                        <div className='ui checkbox mx-sm-5'><input type=\"checkbox\" /><Form.Label >Manage User</Form.Label></div>\r\n                                    </div>\r\n\r\n                                </Card> <br />\r\n\r\n                                <Card >\r\n                                    <Form.Label >Other Privileges</Form.Label><br />\r\n                                    <div>\r\n                                        <div className='ui checkbox'><input type=\"checkbox\" />\r\n                                            <Form.Label >View Dashboard</Form.Label></div></div>\r\n                                </Card>\r\n\r\n                            </Col>\r\n                        </Row>} */}\r\n                        <Row>\r\n                            <Col lg={3} >\r\n                                <div className='ui center aligned container'><div className='ui huge label'>Country</div></div>\r\n                            </Col>\r\n\r\n                            <Col lg={8} >\r\n\r\n                                <Card>\r\n                                    {localStorage.getItem('role')== 'admin'?\r\n                                     <div className='ui six cards mx-sm-2' >\r\n                                     {country_list.map(country =>\r\n                                     <ListCountries country={country.name} profile=\"test\"/>)}\r\n                                 </div>:\r\n                                    <div className='ui six cards mx-sm-2' >\r\n                                        {countrynames.map(country =>\r\n                                        <ListCountries country={country} profile=\"test\"/>)}\r\n                                    </div>}\r\n\r\n                                </Card></Col>\r\n                        </Row>\r\n                        <Row className='d-flex justify-content-md-center' style={{ marginTop: \"2%\" }}>\r\n                            \r\n                                <Button onClick={this.onEdit} >Save</Button>\r\n                                <Button onClick={this.setPassword} >Reset Password</Button>\r\n                            \r\n                        </Row>\r\n\r\n                    </div>}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Navbar.js",["304","305","306","307","308","309","310","311","312","313"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n// import ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n// import MailIcon from '@material-ui/icons/Mail';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from './img/logo-light.png';\r\nimport {\r\n  Image,\r\n  Row,\r\n  Col,\r\n  DropdownButton,\r\n  Dropdown,\r\n  NavDropdown\r\n} from 'react-bootstrap'\r\n\r\nconst drawerWidth = 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const iconStyle = {\r\n    fontSize: '1.1em',\r\n    marginRight: '10px',\r\n    color: '#6B6969'\r\n  }\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Link to=\"/list\">\r\n      <Image src={Logo} style={{ marginLeft: \"30px\", position: 'relative', bottom: '30px' }} />\r\n      </Link>\r\n      <Link to=\"/list\" className=\"nav-link w3-bar-item\" style={{ fontSize: \"1.1em\" }}>\r\n        <i class=\"fa fa-home\" style={iconStyle} aria-hidden=\"true\"></i> Home\r\n        </Link>\r\n      <Link to=\"/dashboard\" className=\"nav-link w3-bar-item\" style={{ fontSize: \"1.1em\" }}>\r\n      <i class=\"fa fa-bars\"  style={iconStyle} aria-hidden=\"true\"></i>  Dashboard\r\n      </Link>\r\n      <Link to=\"/profile\" className=\"nav-link w3-bar-item\" style={{ fontSize: \"1.1em\" }}>\r\n        <i class=\"fa fa-user-circle\" style={iconStyle} aria-hidden=\"true\"></i> My Profile\r\n      </Link>\r\n      <div >\r\n        <div className=\"nav-link w3-bar-item\" style={{ fontSize: \"1.1em\" }}>\r\n          <i className=\"fa fa-cog \" style={iconStyle} aria-hidden=\"true\"></i> Administration\r\n        </div>\r\n        <div style={{ marginLeft: '40px' }}>\r\n          {localStorage.getItem('role') == 'admin' ?<Link to=\"/user-list\" className=\"nav-link\" style={{ fontSize: \"1em\" }}> User </Link>:''}\r\n          <Link to=\"/client-list\" className=\"nav-link\" style={{ fontSize: \"1em\" }}> Client </Link>\r\n          <Link to=\"/contractor-list\" className=\"nav-link\" style={{ fontSize: \"1em\" }}> Contractor </Link>\r\n        </div>\r\n      </div>\r\n\r\n      {/* <Link to=\"/country\" className=\"nav-link w3-bar-item\" style={{ fontSize: \"1.1em\" }}>\r\n        <i class=\"fa fa-globe\" style={iconStyle} aria-hidden=\"true\"></i> Add Country\r\n      </Link> */}\r\n      {/* <Link to=\"/addinvoice\" className=\"nav-link w3-bar-item\" style={{ fontSize: \"1.1em\" }}>Invoice</Link> */}\r\n\r\n    </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar style={{ backgroundColor: \"rgb(58,95,133)\" }}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <i class='fas fa-bars' />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" style={{ marginRight: '40px' }} noWrap>\r\n            In a world of gray, CCM provides clarity to all construction & facility projects.\r\n          </Typography>\r\n          <Typography style={{ fontSize: '2em' }} noWrap>\r\n            <Link id=\"link-button\" to='/logout'style={{textDecoration:'none',marginRight:\"15px\",fontSize:'15px',marginTop:\"10px\"}}>Log out</Link>\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\AddCountry.js",["314","315","316","317","318"],"import React, { Component } from 'react'\r\nimport { Card, Row, Col, Form, Image } from 'react-bootstrap'\r\nimport topimage from './img/logo-light.png';\r\nimport CustomButton from './utils/Button'\r\nimport CountrySelect from 'react-bootstrap-country-select';\r\nimport { head } from 'ramda';\r\nimport axiosInstance from './utils/axiosinstance'\r\nimport { Alert } from './utils/Utilities'\r\nimport swal from 'sweetalert';\r\nimport Swal from 'sweetalert2';\r\n\r\nvar token = localStorage.getItem('access_token')\r\n\r\nexport default class Country extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            country_id: null,\r\n            country_object: '',\r\n            status: '',\r\n            country_list: [],\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // console.log(process.env.REACT_APP_URL)\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                // console.log(res,'response')\r\n                const country_list = res.data.response.country_list\r\n                this.setState({ country_list })\r\n                // console.log(country_list, 'country_list');\r\n            })\r\n    }\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n\r\n    countryChange = (e) => {\r\n        // console.log(e)\r\n        this.setState({ country_object: e }, () => this.filterID())\r\n    }\r\n\r\n\r\n    filterID = () => {\r\n        const { country_list, country_object, } = this.state;\r\n        if (country_object !== null) {\r\n            const filterList = head(country_list.filter(object => object.name == country_object.name))\r\n            if (filterList !== undefined) {\r\n                this.setState({ country_id: filterList.id, status: filterList.status })\r\n            }\r\n\r\n        } else {\r\n            this.setState({ country_id: null, status: '' })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onSubmit = (e) => {\r\n        const { country_object, status } = this.state;\r\n\r\n        const data = {\r\n            name: country_object.name,\r\n            status: status,\r\n        }\r\n        if (country_object === null) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'Please Fillout all the Fields!',\r\n            })\r\n        } else {\r\n            axiosInstance.post(`/country/add`, data,)\r\n                .then((res) => {\r\n                    // console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        swal(\"success!\", `${res.data.message.success}`, \"success\")\r\n                    } else {\r\n                        swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                    }\r\n                })\r\n                .then(() => this.onCancel())\r\n            .catch(e => console.log(e))\r\n        }\r\n    }\r\n\r\n\r\n    onUpdate = (e) => {\r\n        const { country_id, country_object, status } = this.state;\r\n\r\n        const data = {\r\n            name: country_object.name,\r\n            status: status,\r\n        }\r\n        axiosInstance.post(`/country/edit/` + country_id, data)\r\n            .then(res => {\r\n                if (res.data.message.success !== undefined) {\r\n                    // console.log(res)\r\n                    Alert(\"success\", \"Success!\", `${res.data.message.success}`)\r\n                } else {\r\n                    // console.log(res)\r\n                    Alert(\"error\", \"error!\", `${res.data.message.error}`)\r\n                }\r\n            })\r\n            .then(() => this.onCancel())\r\n            .catch(e => console.log(e))\r\n    }\r\n\r\n\r\n    onDelete = (e) => {\r\n        const { country_id, country_object, status } = this.state;\r\n\r\n        axiosInstance.post(`/country/delete`, { id: country_id })\r\n        .then(res => {\r\n            if (res.data.message.success !== undefined) {\r\n                // console.log(res)\r\n                Alert(\"success\", \"Success!\", `${res.data.message.success}`)\r\n            } else {\r\n                // console.log(res)\r\n                Alert(\"error\", \"error!\", `${res.data.message.error}`)\r\n            }\r\n        })\r\n            .then(() => this.onCancel())\r\n            .catch((e) => console.log(e))\r\n    }\r\n\r\n\r\n    onCancel = (e) => {\r\n        this.setState({\r\n            country_id: null,\r\n            country_object: '',\r\n            status: '',\r\n            country_list: [],\r\n        })\r\n        this.componentDidMount();\r\n    }\r\n\r\n    render() {\r\n        const { country_id, status, country_object } = this.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"component\">\r\n                    <p style={{ fontSize: \"20px\" }}>Country</p>\r\n\r\n                    <Card border=\"dark\" sm={6} style={{ height: \"500px\" }}>\r\n                        <Form >\r\n                            <Row style={{ marginTop: \"3%\" }}>\r\n                                <Col lg={4} sm={4}>\r\n                                    <Image src={topimage} rounded style={{ width: \"100px\", marginLeft: \"20%\" }} />\r\n                                </Col>\r\n\r\n                                <Col xs={6} sm={4}>\r\n\r\n                                    <Form.Group  >\r\n                                        <Form.Label style={{ fontSize: \"17px\", fontWeight: \"bold\", marginTop: \"15px\" }}>Country Name</Form.Label>\r\n                                        <CountrySelect\r\n                                            value={country_object}\r\n                                            onChange={this.countryChange}\r\n                                            valueAs='name'\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Col>\r\n\r\n                                {/* <Col xs={6} sm={4}>\r\n                                    <Form.Group  >\r\n                                        <Form.Label style={{ fontSize: \"17px\", fontWeight: \"bold\", marginTop: \"15px\" }}>Status</Form.Label>\r\n                                        <Form.Control as=\"select\" name=\"status\" placeholder=\"status\" value={status} id=\"status\" onChange={this.onChange} >\r\n                                            <option value=\"\" disabled>Status</option>\r\n                                            <option value=\"1\">Active</option>\r\n                                            <option value=\"0\">Inactive</option>\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col> */}\r\n                            </Row>\r\n                            <Row className=\"row justify-content-md-center\" style={{ marginTop: \"15%\" }}>\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Add\" disabledButton={country_id !== null} ClickEvent={this.onSubmit} />\r\n                                {/* <CustomButton btnType=\"reset\" BtnTxt=\"Update\" disabledButton={country_id === null} ClickEvent={this.onUpdate} /> */}\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Delete\" disabledButton={country_id === null} ClickEvent={this.onDelete} />\r\n                                {/* <CustomButton btnType=\"reset\" BtnTxt=\"Cancel\" ClickEvent={this.onCancel} /> */}\r\n                            </Row>\r\n                        </Form>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\ForgotPassword.js",["319","320","321"],"import React, { Component } from 'react'\r\nimport { Card, Form, Row, Col, Button, Image } from 'react-bootstrap'\r\nimport Logo from './img/logo-light.png'\r\nimport axios from 'axios'\r\nimport CustomTextBox from './utils/TextBox'\r\nimport { Alert } from './utils/Utilities'\r\nimport axiosInstance from './utils/axiosinstance'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport class Forgotpassword extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            uname:''\r\n        }\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit = () => {\r\n        const { uname } = this.state\r\n\r\n        axios.post(`https://ccmanagement.group/quote_api/public/login/forgot_password`,{uname},{\r\n            auth: {\r\n            username: 'ccm_auth',\r\n            password: 'ccm_digi123#'\r\n            },\r\n        })\r\n        .then(res =>{\r\n            if(res.data.message.success !== undefined){\r\n                Alert('success','Success!',res.data.message.success)\r\n            }\r\n            else{\r\n                Alert('error','Oops!',res.data.message.error)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const { uname } = this.state\r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <Card border=\"dark\" sm={6} >\r\n                        <Row>\r\n                            <Col sm={4}>\r\n                                <Image src={Logo} rounded style={{ width: \"100px\", marginLeft: \"30%\", marginTop: \"20%\" }} />\r\n                            </Col>\r\n                            <Col sm={4} style={{ marginTop: '50px' }}>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"User Name\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"uname\"\r\n                                    txtBoxValue={uname}\r\n                                    txtBoxPH=\"User Name\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                                \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='d-flex justify-content-center' style={{ marginTop: \"10%\" }}>\r\n                            <Button onClick={()=>window.location.replace('/')}>Back</Button>\r\n                            <Button onClick={this.onSubmit}>Reset</Button>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forgotpassword\r\n\r\n// export default function Forgotpassword(props) {\r\n\r\n//     const [Password, setPassword] = useState('')\r\n//     const [ConfirmPassword, setConfirmPassword] = useState('')\r\n\r\n\r\n//     const onSubmit = () => {\r\n//         const data = { Password, ConfirmPassword,}\r\n//         if (Object.values(data).every(x => x)) {\r\n//             Alert(\"success\", \"Success\", \"Password Reset Successful\")\r\n//             props.status = false\r\n//         }\r\n//         else {\r\n//             Alert(\"error\", \"Oops\", \"Please Fillout All Fields!\")\r\n//         }\r\n//         if (Password !== ConfirmPassword) {\r\n//             Alert(\"error\", \"Oops\", \"Password Mismatched!\")\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"component\">\r\n//                 <Card border=\"dark\" sm={6} >\r\n//                     <Row>\r\n//                         <Col sm={4}>\r\n//                             <Image src={Logo} rounded style={{ width: \"100px\", marginLeft: \"30%\", marginTop: \"20%\" }} />\r\n//                         </Col>\r\n//                         <Col sm={4} >\r\n//                         <CustomTextBox\r\n//                             txtBoxLabel=\"Password\"\r\n//                             txtBoxType=\"text\"\r\n//                             txtBoxName=\"Password\"\r\n//                             txtBoxID=\"Password\"\r\n//                             txtBoxPH=\"Password\"\r\n//                             onChange={(e)=>setPassword(e.target.value)}\r\n//                         />\r\n//                         <CustomTextBox\r\n//                             txtBoxLabel=\"Confirm Password\"\r\n//                             txtBoxType=\"text\"\r\n//                             txtBoxName=\"ConfirmPassword\"\r\n//                             txtBoxID=\"ConfirmPassword\"\r\n//                             txtBoxPH=\"ConfirmPassword\"\r\n//                             onChange={(e)=>setConfirmPassword(e.target.value)}\r\n//                         />\r\n//                         </Col>\r\n//                     </Row>\r\n//                     <Row className='d-flex justify-content-center' style={{ marginTop: \"10%\" }}>\r\n//                         <Button onClick={() => onSubmit()}>Reset</Button>\r\n//                     </Row>\r\n//                 </Card>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\NewUserPwd.js",["322","323","324"],"import React, { Component } from 'react'\r\nimport { Card, Form, Row, Col, Button, Image } from 'react-bootstrap'\r\nimport Logo from './img/logo-light.png'\r\nimport axios from 'axios'\r\nimport CustomTextBox from './utils/TextBox'\r\nimport { Alert } from './utils/Utilities'\r\nimport axiosInstance from './utils/axiosinstance'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport class NewUserPwd extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            Password: '',\r\n            ConfirmPassword: '',\r\n            hash:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const url=new URL(window.location.href)\r\n        const hash=url.searchParams.get('hash')\r\n        if (hash===null) {\r\n            window.location.replace('/')\r\n        }\r\n        // console.log(hash)\r\n        this.setState({\r\n            hash:hash\r\n        })\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit = () => {\r\n        const { Password, ConfirmPassword, hash} = this.state\r\n\r\n        if (Object.values(this.state).every(x => x)) {\r\n            if (Password !== ConfirmPassword) {\r\n                Alert(\"error\", \"Oops\", \"Password Mismatched!\")\r\n                return\r\n            }\r\n            const data = {password: Password, confirm_password: ConfirmPassword, hash:hash }\r\n            axiosInstance.post(`https://ccmanagement.group/quote_api/public/login/activation`,data,{\r\n                auth: {\r\n                username: 'ccm_auth',\r\n                password: 'ccm_digi123#'\r\n                },\r\n            })\r\n                .then((res) => {\r\n\r\n                    if(res.data.message.error === undefined){\r\n                        Alert(\"success\", \"Success\", `${res.data.message.success}`)\r\n                        setTimeout(()=>{\r\n                            window.location.replace('/')\r\n                        },2000)\r\n                    }\r\n                    else{\r\n                        Alert(\"error\",\"Warning\",`${res.data.message.error}`)\r\n                    }\r\n                    // console.log(res.data)\r\n\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { Password, ConfirmPassword} = this.state\r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <Card border=\"dark\" sm={6} >\r\n                        <Row>\r\n                            <Col sm={4}>\r\n                                <Image src={Logo} rounded style={{ width: \"100px\", marginLeft: \"30%\", marginTop: \"20%\" }} />\r\n                            </Col>\r\n                            <Col sm={4} style={{ marginTop: '50px' }}>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"Password\"\r\n                                    txtBoxValue={Password}\r\n                                    txtBoxPH=\"Password\"\r\n                                    changeEvent={this.onChange}\r\n                                /><br/>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Confirm Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"ConfirmPassword\"\r\n                                    txtBoxValue={ConfirmPassword}\r\n                                    txtBoxPH=\"ConfirmPassword\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='d-flex justify-content-center' style={{ marginTop: \"4%\" }}>\r\n                            <Button onClick={this.onSubmit}>Save</Button>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default NewUserPwd\r\n\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\DummyNav.js",["325","326","327","328","329","330","331","332","333","334"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n// import ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n// import MailIcon from '@material-ui/icons/Mail';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from './img/logo-light.png';\r\nimport {\r\n  Image,\r\n  Row,\r\n  Col,\r\n  DropdownButton,\r\n  Dropdown,\r\n  NavDropdown\r\n} from 'react-bootstrap'\r\n\r\nconst drawerWidth = 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const iconStyle = {\r\n    fontSize: '1.1em',\r\n    marginRight: '10px',\r\n    color: '#6B6969'\r\n  }\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Link to=\"/\">\r\n      <Image src={Logo} style={{ marginLeft: \"30px\", position: 'relative', bottom: '30px' }} />\r\n      </Link>\r\n    </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar style={{ backgroundColor: \"rgb(58,95,133)\" }}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <i class='fas fa-bars' />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" style={{ marginRight: '40px' }} noWrap>\r\n            In a world of gray, CCM provides clarity to all construction & facility projects.\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\main.js",["335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\user\\AddUser.js",["362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image\r\n} from 'react-bootstrap';\r\nimport CustomTextBox from '../../utils/TextBox'\r\nimport CustomButton from '../../utils/Button'\r\nimport Logo from '../../img/logo-light.png'\r\nimport axiosInstance from '../../utils/axiosinstance'\r\nimport swal from 'sweetalert';\r\nimport Swal from 'sweetalert2';\r\nimport { Link } from 'react-router-dom';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport ReactCountryFlag from \"react-country-flag\"\r\nimport ReactFlagsSelect from 'react-flags-select';\r\nimport { Us } from 'react-flags-select';\r\nimport Forgotpassword from '../../auth/Forgotpassword';\r\nimport { Alert } from '../../utils/Utilities'\r\nimport ListCountries from '../landingPage/ListCountries'\r\nimport { indexOf } from 'ramda';\r\n\r\nvar token = localStorage.getItem('access_token')\r\nconst validEmailRegex = RegExp(/^[a-z0-9]{1,15}\\.?[a-z0-9]{1,15}?@[a-z]{4,20}\\.[a-z]{2,5}(\\.[a-z]{2,})?$/);\r\n\r\n// form error validation\r\nconst validateForm = errors => {\r\n    let valid = true;\r\n    Object.values(errors).forEach(val => val.length > 0 && (valid = false));\r\n    return valid;\r\n}\r\n\r\nclass AddUser extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.initialState = {\r\n            user_id: this.props.id,\r\n            full_name: \"\",\r\n            user_name: \"\",\r\n            country: 0,\r\n            email: \"\",\r\n            address: \"\",\r\n            phone: \"\",\r\n            country_list: [],\r\n            role: \"1\",\r\n            setPassword: false,\r\n            invoice_client_sec_view:false,\r\n            invoice_cont_sec_view:false,\r\n            quotation_client_sec_view:false,\r\n            quotation_cont_sec_view:false,\r\n            invoice_client_sec_edit:false,\r\n            invoice_cont_sec_edit:false,\r\n            quotation_client_sec_edit:false,\r\n            quotation_cont_sec_edit:false,\r\n            view_cont:false,\r\n            view_client:false,\r\n            view_dashboard:false,\r\n            selectedcountries:[],\r\n            selectedcountrynames:[],\r\n            selected:[],\r\n            copiedcountry_list:[],\r\n            errors: {\r\n                email: '',\r\n            }\r\n\r\n        }\r\n        this.state = this.initialState\r\n    }\r\n    componentDidMount() {\r\n        console.log(this.state.user_id, \"this.state.user_id\")\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                this.setState({ country_list,copiedcountry_list:country_list })\r\n            })\r\n            .then(()=>{\r\n\r\n        if (this.state.user_id !== null) {\r\n            axiosInstance.post(`/user/get_user_details`, { id: this.state.user_id })\r\n                .then(res => {\r\n                    // console.log(res.data.response.user_details)\r\n                    const user_details = res.data.response.user_details\r\n                    if( user_details.role != '1'){\r\n                    this.calcountryName(user_details)\r\n                    }\r\n                    this.setState({\r\n                        user_name: user_details.name,\r\n                        full_name: user_details.fname,\r\n                        address: user_details.address,\r\n                        country: user_details.country,\r\n                        phone: user_details.phone,\r\n                        email: user_details.email,\r\n                        department: user_details.department,\r\n                        role: user_details.role,\r\n                        contact_person: user_details.contact_person,\r\n                        invoice_cont_sec_view:user_details.invoice_cont_sec == '1'?true:false,\r\n                        invoice_cont_sec_edit:user_details.invoice_cont_sec == '2'?true:false,\r\n                        invoice_client_sec_view:user_details.invoice_client_sec == '1'?true:false,\r\n                        invoice_client_sec_edit:user_details.invoice_client_sec == '2'?true:false,\r\n                        quotation_cont_sec_view:user_details.quotation_cont_sec == '1'?true:false,\r\n                        quotation_cont_sec_edit:user_details.quotation_cont_sec == '2'?true:false,\r\n                        quotation_client_sec_view:user_details.quotation_client_sec == '1'?true:false,\r\n                        quotation_client_sec_edit:user_details.quotation_client_sec == '2'?true:false,\r\n                        view_dashboard:user_details.view_dash == '1'?true:false,\r\n                        view_client:user_details.view_client == '1'?true:false,\r\n                        view_cont:user_details.view_cont == '1'?true:false,\r\n                    })\r\n                })\r\n        }\r\n    })\r\n\r\n    }\r\n\r\n    calcountryName = (details) =>{\r\n        const { country_list } = this.state\r\n        const newcountry = details.country.split(',')\r\n        const selected = newcountry.map(id => country_list.find(count => count.id == id))\r\n        // console.log(selected)\r\n        let arr =[]\r\n        const unselected = country_list.map(count =>{\r\n            const found = newcountry.find(id => count.id == id)\r\n            if ( found === undefined)\r\n                arr.push(count)\r\n        })\r\n        this.setState({copiedcountry_list:arr})\r\n\r\n        // const unselected = newcountry.map(id => country_list.filter(count => count.id != id))\r\n        // console.log(unselected,\"unsel\")\r\n        let array = []\r\n        selected.map(country => array.push(country.name))\r\n        // console.log(array,newcountry,\"res\")\r\n        this.setState({selectedcountrynames:array,selectedcountries:newcountry})\r\n    }\r\n    onChange = (e) => {\r\n        const { name, value } = e.target;\r\n        let errors = this.state.errors;\r\n\r\n        switch (name) {\r\n            case 'email':\r\n                errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState({ errors, [name]: value })\r\n    }\r\n    onChangeCheckbox = e =>{\r\n        this.setState({[e.target.name]:e.target.checked},()=>console.log(this.state))\r\n\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        const { \r\n            user_name, \r\n            full_name,\r\n            // country, \r\n            email, \r\n            address, \r\n            department, \r\n            contact_person, \r\n            phone, \r\n            role, \r\n            errors,\r\n            quotation_client_sec_edit,\r\n            quotation_client_sec_view,\r\n            quotation_cont_sec_edit,\r\n            quotation_cont_sec_view,\r\n            invoice_client_sec_edit,\r\n            invoice_client_sec_view,\r\n            invoice_cont_sec_edit,\r\n            invoice_cont_sec_view,\r\n            view_dashboard,selectedcountries } = this.state;\r\n\r\n        const quotation_client_sec = role == '1'? 2 : quotation_client_sec_edit ? 2 : quotation_client_sec_view ? 1:0\r\n        const quotation_cont_sec = role == '1'? 2 : quotation_cont_sec_edit ? 2 : quotation_cont_sec_view ? 1:0\r\n        const invoice_cont_sec = role == '1'? 2 : invoice_cont_sec_edit ? 2 : invoice_cont_sec_view ? 1:0\r\n        const invoice_client_sec = role == '1'? 2 : invoice_client_sec_edit ? 2 : invoice_client_sec_view ? 1:0\r\n        const view_dash = role == '1' ? 1 : view_dashboard ? 1 : 0\r\n        const view_client = role == '1' ? 1 : this.state.view_client ? 1 : 0 \r\n        const view_cont = role == '1' ? 1 : this.state.view_cont ? 1 : 0\r\n        const country = role == '1' ? [\"2\"] : selectedcountries\r\n        const data = { name: user_name, fname: full_name, email, address, phone, role, status: 1, quotation_client_sec,quotation_cont_sec,invoice_cont_sec,invoice_client_sec,view_dash,view_cont,view_client,country}\r\n    //    console.log(data)\r\n        if (validateForm(errors)) {\r\n            axiosInstance.post(`/user/add`, data)\r\n                .then((res) => {\r\n                    // console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.onCancel())\r\n                    } else {\r\n                        swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                    }\r\n                    this.props.Back()\r\n                })\r\n                .catch((e) => {\r\n                    // console.log(e)\r\n                })\r\n        } else {\r\n            Alert('error', 'error', 'Invalid Form')\r\n        }\r\n\r\n    }\r\n    onUpdate = (e) => {\r\n        const { user_id, user_name, full_name, email, address, phone, role,\r\n            quotation_client_sec_edit,\r\n            quotation_client_sec_view,\r\n            quotation_cont_sec_edit,\r\n            quotation_cont_sec_view,\r\n            invoice_client_sec_edit,\r\n            invoice_client_sec_view,\r\n            invoice_cont_sec_edit,\r\n            invoice_cont_sec_view,view_dashboard,selectedcountries } = this.state;\r\n            // console.log(selectedcountries,\"selected\")\r\n        \r\n        const country = role == '1' ? [\"2\"] : selectedcountries\r\n        const quotation_client_sec = role == '1'? 2 : quotation_client_sec_edit ? 2 : quotation_client_sec_view ? 1:0\r\n        const quotation_cont_sec = role == '1'? 2 : quotation_cont_sec_edit ? 2 : quotation_cont_sec_view ? 1:0\r\n        const invoice_cont_sec = role == '1'? 2 : invoice_cont_sec_edit ? 2 : invoice_cont_sec_view ? 1:0\r\n        const invoice_client_sec = role == '1'? 2 : invoice_client_sec_edit ? 2 : invoice_client_sec_view ? 1:0\r\n        const view_dash = role == '1' ? 1 : view_dashboard ? 1 : 0\r\n        const view_client = role == '1' ? 1 : this.state.view_client ? 1 : 0 \r\n        const view_cont = role == '1' ? 1 : this.state.view_cont ? 1 : 0 \r\n        const data = { name: user_name, fname: full_name, email, country, address, phone, role, status: 1, quotation_client_sec,quotation_cont_sec,invoice_cont_sec,invoice_client_sec,view_dash,view_cont,view_client,country}\r\n        // console.log(data, user_id)\r\n\r\n        axiosInstance.post(`/user/edit/` + user_id, data)\r\n            .then((res) => {\r\n                // console.log(res);\r\n                if (res.data.message.success !== undefined) {\r\n                    swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.onCancel())\r\n                } else {\r\n                    swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                }\r\n                this.props.Back()\r\n            })\r\n            .catch((e) => {\r\n                // console.log(e)\r\n            })\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.setState(this.initialState)\r\n    }\r\n    setPassword = () => {\r\n        this.setState({ setPassword: !this.state.setPassword })\r\n    }\r\n\r\n    handleChangeMultiple = (e) => {\r\n        const { selectedcountries,selectedcountrynames } = this.state\r\n        this.setState({\r\n            selectedcountries:[...selectedcountries,e.target.value],\r\n            selectedcountrynames:[...selectedcountrynames,e.target.selectedOptions[0].text]\r\n        },()=>{\r\n            const countries = this.state.copiedcountry_list.filter(country => country.id != e.target.value)\r\n            this.setState({copiedcountry_list:countries})\r\n            // console.log(this.state.selectedcountries,this.state.selectedcountrynames,\"countries\")\r\n        })\r\n      };\r\n    removeCountry = (country) =>{\r\n       const {selectedcountrynames,country_list,selectedcountries,copiedcountry_list} = this.state\r\n       let arr = [...selectedcountrynames]\r\n       for( let i = 0; i < arr.length; i++){ \r\n                                   \r\n        if ( arr[i] === country) { \r\n            arr.splice(i, 1); \r\n            i--; \r\n        }\r\n    }\r\n        this.setState({selectedcountrynames:arr})\r\n        // console.log(arr)\r\n    \r\n       const sel_cont = country_list.find(count => count.name == country)\r\n\r\n       this.setState({copiedcountry_list:[...copiedcountry_list,sel_cont]})\r\n    \r\n       let newarr = [...selectedcountries]\r\n\r\n       for( let i = 0; i < newarr.length; i++){ \r\n                                   \r\n        if ( newarr[i] === sel_cont.id) { \r\n            newarr.splice(i, 1); \r\n            i--; \r\n        }\r\n    }\r\n    this.setState({selectedcountries:newarr})\r\n    // console.log(newarr)\r\n    //    console.log(selectedcountries.splice(i,1),\"removedid\")\r\n    //    //    console.log(i)\r\n    //    this.setState({selectedcountries:selectedcountries.splice(i,1)})\r\n      \r\n    }\r\n    render() {\r\n        const { full_name, user_name,selectedcountries, country, email, address, phone, country_list, role, setPassword, errors,selectedcountrynames } = this.state;\r\n        return (\r\n            <div>\r\n                <p style={{ fontSize: \"20px\" }}>User Profile</p>\r\n                {setPassword ? <Forgotpassword Back={this.setPassword} id={this.props.id} /> :\r\n                    <div className=\"component\">\r\n                        <Card style={{ marginTop: \"20px\" }}>\r\n                            <Row style={{ marginTop: \"20px\" }}>\r\n                                <Col lg={2}>\r\n                                    <Image src={Logo} className=\"profile-img\" style={{ marginTop: '100px' }} ></Image>\r\n                                </Col>\r\n                                <Col lg={3}>\r\n                                    <CustomTextBox\r\n                                        style=\"label-style\"\r\n                                        txtBoxLabel=\"User name\"\r\n                                        txtBoxType=\"text\"\r\n                                        txtBoxName=\"user_name\"\r\n                                        txtBoxValue={user_name}\r\n                                        txtBoxID=\"user_name\"\r\n                                        txtBoxPH=\"User Name\"\r\n                                        changeEvent={this.onChange}\r\n                                    />\r\n                                    <CustomTextBox\r\n                                        style=\"label-style\"\r\n                                        txtBoxLabel=\"Full name\"\r\n                                        txtBoxType=\"text\"\r\n                                        txtBoxName=\"full_name\"\r\n                                        txtBoxValue={full_name}\r\n                                        txtBoxID=\"full_name\"\r\n                                        txtBoxPH=\"Full Name\"\r\n                                        changeEvent={this.onChange}\r\n                                    />\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label >Role</Form.Label>\r\n                                        <Col>\r\n                                            <Form.Control as=\"select\" className=\"select-style\" name=\"role\" value={role} onChange={this.onChange} required>\r\n                                                <option value=\"\" disabled> Role</option>\r\n                                                <option value=\"1\">Admin</option>\r\n                                                <option value=\"2\">User</option>\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                </Col>\r\n                                <Col lg={3}>\r\n                                    <CustomTextBox\r\n                                        style=\"label-style\"\r\n                                        txtBoxLabel=\"Email\"\r\n                                        txtBoxType=\"text\"\r\n                                        txtBoxName=\"email\"\r\n                                        txtBoxValue={email}\r\n                                        txtBoxID=\"email\"\r\n                                        txtBoxPH=\"Email\"\r\n                                        changeEvent={this.onChange}\r\n                                    />\r\n                                    {errors.email.length > 0 && (\r\n                                        <span className=\"error\">{errors.email}</span>\r\n                                    )}\r\n                                    <CustomTextBox\r\n                                        style=\"label-style\"\r\n                                        txtBoxLabel=\"Address\"\r\n                                        txtBoxType=\"text\"\r\n                                        txtBoxName=\"address\"\r\n                                        txtBoxValue={address}\r\n                                        txtBoxID=\"address\"\r\n                                        txtBoxPH=\"Address\"\r\n                                        changeEvent={this.onChange}\r\n                                    />\r\n\r\n                                </Col>\r\n                                <Col lg={3}>\r\n                                    {/* <Form.Group as={Col}>\r\n                                        <Form.Label >Department</Form.Label>\r\n                                        <Col>\r\n                                            <Form.Control as=\"select\" className=\"select-style\" name=\"department\" value={department} onChange={this.onChange} required>\r\n                                                <option value=\"\" disabled> Select Department</option>\r\n                                                <option value=\"department 1\">department 1</option>\r\n                                                <option value=\"department 2\">department 2</option>\r\n                                                <option value=\"department 3\">department 3 </option>\r\n                                                <option value=\"department 4\">department 4</option>\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                    </Form.Group> */}\r\n                                    <CustomTextBox\r\n                                        style=\"label-style\"\r\n                                        txtBoxLabel=\"Phone Number\"\r\n                                        txtBoxType=\"text\"\r\n                                        txtBoxName=\"phone\"\r\n                                        txtBoxValue={phone}\r\n                                        txtBoxID=\"phone\"\r\n                                        txtBoxPH=\"Phone Number\"\r\n                                        changeEvent={this.onChange}\r\n                                    />\r\n                                    {/* <Form.Group as={Col}>\r\n                                        <Col>\r\n                                            <Form.Label >Country</Form.Label>\r\n                                            <Form.Control as=\"select\" className=\"select-style\" name=\"country\" value={country} onChange={this.onChange} required>\r\n                                                <option value='0' selected disabled> Country</option>\r\n                                                {country_list.map((country) => {\r\n                                                    return <option key={country.id} id={country.name} value={country.id}>{country.name}</option>\r\n                                                })}\r\n                                            </Form.Control>\r\n                                        </Col>\r\n                                    </Form.Group> */}\r\n                                </Col>\r\n                            </Row>\r\n                            {role !== \"1\" ?\r\n                                <div>\r\n                                    <Row style={{ marginTop: \"20px\" }} >\r\n                                        <Col lg={2} style={{ marginTop: \"80px\" }}>\r\n                                            <div className='ui center aligned container'><div className='ui huge label'>Permissions</div></div>\r\n                                        </Col>\r\n\r\n                                        <Col lg={5} md={12} sm={12}>\r\n\r\n                                            <Card style={{ backgroundColor: 'white' }}>\r\n                                                <table className=\"table table-borderless table-condensed table-hover\" >\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th scope=\"col\">Quotations/Invoice Management</th>\r\n                                                            <th scope=\"col\">View</th>\r\n                                                            <th scope=\"col\">Edit</th>\r\n\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        <tr>\r\n                                                            <td scope=\"row\"> <label className='h6'>Quotation Client Section</label></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"quotation_client_sec_view\" onChange={this.onChangeCheckbox} checked={this.state.quotation_client_sec_view}/></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"quotation_client_sec_edit\" onChange={this.onChangeCheckbox} checked={this.state.quotation_client_sec_edit}/></td>\r\n\r\n                                                        </tr>\r\n                                                        <tr>\r\n                                                            <td scope=\"row\"><label className='h6'>Quotation Contractor Section</label></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"quotation_cont_sec_view\" onChange={this.onChangeCheckbox} checked={this.state.quotation_cont_sec_view}/></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"quotation_cont_sec_edit\" onChange={this.onChangeCheckbox} checked={this.state.quotation_cont_sec_edit}/></td>\r\n\r\n                                                        </tr>\r\n                                                        <tr>\r\n                                                            <td scope=\"row\"><label className='h6'>Invoice Client Section</label></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"invoice_client_sec_view\" onChange={this.onChangeCheckbox} checked={this.state.invoice_client_sec_view}/></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"invoice_client_sec_edit\" onChange={this.onChangeCheckbox} checked={this.state.invoice_client_sec_edit}/></td>\r\n\r\n                                                        </tr>\r\n                                                        <tr>\r\n                                                            <td scope=\"row\"><label className='h6'>Invoice Contractor Section</label></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"invoice_cont_sec_view\" onChange={this.onChangeCheckbox} checked={this.state.invoice_cont_sec_view}/></td>\r\n                                                            <td> <Form.Check type=\"checkbox\" name=\"invoice_cont_sec_edit\" onChange={this.onChangeCheckbox} checked={this.state.invoice_cont_sec_edit}/></td>\r\n\r\n                                                        </tr>\r\n                                                    </tbody>\r\n                                                </table>\r\n                                            </Card><br /></Col>\r\n\r\n                                        <Col lg={4} >\r\n\r\n                                            <Card style={{ backgroundColor: 'white' }} >\r\n                                                <Form.Label >Administration</Form.Label><br />\r\n                                                <div>\r\n                                                    <div className='ui checkbox'><input type=\"checkbox\" onChange={this.onChangeCheckbox} name=\"view_cont\" checked={this.state.view_cont}/><Form.Label >View Contrators</Form.Label></div> <nbsp />\r\n                                                    <div className='ui checkbox '><input type=\"checkbox\" onChange={this.onChangeCheckbox} name=\"view_client\" checked={this.state.view_client}/><Form.Label >View Clients</Form.Label></div>\r\n                                                </div>\r\n\r\n                                            </Card> <br />\r\n\r\n                                            <Card style={{ backgroundColor: 'white' }}>\r\n                                                <Form.Label >Other Privileges</Form.Label><br />\r\n                                                <div>\r\n                                                    <div className='ui checkbox'><input type=\"checkbox\" name=\"view_dashboard\" onChange={this.onChangeCheckbox} checked={this.state.view_dashboard}/>\r\n                                                        <Form.Label >View Dashboard</Form.Label></div></div>\r\n                                            </Card>\r\n\r\n                                        </Col>\r\n                                    </Row><br />\r\n\r\n                                    <Row style={{ marginTop: \"20px\" }}>\r\n                                        <Col lg={2}>\r\n                                            <div className='ui center aligned container'><div className='ui huge label'>Country</div></div>\r\n                                        </Col>\r\n\r\n                                        <Col lg={3}>\r\n                                            <Form.Control as=\"select\" className=\"select-style\" name=\"selected_country\"  onChange={this.handleChangeMultiple} style={{ padding: \"10px\" }} required>\r\n                                                <option value='0' selected > Country</option>\r\n                                                {this.state.copiedcountry_list.map((country) => {\r\n                                                    return <option key={country.id} value={country.id}>{country.name}</option>\r\n                                                })}\r\n                                            </Form.Control>\r\n                                             {/* <Select\r\n                                            multiple\r\n                                            native\r\n                                            value={selectedcountries}\r\n                                            style={{width:\"150px\",backgroundColor:\"white\"}}\r\n                                            onChange={this.handleChangeMultiple}\r\n                                            inputProps={{\r\n                                                id: 'select-multiple-native',\r\n                                            }}\r\n                                            >\r\n                                                {country_list.map((country) => {\r\n                                                    return <option id={country.id} key={country.id} value={country.id}>{country.name}</option>\r\n                                                })}\r\n                                            </Select> */}\r\n                                        </Col>\r\n                                        <Col lg={6}>\r\n                                        <div className='ui six cards mx-sm-2' style={{backgroundColor:'white'}}>\r\n                                            {selectedcountrynames.length >0 && selectedcountrynames.map(countryname => \r\n                                                    // <div style={{display:\"flex\"}}>\r\n                                                    <ListCountries country={countryname} remove={this.removeCountry}/>\r\n                                                    // </div>\r\n                                            )}\r\n                                        </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div> : ''}\r\n\r\n                            <Row className=\"row justify-content-md-center\" style={{ marginTop: \"3%\" }}>\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Back\" ClickEvent={this.props.Back} />\r\n                                {this.props.id === null ?\r\n                                    <CustomButton btnType=\"reset\" BtnTxt=\"Save\" ClickEvent={this.onSubmit} /> :\r\n                                    <CustomButton btnType=\"reset\" BtnTxt=\"Save\" ClickEvent={this.onUpdate} />}\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Cancel\" ClickEvent={this.onCancel} />\r\n                                {this.props.id !== null && <CustomButton btnType=\"reset\" BtnTxt=\"Reset Password\" ClickEvent={this.setPassword} />}\r\n\r\n                            </Row>\r\n\r\n                        </Card>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddUser;\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\Logout.js",["421"],"import React, { useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nexport default function Logout() {\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('https://ccmanagement.group/quote_api/public/login/logout',{\r\n            auth: {\r\n                username: 'ccm_auth',\r\n                password: 'ccm_digi123#'\r\n                }\r\n        }) .then((res) => {\r\n                // console.log(res);\r\n                const data = res.data\r\n                if (data.response.is_login === false) {\r\n                    // console.log('loged out')\r\n                }\r\n            })\r\n        localStorage.removeItem('access_token')\r\n        localStorage.removeItem('isLogin')\r\n        localStorage.removeItem('user_details')\r\n        localStorage.removeItem('country')\r\n        localStorage.removeItem('countryid')\r\n        localStorage.removeItem('role')\r\n        history.push('/')\r\n\r\n    });\r\n    return <div>logout</div>\r\n}\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\Login.js",["422","423"],"import React,{useState} from 'react'\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport topimage from  '../img/logo-light.png';\r\nimport loginimage from  '../img/loginscrn.png';\r\nimport { Row,Col,Form,Image } from 'react-bootstrap'\r\nimport Swal from 'sweetalert2';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function Login() {\r\nconst [Username, setUsername] = useState('');\r\nconst [Password, setPassword] = useState('');\r\nconst history = useHistory()\r\n\r\nconst onSubmit=(e)=>{\r\n    e.preventDefault()\r\n    if(Username !=='' && Password !==''){\r\n        axios.get('https://ccmanagement.group/quote_api/public/login/login', {\r\n            auth: {\r\n            username: 'ccm_auth',\r\n            password: 'ccm_digi123#'\r\n            },\r\n            params:{\r\n                name: Username,\r\n                password: Password\r\n            }\r\n          })\r\n            .then((res)=>{\r\n                console.log(res) \r\n                const data = res.data\r\n                if(data.response.is_login===true && data.session.users!==undefined){\r\n                    const access_token = data.response.access_token\r\n                    localStorage.setItem('isLogin',true)\r\n                    localStorage.setItem('access_token',access_token)\r\n                    localStorage.setItem('user_details', JSON.stringify(data.response.users))\r\n                    localStorage.setItem('country', data.response.users.country)\r\n                    localStorage.setItem('role', data.response.users.role == '1'?'admin':'user')\r\n                    // console.log(data.response.users)\r\n                    window.location.replace('/list')\r\n\r\n                }\r\n                else{   \r\n                    Swal.fire({\r\n                        icon:\"error\",\r\n                        title:\"Oops!\",\r\n                        text:\"Check Username and Password\"\r\n                    })\r\n                }  \r\n            })\r\n            .catch(err =>{\r\n                console.log(err)\r\n            })   \r\n }\r\n else{\r\n    Swal.fire({\r\n        icon:\"error\",\r\n        title:\"Oops!\",\r\n        text:\"Please Fillout All Fields\"\r\n    })\r\n }\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <div style={{backgroundColor:\"rgb(202,229,245)\"}}>\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <div style={{width:\"600px\",height:\"80%\",margin:\"auto\",marginTop:\"15%\"}}>\r\n                        <div style={{width:\"20%\",margin:\"auto\"}}>\r\n                            <Image src={topimage} style={{marginTop:\"10%\"}} />\r\n                        </div>\r\n                        <div style={{marginTop:\"5%\"}}>\r\n                            <Row>\r\n                                <h3 className=\"login-title\" style={{marginLeft:\"20%\"}}>Crystal Clear Management- </h3>\r\n                            </Row>\r\n                            <Row>\r\n                                <h3  className=\"login-title\" style={{marginLeft:\"2%\"}}>Leading Facilities Management Service In Asia</h3>\r\n                            </Row>\r\n                        </div>\r\n                        <div style={{width:\"400px\",height:\"50%\",margin:\"auto\",marginTop:\"10%\"}}>\r\n                                <Form.Control\r\n                                    className=\"login-input\"\r\n                                    name=\"Username\" \r\n                                    type=\"text\" \r\n                                    placeholder=\"Username\" \r\n                                    onChange={(e)=>setUsername(e.target.value)}\r\n                                />\r\n                                <i className=\"fa fa-user-circle\" style={{position:\"relative\",bottom:\"12%\",left:\"3%\",fontSize:\"25px\",color:\"rgb(71,115,160)\"}}></i>\r\n                                 <Form.Control\r\n                                    className=\"login-input\"\r\n                                    style={{marginTop:\"50px\"}}\r\n                                    name=\"Password\" \r\n                                    type=\"password\" \r\n                                    placeholder=\"Password\" \r\n                                    onChange =  {(e)=>setPassword(e.target.value)}  \r\n                                />\r\n                                <i class=\"fa fa-lock\" aria-hidden=\"true\"  style={{fontSize:\"25px\",position:\"relative\",bottom:\"11%\",left:\"3%\",color:\"rgb(71,115,160)\"}}></i>\r\n                                <Row style={{marginTop:\"10%\",marginLeft:13}}>\r\n                                    <Col lg={6}>\r\n                                        <Link to=\"/forgotpassword\" style={{textDecoration:'none'}}><h6 style={{marginTop:\"10px\"}}>Forgot your password?</h6></Link>\r\n                                    </Col>\r\n                                    <Col lg={6}>\r\n                                        <button className=\"login-button\" type=\"button\"  onClick={onSubmit}>Login</button>\r\n                                    </Col>\r\n                                </Row>\r\n                        </div>\r\n\r\n                    </div>\r\n                </Col>\r\n                <Col lg={6} style={{marginTop:\"50px\"}}>\r\n                <div>\r\n                    <img style={{width:\"100%\",height:\"100%\"}} src={loginimage} alt=\"img missing\"/>\r\n                </div>\r\n                </Col>\r\n            </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\UserForgotpwd.js",["424","425","426","427"],"import React, { Component } from 'react'\r\nimport { Card, Form, Row, Col, Button, Image } from 'react-bootstrap'\r\nimport Logo from './img/logo-light.png'\r\nimport axios from 'axios'\r\nimport CustomTextBox from './utils/TextBox'\r\nimport { Alert } from './utils/Utilities'\r\nimport axiosInstance from './utils/axiosinstance'\r\nimport { Link } from 'react-router-dom'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport class UserForgotpwd extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            Password: '',\r\n            ConfirmPassword: '',\r\n            hash:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const url=new URL(window.location.href)\r\n        const hash=url.searchParams.get('hash')\r\n        if (hash===null) {\r\n            window.location.replace('/')\r\n        }\r\n        console.log(hash)\r\n        this.setState({\r\n            hash:hash\r\n        })\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit = () => {\r\n        const { Password, ConfirmPassword, hash } = this.state\r\n\r\n        if (Object.values(this.state).every(x => x)) {\r\n            if (Password !== ConfirmPassword) {\r\n                Alert(\"error\", \"Oops\", \"Password Mismatched!\")\r\n                return\r\n            }\r\n            const data = {password: Password, confirm_password: ConfirmPassword, hash:hash }\r\n            axiosInstance.post(`https://ccmanagement.group/quote_api/public/login/reset_password`,data,{\r\n                auth: {\r\n                username: 'ccm_auth',\r\n                password: 'ccm_digi123#'\r\n                },\r\n            })\r\n                .then((res) => {\r\n\r\n                    if(res.data.message.error === undefined){\r\n                        Alert(\"success\", \"Success\",`${res.data.message.success}` )\r\n                        setTimeout(()=>{\r\n                            window.location.replace('/')\r\n                        },2000)\r\n                        \r\n                    }\r\n                    else{\r\n                        Alert(\"error\",\"Warning\",`${res.data.message.error}`)\r\n                    }\r\n                    // console.log(res.data)\r\n\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { Password, ConfirmPassword} = this.state\r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <Card border=\"dark\" sm={6} >\r\n                        <Row>\r\n                            <Col sm={4}>\r\n                                <Image src={Logo} rounded style={{ width: \"100px\", marginLeft: \"30%\", marginTop: \"20%\" }} />\r\n                            </Col>\r\n                            <Col sm={4} style={{ marginTop: '50px' }}>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"Password\"\r\n                                    txtBoxValue={Password}\r\n                                    txtBoxPH=\"Password\"\r\n                                    changeEvent={this.onChange}\r\n                                /><br/>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Confirm Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"ConfirmPassword\"\r\n                                    txtBoxValue={ConfirmPassword}\r\n                                    txtBoxPH=\"ConfirmPassword\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='d-flex justify-content-center' style={{ marginTop: \"4%\" }}>\r\n                            <Button onClick={this.onSubmit}>Reset</Button>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default UserForgotpwd\r\n\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\Forgotpassword.js",["428","429","430","431"],"import React, { Component } from 'react'\r\nimport { Card, Form, Row, Col, Button, Image } from 'react-bootstrap'\r\nimport Logo from '../img/logo-light.png'\r\nimport axios from 'axios'\r\nimport CustomTextBox from '../utils/TextBox'\r\nimport { Alert } from '../utils/Utilities'\r\nimport axiosInstance from '../utils/axiosinstance'\r\n\r\nexport class Forgotpassword extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            Password: '',\r\n            ConfirmPassword: '',\r\n            // oldPassword:'',\r\n        }\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit = () => {\r\n        const { Password, ConfirmPassword,oldPassword } = this.state\r\n\r\n        if (Object.values(this.state).every(x => x)) {\r\n            if (Password !== ConfirmPassword) {\r\n                Alert(\"error\", \"Oops\", \"Password Mismatched!\")\r\n                return\r\n            }\r\n            const data = { id:this.props.id, password: Password, confirm_password: ConfirmPassword }\r\n            axiosInstance.post(`/user/reset_password`,data)\r\n                .then((res) => {\r\n\r\n                    // console.log(res)\r\n                })\r\n            Alert(\"success\", \"Success\", \"Password Reset Successful\")\r\n            this.props.Back()\r\n        }\r\n        else {\r\n            Alert(\"error\", \"Oops\", \"Please Fillout All Fields!\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { Password, ConfirmPassword,oldPassword } = this.state\r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <Card border=\"dark\" sm={6} >\r\n                        <Row>\r\n                            <Col sm={4}>\r\n                                <Image src={Logo} rounded style={{ width: \"100px\", marginLeft: \"30%\", marginTop: \"20%\" }} />\r\n                            </Col>\r\n                            <Col sm={4} style={{ marginTop: '50px' }}>\r\n                                {/* <CustomTextBox\r\n                                    txtBoxLabel=\"Old Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"oldPassword\"\r\n                                    txtBoxValue={oldPassword}\r\n                                    txtBoxPH=\"Old Password\"\r\n                                    changeEvent={this.onChange}\r\n                                /> */}\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"Password\"\r\n                                    txtBoxValue={Password}\r\n                                    txtBoxPH=\"Password\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Confirm Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"ConfirmPassword\"\r\n                                    txtBoxValue={ConfirmPassword}\r\n                                    txtBoxPH=\"ConfirmPassword\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='d-flex justify-content-center' style={{ marginTop: \"10%\" }}>\r\n                            <Button onClick={this.props.Back}>Back</Button>\r\n                            <Button onClick={this.onSubmit}>Reset</Button>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forgotpassword\r\n\r\n// export default function Forgotpassword(props) {\r\n\r\n//     const [Password, setPassword] = useState('')\r\n//     const [ConfirmPassword, setConfirmPassword] = useState('')\r\n\r\n\r\n//     const onSubmit = () => {\r\n//         const data = { Password, ConfirmPassword,}\r\n//         if (Object.values(data).every(x => x)) {\r\n//             Alert(\"success\", \"Success\", \"Password Reset Successful\")\r\n//             props.status = false\r\n//         }\r\n//         else {\r\n//             Alert(\"error\", \"Oops\", \"Please Fillout All Fields!\")\r\n//         }\r\n//         if (Password !== ConfirmPassword) {\r\n//             Alert(\"error\", \"Oops\", \"Password Mismatched!\")\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <div className=\"component\">\r\n//                 <Card border=\"dark\" sm={6} >\r\n//                     <Row>\r\n//                         <Col sm={4}>\r\n//                             <Image src={Logo} rounded style={{ width: \"100px\", marginLeft: \"30%\", marginTop: \"20%\" }} />\r\n//                         </Col>\r\n//                         <Col sm={4} >\r\n//                         <CustomTextBox\r\n//                             txtBoxLabel=\"Password\"\r\n//                             txtBoxType=\"text\"\r\n//                             txtBoxName=\"Password\"\r\n//                             txtBoxID=\"Password\"\r\n//                             txtBoxPH=\"Password\"\r\n//                             onChange={(e)=>setPassword(e.target.value)}\r\n//                         />\r\n//                         <CustomTextBox\r\n//                             txtBoxLabel=\"Confirm Password\"\r\n//                             txtBoxType=\"text\"\r\n//                             txtBoxName=\"ConfirmPassword\"\r\n//                             txtBoxID=\"ConfirmPassword\"\r\n//                             txtBoxPH=\"ConfirmPassword\"\r\n//                             onChange={(e)=>setConfirmPassword(e.target.value)}\r\n//                         />\r\n//                         </Col>\r\n//                     </Row>\r\n//                     <Row className='d-flex justify-content-center' style={{ marginTop: \"10%\" }}>\r\n//                         <Button onClick={() => onSubmit()}>Reset</Button>\r\n//                     </Row>\r\n//                 </Card>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\client\\AddClient.js",["432","433","434","435","436","437","438","439","440","441","442","443"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image\r\n} from 'react-bootstrap';\r\nimport Logo from '../../img/logo-light.png';\r\nimport axiosinstance from '../../utils/axiosinstance'\r\nimport CustomButton from '../../utils/Button'\r\nimport { pathOr, equals, head, filter, } from 'ramda';\r\nimport swal from 'sweetalert';\r\nimport Swal from 'sweetalert2';\r\nimport { Link } from 'react-router-dom';\r\nimport { Alert } from '../../utils/Utilities'\r\n\r\nvar token = localStorage.getItem('access_token')\r\nconst validEmailRegex = RegExp(/^[a-z0-9]{1,15}\\.?[a-z0-9]{1,15}?@[a-z]{4,20}\\.[a-z]{2,5}(\\.[a-z]{2,})?$/);\r\n\r\n// form error validation\r\nconst validateForm = errors => {\r\n    let valid = true;\r\n    Object.values(errors).forEach(val => val.length > 0 && (valid = false));\r\n    return valid;\r\n}\r\n\r\nexport default class AddClient extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            client_id: this.props.id,\r\n            name: '',\r\n            address: '',\r\n            country: 0,\r\n            phone: '',\r\n            email: '',\r\n            contact_person: '',\r\n            country_list: [],\r\n            errors: {\r\n                email: '',\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { client_id } = this.state;\r\n        // console.log(this.props.id)\r\n        axiosinstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                this.setState({ country_list })\r\n            })\r\n\r\n        if (client_id !== null) {\r\n            axiosinstance.post(`/client/get_client_details`, { id: client_id })\r\n                .then(res => {\r\n                    // console.log(res, \"client details\")\r\n                    const client_details = res.data.response.client_details\r\n                    this.setState({\r\n                        name: client_details.name,\r\n                        address: client_details.address,\r\n                        country: client_details.country,\r\n                        phone: client_details.phone,\r\n                        email: client_details.email,\r\n                        contact_person: client_details.contact_person,\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        const { name, value } = e.target;\r\n        let errors = this.state.errors;\r\n\r\n        switch (name) {\r\n            case 'email':\r\n                errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState({ errors, [name]: value })\r\n    }\r\n    onSubmit = (e) => {\r\n\r\n        const { name, address, phone, email, contact_person, country, errors } = this.state\r\n        const data = {\r\n            name,\r\n            address,\r\n            phone,\r\n            email,\r\n            country,\r\n            contact_person,\r\n        }\r\n        // console.log(data)\r\n        // if (validateForm(errors)) {\r\n            // if (name === null || address === '' || phone === '' || email === '' || country === '' || contact_person === '') {\r\n            //     Swal.fire({\r\n            //         icon: 'error',\r\n            //         title: 'Oops...',\r\n            //         text: 'Please Fillout all the Fields!',\r\n            //     })\r\n            // } else {\r\n                axiosinstance.post(`/client/add`, data)\r\n                    .then((res) => {\r\n                        // console.log(res);\r\n                        if (res.data.message.success !== undefined) {\r\n                            swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.onCancel())\r\n                        } else {\r\n                            swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                        }\r\n                    })\r\n                    .catch((e) => {\r\n                        // console.log(e)\r\n                    })\r\n            // }\r\n        // } else {\r\n        //     Alert('error', 'error', 'Invalid Form')\r\n        // }\r\n    }\r\n    onUpdate = (e) => {\r\n        const { name, address, phone, email, contact_person, country, client_id } = this.state\r\n        const data = {\r\n            name,\r\n            address,\r\n            phone,\r\n            email,\r\n            country,\r\n            contact_person,\r\n        }\r\n        // if (name === null || address === '' || phone === '' || email === '' || country === '' || contact_person === '') {\r\n        //     Swal.fire({\r\n        //         icon: 'error',\r\n        //         title: 'Oops...',\r\n        //         text: 'Please Fillout all the Fields!',\r\n        //     })\r\n        // } else {\r\n            axiosinstance.post(`/client/edit/` + client_id, data)\r\n                .then((res) => {\r\n                    // console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.props.Back())\r\n                    } else {\r\n                        swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    // console.log(e)\r\n                })\r\n        // }\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.setState({\r\n            client_id: this.props.id,\r\n            name: '',\r\n            address: '',\r\n            country: 0,\r\n            phone: '',\r\n            email: '',\r\n            contact_person: '',\r\n            country_list: [],\r\n        })\r\n        this.componentDidMount();\r\n    }\r\n    render() {\r\n        const { client_id, name, address, phone, email, contact_person, country, country_list, errors } = this.state\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"component\">\r\n                    <h5>ADD/EDIT CLIENT PROFILE</h5>\r\n                    <Card style={{ marginTop: \"3%\" }}>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col lg={3}>\r\n                                    <Image src={Logo} style={{ marginLeft: \"30%\", marginTop: \"80px\" }}></Image>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <Form.Group >\r\n                                        <Form.Label >Client Name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            id=\"name\"\r\n                                            placeholder=\"Full Name\"\r\n                                            name=\"name\"\r\n                                            value={name}\r\n                                            onChange={this.onChange}\r\n                                            style={{ padding: \"10px\" }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group >\r\n                                        <Form.Label >Email</Form.Label>\r\n                                        <Form.Control type=\"text\" id=\"email\"\r\n                                            placeholder=\"Email\"\r\n                                            name=\"email\"\r\n                                            value={email}\r\n                                            onChange={this.onChange}\r\n                                            style={{ padding: \"10px\" }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {errors.email.length > 0 && (\r\n                                        <span className=\"error\">{errors.email}</span>\r\n                                    )}\r\n                                    <Form.Group >\r\n                                        <Form.Label >CWR Country</Form.Label>\r\n                                        <Form.Control as=\"select\" name=\"country\" value={country} onChange={this.onChange} required>\r\n                                            <option value='0' selected disabled> Country</option>\r\n                                            {country_list.map((country) => {\r\n                                                return <option key={country.id} value={country.id}>{country.name}</option>\r\n                                            })}\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <Form.Group >\r\n                                        <Form.Label >Address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            id=\"address\"\r\n                                            placeholder=\"Address\"\r\n                                            name=\"address\"\r\n                                            value={address}\r\n                                            onChange={this.onChange}\r\n                                            style={{ padding: \"10px\" }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group >\r\n                                        <Form.Label >Phone Number</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Phone Number\"\r\n                                            name=\"phone\"\r\n                                            value={phone}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group >\r\n                                        <Form.Label >Contact Person</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Full Name\"\r\n                                            name=\"contact_person\"\r\n                                            value={contact_person}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"row justify-content-md-center\" style={{ marginTop: \"10%\" }}>\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Back\" ClickEvent={this.props.Back} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Add\" disabledButton={client_id !== null} ClickEvent={this.onSubmit} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Update\" disabledButton={client_id === null} ClickEvent={this.onUpdate} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Cancel\" ClickEvent={this.onCancel} />\r\n                            </Row>\r\n                        </Form>\r\n                    </Card>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\contractor\\Addcontractor.js",["444","445","446","447","448","449","450","451","452","453","454","455"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image\r\n} from 'react-bootstrap';\r\nimport Logo from '../../img/logo-light.png'\r\nimport axiosinstance from '../../utils/axiosinstance'\r\nimport CustomButton from '../../utils/Button'\r\nimport { pathOr, equals, head, filter, } from 'ramda';\r\nimport Swal from 'sweetalert2';\r\nimport swal from 'sweetalert';\r\nimport { Link } from 'react-router-dom';\r\nimport { Alert } from '../../utils/Utilities'\r\n\r\nvar token = localStorage.getItem('access_token')\r\nconst validEmailRegex = RegExp(/^[a-z0-9]{1,15}\\.?[a-z0-9]{1,15}?@[a-z]{4,20}\\.[a-z]{2,5}(\\.[a-z]{2,})?$/);\r\n\r\n// form error validation\r\nconst validateForm = errors => {\r\n    let valid = true;\r\n    Object.values(errors).forEach(val => val.length > 0 && (valid = false));\r\n    return valid;\r\n}\r\n\r\nexport default class Addcontractor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contractor_id: this.props.id,\r\n            name: '',\r\n            address: '',\r\n            country: 0,\r\n            phone: '',\r\n            email: '',\r\n            contact_person: '',\r\n            country_list: [],\r\n            errors: {\r\n                email: '',\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosinstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                this.setState({ country_list })\r\n            })\r\n\r\n        if (this.state.contractor_id !== null) {\r\n            axiosinstance.post(`/contractor/get_contractor_details`, { id: this.state.contractor_id })\r\n                .then(res => {\r\n                    const contractor_details = res.data.response.contractor_details\r\n                    this.setState({\r\n                        name: contractor_details.name,\r\n                        address: contractor_details.address,\r\n                        country: contractor_details.country,\r\n                        phone: contractor_details.phone,\r\n                        email: contractor_details.email,\r\n                        contact_person: contractor_details.contact_person,\r\n                    })\r\n                })\r\n        }\r\n    }\r\n    onChange = (e) => {\r\n        const { name, value } = e.target;\r\n        let errors = this.state.errors;\r\n\r\n        switch (name) {\r\n            case 'email':\r\n                errors.email = validEmailRegex.test(value) ? '' : 'Email is not valid!';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.setState({ errors, [name]: value })\r\n    }\r\n    onSubmit = (e) => {\r\n        const { name, address, phone, email, contact_person, country, errors } = this.state;\r\n        const data = { name, email, country, address, contact_person, phone, }\r\n\r\n        // if (validateForm(errors)) {\r\n            axiosinstance.post(`/contractor/add`, data)\r\n                .then((res) => {\r\n                    // console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.onCancel())\r\n                    } else {\r\n                        swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                    }\r\n\r\n                })\r\n        // } else {\r\n        //     Alert('error', 'error', 'Invalid Form')\r\n        // }\r\n    }\r\n    onUpdate = (e) => {\r\n        const { name, address, phone, email, contact_person, country, contractor_id } = this.state;\r\n        const data = { name, email, country, address, contact_person, phone, }\r\n\r\n        axiosinstance.post(`/contractor/edit/` + contractor_id, data)\r\n            .then((res) => {\r\n                // console.log(res);\r\n                if (res.data.message.success !== undefined) {\r\n                    swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.onCancel())\r\n                } else {\r\n                    swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                }\r\n                this.props.Back()\r\n            })\r\n            .catch((e) => {\r\n                // console.log(e)\r\n            })\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.setState({\r\n            contractor_id: this.props.id,\r\n            name: '',\r\n            address: '',\r\n            country: 0,\r\n            phone: '',\r\n            email: '',\r\n            contact_person: '',\r\n            contractor_list: [],\r\n            country_list: [],\r\n        })\r\n        this.componentDidMount();\r\n    }\r\n    render() {\r\n        const { name, address, phone, email, contact_person, country, country_list, errors } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <h5>ADD/EDIT VENDOR PROFILE</h5>\r\n                    <Card style={{ marginTop: \"3%\" }}>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col style={{ marginTop: \"80px\" }} lg={4}>\r\n                                    <Image src={Logo} className='profile-img'></Image>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <Form.Group>\r\n                                        <Col>\r\n                                            <Form.Label >Contractor Name</Form.Label>\r\n                                            <Form.Control\r\n                                                type=\"text\"\r\n                                                placeholder=\"Full Name\"\r\n                                                name=\"name\"\r\n                                                value={name}\r\n                                                onChange={this.onChange}\r\n                                            />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label >Address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Address\"\r\n                                            name=\"address\"\r\n                                            value={address}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label >CWR Country</Form.Label>\r\n                                        <Form.Control as=\"select\" className=\"select-style\" name=\"country\" value={country} onChange={this.onChange} required>\r\n                                            <option value='0' selected disabled> Country</option>\r\n                                            {country_list.map((country) => {\r\n                                                return <option key={country.id} value={country.id}>{country.name}</option>\r\n                                            })}\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <Form.Group>\r\n                                        <Form.Label >Email</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Email\"\r\n                                            name=\"email\"\r\n                                            value={email}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {errors.email.length > 0 && (\r\n                                        <span className=\"error\">{errors.email}</span>\r\n                                    )}\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label >Phone Number</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Phone Number\"\r\n                                            name=\"phone\"\r\n                                            value={phone}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group>\r\n                                        <Form.Label >Contact Person</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Full Name\"\r\n                                            name=\"contact_person\"\r\n                                            value={contact_person}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"row justify-content-md-center\" style={{ marginTop: \"3%\" }}>\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Back\" ClickEvent={this.props.Back} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Add\" disabledButton={this.props.id !== null} ClickEvent={this.onSubmit} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Update\" disabledButton={this.props.id === null} ClickEvent={this.onUpdate} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Cancel\" ClickEvent={this.onCancel} />\r\n                            </Row>\r\n                        </Form>\r\n                    </Card>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\user\\UserList.js",["456","457","458","459","460","461","462","463","464"],"import React, { Component } from 'react'\r\nimport { Col, Row, Card, Container, Form } from 'react-bootstrap'\r\nimport axiosInstance from '../../utils/axiosinstance'\r\nimport CustomTextBox from '../../utils/TextBox'\r\nimport { Link } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\nimport swal from 'sweetalert';\r\nimport UserProfile from './AddUser'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nvar token = localStorage.getItem('access_token')\r\n\r\nclass User extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            emailSearch: '',\r\n            countrySearch: '',\r\n            status: '',\r\n            user_id: null,\r\n            addUser: false,\r\n            users: [],\r\n            country_list: [],\r\n            user_list: [],\r\n            error: '',\r\n            full_user_list:[],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                this.setState({ country_list })\r\n                // console.log(country_list)\r\n            })\r\n        axiosInstance.post(`/user/list`)\r\n            .then(res => {\r\n                const user_list = res.data.response.user_list\r\n                // const user_list = list.filter(li => li.country == localStorage.getItem('countryid'))\r\n                this.setState({ user_list,full_user_list:user_list })\r\n                // console.log(user_list);\r\n                if (user_list === undefined) {\r\n                    const error = res.data.message.error\r\n                    this.setState({ error })\r\n                }\r\n                // console.log(res)\r\n            })\r\n    }\r\n    trashContractor = (id) => {\r\n        // console.log(id)\r\n        axiosInstance.post(`/user/delete`, { id })\r\n            .then((res) => {\r\n                // console.log(res);\r\n                if (res.data.message.success !== undefined) {\r\n                    swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.componentDidMount())\r\n                } else {\r\n                    swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                }\r\n            })\r\n    }\r\n    renderComponent = (id) => {\r\n        this.setState({\r\n            addUser: true,\r\n            user_id: id,\r\n        })\r\n    }\r\n    Back = (e) => {\r\n        this.setState({\r\n            addUser: false,\r\n            user_id: null,\r\n        })\r\n        this.componentDidMount()\r\n    }\r\n\r\n    userTable = (user, i) => {\r\n        return (\r\n            <tr key={user.id} className={i % 2 === 0 ? \"rowtable\" : \"\"} >\r\n                <td>{user.name}</td>\r\n                <td>{user.department}</td>\r\n                <td>{user.email}</td>\r\n                <td>{user.phone}</td>\r\n                {this.state.country_list.map(country => {\r\n                    return (user.country === country.id) && <td>{country.name}</td>\r\n                })}\r\n                <td><button onClick={(e) => this.trashContractor(user.id)} style={{ border: \"none\" }} ><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                <td> <button onClick={(e) => this.renderComponent(user.id)} style={{ width: \"100px\", height: \"25px\", backgroundColor: \"#4A88DC\", border: \"none\", color: \"white\", borderRadius: \"10px\" }}>EDIT</button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    emailSearch = (value) =>{\r\n        const { full_user_list } = this.state\r\n        value !== null ? this.setState({ emailSearch: value.email }) : this.setState({ emailSearch: '' })\r\n\r\n        const EmailList = value !== null ? full_user_list.filter(user => user.email === value.email):full_user_list\r\n        this.setState({user_list:EmailList})\r\n    }\r\n\r\n    // countrySearch = (value) =>{\r\n    //     const { full_user_list } = this.state\r\n    //     value !== null ? this.setState({ countrySearch: value.id }) : this.setState({ countrySearch: '' })\r\n\r\n    //     const CountryListFilter = value !== null ? full_user_list.find(user => user.country.split(',') === value.id):full_user_list\r\n    // }\r\n\r\n    render() {\r\n        const { emailSearch, countrySearch, status, addUser, user_list, country_list, error } = this.state\r\n\r\n        return (\r\n            <div>\r\n                {error !== '' ? <div className=\"component\">{error} </div> :\r\n                    <div>\r\n                        {addUser ? <UserProfile id={this.state.user_id} Back={this.Back} /> :\r\n                            <div className=\"component\">\r\n                                <h3 style={{ marginTop: \"30px\" }}>User List</h3>\r\n                                <Card style={{ marginTop: \"20px\", backgroundColor: \"white\" }}>\r\n                                    <Row>\r\n                                        <Col lg={4}>\r\n                                            <Autocomplete\r\n                                                options={user_list}\r\n                                                onChange={(e, value) => this.emailSearch(value)}\r\n                                                getOptionLabel={(option) => option.email}\r\n                                                renderInput={(params) => (\r\n                                                    <div ref={params.InputProps.ref}>\r\n                                                        <Form.Control placeholder='Enter Email' type=\"text\" {...params.inputProps} />\r\n                                                    </div>\r\n                                                )}\r\n                                            />\r\n                                            <button className='iconButtton'  ><i className=\"fa fa-search\"  ></i></button><br />\r\n                                        </Col>\r\n                                        <Col lg={3}>\r\n                                            {/* <Autocomplete\r\n                                                options={country_list}\r\n                                                onChange={(e, value) => this.countrySearch(value)}\r\n                                                getOptionLabel={(option) => option.name}\r\n                                                renderInput={(params) => (\r\n                                                    <div ref={params.InputProps.ref}>\r\n                                                        <Form.Control placeholder='Enter Country' type=\"text\" {...params.inputProps} />\r\n                                                    </div>\r\n                                                )}\r\n                                            />\r\n                                            <button className='iconButtton'><i className=\"fa fa-search\" onClick={this.onSearchCountry} ></i></button><br /> */}\r\n                                        </Col>\r\n                                        <Col lg={2}>\r\n                                            {/* <Form.Control as='select' value={status} name=\"status\" onChange={(e)=>this.setState({status:e.target.value})} >\r\n                                                <option value='' disabled selected>Status</option>\r\n                                                <option value='active'>Active</option>\r\n                                                <option value='inactive'>In Active</option>\r\n                                            </Form.Control><br /> */}\r\n                                        </Col>\r\n                                        <Col lg={{ offset: '2' }}>\r\n                                            <button className='addIcon' onClick={() => this.setState({ addUser: !addUser })} >\r\n                                                <i className=\"fa fa-plus\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                            </button>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row style={{ marginTop: \"10px\", overflow: \"auto\" }}>\r\n                                        <table class=\"table \">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th scope=\"col\">NAME</th>\r\n                                                    <th scope=\"col\">ROLE</th>\r\n                                                    <th scope=\"col\">EMAIL ID</th>\r\n                                                    <th scope=\"col\">PHONE NO</th>\r\n                                                    {/* <th scope=\"col\">COUNTRY</th> */}\r\n                                                    <th scope=\"col\">DELETE</th>\r\n                                                    <th scope=\"col\">Edit</th>\r\n                                                    <th scope=\"col\"></th>\r\n\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                {user_list !== undefined && user_list.map((user, i) =>\r\n                                                    <tr key={user.id} className={i % 2 === 0 && \"rowtable\"} >\r\n                                                        <td>{user.name}</td>\r\n                                                        <td>{user.role==='1'? 'Admin' : 'User'}</td>\r\n                                                        <td>{user.email}</td>\r\n                                                        <td>{user.phone}</td>\r\n                                                        {/* {this.state.country_list.map(country => {\r\n                                                            return (user.country === country.id) && <td>{country.name}</td>\r\n                                                        })} */}\r\n                                                        <td><button onClick={(e) => this.trashContractor(user.id)} style={{ border: \"none\" }} ><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                                                        <td> <button onClick={(e) => this.renderComponent(user.id)} style={{ width: \"100px\", height: \"25px\", backgroundColor: \"#4A88DC\", border: \"none\", color: \"white\", borderRadius: \"10px\" }}>EDIT</button></td>\r\n                                                    </tr>\r\n                                                )}\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </Row>\r\n                                </Card>\r\n\r\n                            </div>}\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default User\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\client\\ClientList.js",["465","466","467","468","469","470","471","472","473"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport axiosInstance from '../../utils/axiosinstance'\r\nimport { Link } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\nimport swal from 'sweetalert';\r\nimport AddClient from './AddClient'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nvar token = localStorage.getItem('access_token')\r\n\r\n\r\nexport default class ClientList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emailSearch: '',\r\n            countrySearch: '',\r\n            addClient: false,\r\n            client_id: null,\r\n            client_list: [],\r\n            country_list: [],\r\n            search: '',\r\n            user:{},\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosInstance.post(`/country/list`).then((res) => {\r\n            const country_list = res.data.response.country_list\r\n            this.setState({ country_list })\r\n            // console.log(country_list)\r\n        })\r\n        this.setState({user:JSON.parse(localStorage.getItem('user_details'))})\r\n        axiosInstance.post(`/client/list`,{country:localStorage.getItem('countryid')})\r\n            .then(res => {\r\n                if(localStorage.getItem('countryid') === null){\r\n                    this.setState({client_list:[]})\r\n                }\r\n                else{\r\n                    const client_list = res.data.response.client_list\r\n                    this.setState({ client_list })\r\n                    // console.log(client_list, 'client_list');\r\n                }\r\n            })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n    trashClient = (id) => {\r\n        axiosInstance.post(`/client/delete`, { id })\r\n            .then((res) => {\r\n                // console.log(res);\r\n                if (res.data.message.success !== undefined) {\r\n                    swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.componentDidMount())\r\n                } else {\r\n                    swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                }\r\n            })\r\n    }\r\n    renderComponent = (id) => {\r\n        this.setState({\r\n            addClient: true,\r\n            client_id: id,\r\n        })\r\n    }\r\n    Back = () => {\r\n        this.setState({\r\n            addClient: false,\r\n            client_id: null,\r\n        })\r\n        this.componentDidMount()\r\n    }\r\n\r\n    render() {\r\n        const { client_list, addClient, emailSearch, countrySearch, country_list } = this.state\r\n\r\n        return (\r\n            <div>\r\n                {addClient ? <AddClient id={this.state.client_id} Back={this.Back} /> :\r\n\r\n                    <div className=\"component\">\r\n                        {this.state.user.view_client == '0'?<>You Don't Have Permission to Access</>:\r\n                        <>\r\n                        <h3 style={{ marginTop: \"30px\" }}>Client List</h3>\r\n                        <Card style={{ marginTop: \"20px\", backgroundColor: \"white\" }}>\r\n                            <Row>\r\n                                <Col lg={4}>\r\n                                    <Autocomplete\r\n                                        options={client_list}\r\n                                        onChange={(e, value) =>value !== null ? this.setState({ emailSearch: value.email }):  this.setState({ emailSearch: '' }) }\r\n                                        getOptionLabel={(option) => option.email}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Enter Email' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                    <button className='iconButtton'  ><i className=\"fa fa-search\"  ></i></button><br />\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <Autocomplete\r\n                                        options={country_list}\r\n                                        onChange={(e, value) => value !== null ? this.setState({ countrySearch: value.id }) : this.setState({ countrySearch: '' })}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Enter Country' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                    <button className='iconButtton'><i className=\"fa fa-search\" onClick={this.onSearchCountry} ></i></button><br />\r\n                                </Col>\r\n                                <Col lg={{ offset: '3', span: '1' }}>\r\n                                \r\n                                    <button className='addIcon' onClick={() => this.setState({ addClient: !addClient })} >\r\n                                        <i className=\"fa fa-plus\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row style={{ marginTop: \"10px\", overflow: \"auto\" }}>\r\n                                <table className=\"table \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Client Name</th>\r\n                                            <th scope=\"col\">Address</th>\r\n                                            <th scope=\"col\">Email ID</th>\r\n                                            <th scope=\"col\">Phone No</th>\r\n                                            <th scope=\"col\">Country </th>\r\n                                            <th scope=\"col\">Contact Person</th>\r\n                                            <th scope=\"col\">Delete</th>\r\n                                            <th scope=\"col\">Edit</th>\r\n                                            <th scope=\"col\"></th>\r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {client_list.map((client, i) =>\r\n                                            (emailSearch === '' || client.email === emailSearch) && (countrySearch === '' || client.country === countrySearch) &&\r\n                                            <tr key={client.id} className={i % 2 === 0 ? \"rowtable\" : \"\"} >\r\n                                                <td>{client.name}</td>\r\n                                                <td>{client.address}</td>\r\n                                                <td>{client.email}</td>\r\n                                                <td>{client.phone}</td>\r\n                                                {this.state.country_list.map(country => {\r\n                                                    return (client.country === country.id) && <td>{country.name}</td>\r\n                                                })}\r\n                                                <td>{client.contact_person}</td>\r\n                                                <td><button onClick={(e) => this.trashClient(client.id)} style={{ border: \"none\" }} ><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                                                <td> <button onClick={(e) => this.renderComponent(client.id)} style={{ width: \"100px\", height: \"25px\", backgroundColor: \"#4A88DC\", border: \"none\", color: \"white\", borderRadius: \"10px\" }}>EDIT</button></td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </Row>\r\n                        </Card>\r\n                        </>}\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\AddInvoice.js",["474","475","476","477","478","479","480","481","482","483","484","485"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Input,\r\n} from 'react-bootstrap';\r\nimport CustomTextBox from '../../utils/TextBox'\r\nimport CustomButton from '../../utils/Button'\r\nimport Logo from '../../img/logo-light.png'\r\nimport axiosInstance from '../../utils/axiosinstance'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CurrencyFormat from 'react-currency-format'\r\nimport { Alert } from '../../utils/Utilities'\r\n\r\nvar token = localStorage.getItem('access_token')\r\n\r\nexport class AddInvoice extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            invoice_id: '',\r\n\r\n            cust_type: '1',\r\n            cust_id:'',\r\n            cust_name:'',\r\n            price: '',\r\n            description: '',\r\n            date: '',\r\n            client_list: [],\r\n            contractor_list: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        axiosInstance.post(`/client/list`)\r\n            .then(res => {\r\n                const client_list = res.data.response.client_list\r\n                this.setState({ client_list })\r\n                // console.log(client_list);\r\n            })\r\n            axiosInstance.post(`/contractor/list`)\r\n            .then(res => {\r\n                const contractor_list = res.data.response.contractor_list\r\n                this.setState({ contractor_list })\r\n                // console.log(contractor_list);\r\n            })\r\n            axiosInstance.post(`/invoice/list`)\r\n            .then(res => {\r\n                const invoice_list = res.data.response.invoice_list\r\n                this.setState({ invoice_list })\r\n                // console.log(invoice_list);\r\n            })\r\n    }\r\n\r\n    onChange = (e) => {  \r\n        if(e.target.name ==='cust_type'){\r\n            this.setState({ cust_id:'', cust_name: '', })\r\n        }\r\n        console.log(e.target.value)\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n    onChangeAmount = (values, name) => {\r\n        const { formattedValue, value } = values;\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    customerSearch = (e, value) => {\r\n        // console.log(value)\r\n        value !== null && this.setState({ cust_id: value.id, cust_name: value.name, })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        const { invoice_id,cust_type,cust_id, price, description, date } = this.state;\r\n        const data = { cust_type, cust_id, price:parseFloat(price).toFixed(2), description, date, }\r\n        // console.log(data)\r\n        axiosInstance.post(`/invoice/add`, data)\r\n            .then((res) => {\r\n                // console.log(res);\r\n                if (res.data.message.success !== undefined) {\r\n                    Alert(\"success\",\"success!\", `${res.data.message.success}`, ).then(() => this.onCancel())\r\n                } else {\r\n                    Alert( \"error\", \"error!\", `${res.data.message.error}`,)\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                // console.log(e)\r\n            })\r\n    }\r\n\r\n    onCancel = () => {\r\n        this.setState({\r\n            invoice_id: '',\r\n            cust_type: 'client',\r\n            client_id: '',\r\n            contractor_id: '',\r\n            price: '',\r\n            description: '',\r\n            date: '',\r\n            client_list: [],\r\n            contractor_list: [],\r\n        })\r\n        this.componentDidMount()\r\n    }\r\n    render() {\r\n        const { cust_type,cust_name,cust_id, client_list, contractor_list, client_name, contractor_name, price, description, date } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <p style={{ fontSize: \"20px\" }}>Add Invoice</p>\r\n\r\n                    <Card sm={6} >\r\n                        <Form >\r\n                            <Row>\r\n                                <Col lg={{ span: '5', offset: '1' }}>\r\n                                    <Form.Group  >\r\n                                        <Form.Label > Customer Type </Form.Label>\r\n                                        <Form.Control as=\"select\" className=\"select-style\" name=\"cust_type\" defaultValue={cust_type} onChange={this.onChange} required>\r\n                                            <option value='' disabled> Select</option>\r\n                                            <option value='1' > Client</option>\r\n                                            <option value='2' > Contractor</option>\r\n\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col lg={{ span: '5', }}>\r\n                                    <Form.Group  >\r\n                                        {cust_type === '1'\r\n                                            ? <>\r\n                                                <Form.Label > Client</Form.Label>\r\n                                                <Autocomplete\r\n                                                    options={client_list} \r\n                                                    onChange={(e, value) => this.customerSearch(e, value)}\r\n                                                    getOptionLabel={(option) => option.name}\r\n                                                    renderInput={(params) => (\r\n                                                        <div ref={params.InputProps.ref}>\r\n                                                            <Form.Control placeholder='Client Name' type=\"text\" {...params.inputProps} />\r\n                                                        </div>\r\n                                                    )}\r\n                                                />\r\n\r\n                                            </>\r\n                                            : <>\r\n                                                <Form.Label> Contractor</Form.Label>\r\n                                                <Autocomplete\r\n                                                    options={contractor_list}\r\n                                                    onChange={(e, value) => this.customerSearch(e, value)}\r\n                                                    getOptionLabel={(option) => option.name}\r\n                                                    renderInput={(params) => (\r\n                                                        <div ref={params.InputProps.ref}>\r\n                                                            <Form.Control placeholder='Contractor Name' type=\"text\" {...params.inputProps} />\r\n                                                        </div>\r\n                                                    )}\r\n                                                /> </>}\r\n                                    </Form.Group>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Row>\r\n                                <Col lg={{ span: '5', offset: '1' }}>\r\n                                <Form.Group>\r\n                                    <Form.Label >Price Amount</Form.Label>\r\n                                    <CurrencyFormat\r\n                                        className='form-control'\r\n                                        value={price}\r\n                                        placeholder=\"Amount\"\r\n                                        onValueChange={(values) => this.onChangeAmount(values, 'price')}\r\n                                        thousandSeparator={true} />\r\n                                </Form.Group>\r\n                                </Col>\r\n                                <Col lg={{ span: '5', }}>\r\n                                    <CustomTextBox\r\n                                        txtBoxLabel=\"Description\"\r\n                                        txtBoxType=\"text\"\r\n                                        txtBoxName=\"description\"\r\n                                        txtBoxValue={description}\r\n                                        txtBoxID=\"description\"\r\n                                        txtBoxPH=\"Description\"\r\n                                        changeEvent={this.onChange}\r\n                                    />\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Row>\r\n                                <Col lg={{ span: '5', offset: '1' }}>\r\n                                    <CustomTextBox\r\n                                        txtBoxLabel=\"Date\"\r\n                                        txtBoxType=\"date\"\r\n                                        txtBoxName=\"date\"\r\n                                        txtBoxValue={date}\r\n                                        txtBoxID=\"price\"\r\n                                        changeEvent={this.onChange}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className='d-flex justify-content-center' style={{ marginTop: '80px' }}>\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Add\" ClickEvent={this.onSubmit} />\r\n                                {/* <CustomButton btnType=\"reset\" BtnTxt=\"Update\" ClickEvent={this.onUpdate} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Delete\" ClickEvent={this.onDelete} />\r\n                                <CustomButton btnType=\"reset\" BtnTxt=\"Cancel\" ClickEvent={this.onCancel} /> */}\r\n                            </Row>\r\n\r\n                        </Form>\r\n                    </Card>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddInvoice\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\contractor\\Contractorlist.js",["486","487","488","489","490","491","492","493"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image\r\n} from 'react-bootstrap';\r\nimport axiosInstance from '../../utils/axiosinstance'\r\nimport { Link } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\nimport swal from 'sweetalert';\r\nimport AddContractor from './Addcontractor'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\n\r\nvar token = localStorage.getItem('access_token')\r\n\r\n\r\n\r\nexport default class contractor_list extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contractor_id:null,\r\n            emailSearch: '', \r\n            countrySearch: '',\r\n\r\n            contractor_list: [],\r\n            country_list: [],\r\n            user:{}\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                this.setState({ country_list })\r\n                // console.log(country_list);\r\n            })\r\n            const user = localStorage.getItem('user_details') \r\n            // console.log(JSON.parse(user),'user')\r\n            this.setState({user:JSON.parse(localStorage.getItem('user_details'))})\r\n        // axiosInstance.post(`/contractor/list`,{country:localStorage.getItem('countryid')})\r\n        axiosInstance.post(`/contractor/list`,)\r\n            .then(res => {\r\n                if(localStorage.getItem('countryid') === null){\r\n                    this.setState({contractor_list:[]})\r\n                }else{\r\n                const contractor_list = res.data.response.contractor_list\r\n                this.setState({ contractor_list })\r\n                // console.log(contractor_list);\r\n                }\r\n            })\r\n    }\r\n\r\n    handleSearch = e => {\r\n        this.setState({ search: e.target.value })\r\n    }\r\n    trashContractor = (id) => {\r\n        console.log(id)\r\n        axiosInstance.post(`/contractor/delete`, { id })\r\n            .then((res) => {\r\n                // console.log(res);\r\n                if (res.data.message.success !== undefined) {\r\n                    swal(\"success!\", `${res.data.message.success}`, \"success\").then(() => this.componentDidMount())\r\n                } else {\r\n                    swal(\"error!\", `${res.data.message.error}`, \"error\")\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                // console.log(e)\r\n            })\r\n    }\r\n    renderComponent = (id) => {\r\n        this.setState({\r\n            addContractor: true,\r\n            contractor_id: id,\r\n        })\r\n    }\r\n    Back = (e) => {\r\n        this.setState({\r\n            addContractor: false,\r\n            contractor_id: null,\r\n        })\r\n        this.componentDidMount()\r\n    }\r\n    renderTable = (contractor, i) => {\r\n        return (\r\n            <tr key={contractor.id} className={i % 2 === 0 ? \"rowtable\" : \"\"} style={{ height: \"30px\" }}>\r\n                <td>{contractor.name}</td>\r\n                <td>{contractor.address}</td>\r\n                <td>{contractor.email}</td>\r\n                <td>{contractor.phone}</td>\r\n                {this.state.country_list.map(country => {\r\n                    return (contractor.country === country.id) && <td>{country.name}</td>\r\n                })}\r\n                <td>{contractor.contact_person}</td>\r\n                <td><button onClick={(e) => this.trashContractor(contractor.id)} style={{ border: \"none\" }} ><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                <td> <button onClick={(e) => this.renderComponent(contractor.id)} style={{ width: \"100px\", height: \"25px\", backgroundColor: \"#4A88DC\", border: \"none\", color: \"white\", borderRadius: \"10px\" }}>EDIT</button></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    search = () => {\r\n        // alert(\"Hello Wrold\")\r\n    }\r\n    render() {\r\n        const { emailSearch, countrySearch, addContractor, country_list, contractor_list, } = this.state\r\n        return (\r\n            <div>\r\n                {addContractor ? <AddContractor id={this.state.contractor_id} Back={this.Back} /> :\r\n                    <div className=\"component\">\r\n                        {this.state.user.view_cont == '0'?<>You Dont Have Permission to Access</>\r\n                        :<>\r\n                        <h3 style={{ marginTop: \"30px\" }}>Contractor List</h3>\r\n                        <Card style={{ marginTop: \"20px\", backgroundColor: \"white\" }}>\r\n                            <Row  >\r\n                            <Col lg={4}>\r\n                                    <Autocomplete\r\n                                        options={contractor_list}\r\n                                        onChange={(e, value) =>value !== null ? this.setState({ emailSearch: value.email }):  this.setState({ emailSearch: '' }) }\r\n                                        getOptionLabel={(option) => option.email}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Enter Email' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                    <button className='iconButtton'  ><i className=\"fa fa-search\"  ></i></button><br />\r\n                                </Col>\r\n                                <Col lg={4}>\r\n                                    <Autocomplete\r\n                                        options={country_list}\r\n                                        onChange={(e, value) => value !== null ? this.setState({ countrySearch: value.id }) : this.setState({ countrySearch: '' })}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Enter Country' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                    <button className='iconButtton'><i className=\"fa fa-search\" onClick={this.onSearchCountry} ></i></button><br />\r\n                                </Col>\r\n                                <Col lg={{offset:'3'}}>\r\n                                    <button className='addIcon' onClick={() => this.setState({ addContractor: !addContractor })} >\r\n                                        <i className=\"fa fa-plus\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Row style={{ marginTop: \"10px\", overflow: \"auto\" }}>\r\n                                <table className=\"table\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">Contractor Name</th>\r\n                                            <th scope=\"col\">Address</th>\r\n                                            <th scope=\"col\">Email ID</th>\r\n                                            <th scope=\"col\">Phone No</th>\r\n                                            <th scope=\"col\">Country</th>\r\n                                            <th scope=\"col\">Contact Person</th>\r\n                                            <th scope=\"col\">Delete</th>\r\n                                            <th scope=\"col\">Edit</th>\r\n                                            <th></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {contractor_list.map((contractor, i)=>\r\n                                         (emailSearch === '' || contractor.email === emailSearch) && (countrySearch === '' || contractor.country === countrySearch) &&\r\n                                         <tr key={contractor.id} className={i % 2 === 0 ? \"rowtable\" : \"\"} style={{ height: \"30px\" }}>\r\n                                         <td>{contractor.name}</td>\r\n                                         <td>{contractor.address}</td>\r\n                                         <td>{contractor.email}</td>\r\n                                         <td>{contractor.phone}</td>\r\n                                         {this.state.country_list.map(country => {\r\n                                             return (contractor.country === country.id) && <td>{country.name}</td>\r\n                                         })}\r\n                                         <td>{contractor.contact_person}</td>\r\n                                         <td><button onClick={(e) => this.trashContractor(contractor.id)} style={{ border: \"none\" }} ><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                                         <td> <button onClick={(e) => this.renderComponent(contractor.id)} style={{ width: \"100px\", height: \"25px\", backgroundColor: \"#4A88DC\", border: \"none\", color: \"white\", borderRadius: \"10px\" }}>EDIT</button></td>\r\n                                     </tr>\r\n                                     )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </Row>\r\n                        </Card>\r\n                    </>}\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\Completed.js",["494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n    InputGroup,\r\n    FormControl,\r\n} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axiosInstance from '../../../utils/axiosinstance'\r\nimport axios from 'axios'\r\nimport Invoice from '../../../Invoice'\r\nimport DatePicker from \"react-datepicker\";\r\nimport AddQuotation from '.././AddQuotation'\r\nimport \"bootstrap/js/src/collapse.js\";\r\nimport { Alert } from '../../../utils/Utilities'\r\nimport { Radio } from 'semantic-ui-react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport swal from 'sweetalert'\r\nimport Swal from 'sweetalert2'\r\nimport Payment from '.././invoice/Payment'\r\nimport Clientcontinvoice from '.././invoice/Clientcontinvoice';\r\nimport { Popup } from 'semantic-ui-react'\r\nimport EditQuotation from '.././EditQuotation';\r\nvar token = localStorage.getItem('access_token')\r\n\r\nexport default class Completed extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote_id: null,\r\n            emailSearch: '',\r\n            countrySearch: '',\r\n            fromDate: '',\r\n            toDate: '',\r\n            status: '1',\r\n\r\n            visible: false,\r\n            childQuote_list: [],\r\n            parent_list: [],\r\n\r\n            addQuotation: false,\r\n            country_list: [],\r\n            list: [],\r\n            quotation_list: [],\r\n            client_list: [],\r\n            client_invoice:[],\r\n            paymentShow:false,\r\n            invoice_list:[],\r\n            cont_invoice:[],\r\n            pagenumber:1,\r\n            perpage:10,\r\n            total_pages:null,\r\n            singleCountry:'',\r\n            newquote:[],\r\n            client_id:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                const singleCountry = country_list.find(country => country.id == localStorage.getItem('countryid'))\r\n                const filtered_contries = country_list.filter(country => country.id == localStorage.getItem('countryid'))\r\n                if(localStorage.getItem('role') == 'admin'){\r\n                    this.setState({country_list,singleCountry})\r\n                }\r\n                else{\r\n                    this.setState({ country_list:filtered_contries,singleCountry })\r\n                }\r\n                // //console.log(country_list)\r\n            })\r\n            // axiosInstance.post(`/quotation/list`).then(res=>{\r\n            //     const list = res.data.response.quotation_list\r\n            //     this.setState({list})\r\n            // })\r\n        axiosInstance.post(`/quotation/filter`,{from_date:this.state.fromDate,to_date:this.state.toDate,client_id:this.state.client_id,s:this.state.emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n            .then(res => {\r\n                console.log(res)\r\n                if(localStorage.getItem('countryid') === null){\r\n                    this.setState({ list:[], quotation_list:[], parent_list:[] })\r\n\r\n                }\r\n                else{\r\n                \r\n                const total_pages = res.data.response.paging_details.total\r\n                // const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = res.data.response.quotation_list\r\n                // console.log(parent_list)\r\n                \r\n                // console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ parent_list,total_pages })\r\n                }\r\n            })\r\n        axiosInstance.post(`/client/list`)\r\n            .then(res => {\r\n                const client_list = res.data.response.client_list\r\n                this.setState({ client_list })\r\n                // //console.log(client_list, 'client_list');\r\n            })\r\n        axiosInstance.post(`/invoice/list`)\r\n            .then(res => {\r\n                const invoice_list = res.data.response.invoice_list\r\n                this.setState({invoice_list})\r\n                //console.log(invoice_list, 'invoice');\r\n            })\r\n    }\r\n    childQuote = (id) => {\r\n\r\n        const { status } = this.state;\r\n        // console.log(id)\r\n        // const childQuote_list = list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n        //console.log(childQuote_list, 'childQuote_list')\r\n        axiosInstance.post(`quotation/sub_list`,{id}).then(res=>{\r\n            const childQuote_list = res.data.response.sub_quotation_list\r\n            // console.log(childQuote_list)\r\n            this.setState({ childQuote_list, visible: !this.state.visible, visibleParent: id })\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value, },()=>this.onChangeDate())\r\n        \r\n    }\r\n    onChangeDate = () =>{\r\n        const {fromDate,toDate,pagenumber,perpage,emailSearch,status} = this.state\r\n        const data = {from_date:fromDate,to_date:toDate,page:pagenumber,per_page:perpage,client_id:this.state.client_id,country_id:localStorage.getItem('countryid'),job_status:status,s:emailSearch}\r\n        axiosInstance.post(`quotation/filter`,data)\r\n    .then(res=>{\r\n        const parent_list = res.data.response.quotation_list\r\n        // const total_pages = res.data.response.paging_details.total\r\n        // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n        // console.log(parent_list)\r\n        this.setState({parent_list})\r\n    })\r\n    }\r\n    statusFilter = (e) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,client_id:this.state.client_id,s:emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ [e.target.name]: e.target.value })\r\n        window.location.replace(`/cwr-summary/${e.target.value}`)\r\n    }\r\n    countryFilter = (name, value) => {\r\n        const { quotation_list, client_list, status } = this.state;\r\n        const client = client_list.find(client => client.country === value)\r\n        let filter = ''\r\n        if (client !== undefined) {\r\n            filter = quotation_list.filter(quote => quote.client_id === client.id && quote.job_status === status)\r\n        }\r\n        this.setState({ [name]: value, parent_list: filter })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    clientFilter = (name, value) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,client_id:value,s:emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ client_id: value })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    // quotationfilter = (quoteno) => {\r\n    //     const { quotation_list, client_list, status } = this.state;\r\n    //     const filter = quotation_list.filter(quote=>quote.quotation_num === quoteno)\r\n    //     this.setState({parent_list:filter})\r\n    // }\r\n    search = (e) =>{\r\n        const {fromDate,toDate,status} = this.state\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,client_id:this.state.client_id,s:e.target.value,page:1,job_status:status,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res=>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({emailSearch:e.target.value})\r\n    }\r\n    setDate = (date, name) => {\r\n        this.setState({\r\n            [name]: date\r\n        })\r\n    }\r\n\r\n    clientName = (client_id) => {\r\n        ////console.log(this.state.client_list, parseInt(client_id))\r\n        const client = this.state.client_list.find(client => parseInt(client.id) === parseInt(client_id))\r\n        if (client !== undefined) {\r\n            return client.name\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    onDelete = (id, client_invoice, cont_invoice,) => {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"Deleted Record can be found in Bin for 7 Days\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n            .then((willDelete) => {\r\n                if (willDelete) {\r\n                    axiosInstance.post(`/quotation/trash`, { id })\r\n                        .then((res) => {\r\n                            //console.log(res);\r\n                            if (res.data.message.success !== undefined) {\r\n                                Alert(\"success\", \"success\", `${res.data.message.success}`,)\r\n                                this.componentDidMount()\r\n                                this.setState({ visible: false })\r\n                            } else {\r\n                                Alert(\"error\", \"error\", `${res.data.message.error}`,)\r\n                            }\r\n                        })\r\n                } else {\r\n                    swal(\"Quotation Record is safe!\");\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                //console.log(error);\r\n            })\r\n    }\r\n    trashQuote = (id, client_invoice, cont_invoice, name,sublist) => {\r\n        // const { childQuote_list } = this.state\r\n        if (name === 'child') {\r\n            this.onDelete(id, client_invoice, cont_invoice,)\r\n        } else {\r\n            // const childQuote_list = this.state.list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n            if (sublist != 0) {\r\n                Alert('error', 'error', 'Parent quotation could not be deleted without deleting the child first!..')\r\n            } else {\r\n                this.onDelete(id, client_invoice, cont_invoice,)\r\n            }\r\n        }\r\n    }\r\n    pagination = (condition) =>{\r\n        const { pagenumber,perpage,total_pages,fromDate,toDate } = this.state\r\n        if(condition === 'inc')\r\n        {\r\n            const page = pagenumber >= total_pages ? total_pages:pagenumber+1\r\n            this.setState({pagenumber:page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,s:this.state.emailSearch,client_id:this.state.client_id,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate,job_status:this.state.status})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n        else{\r\n            const page = pagenumber <= 1 ? 1 : pagenumber-1\r\n            this.setState({pagenumber: page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,s:this.state.emailSearch,job_status:this.state.status,client_id:this.state.client_id,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n    }\r\n   \r\n\r\n    renderComponent = (id) => {\r\n        // window.location.replace(`/editQuotation/${id}`)\r\n        this.setState({\r\n            editQuote: true,\r\n            quote_id: id,\r\n        })\r\n    }\r\n    Back = () => {\r\n        this.setState({\r\n            editQuote: false,\r\n            quote_id: null,\r\n        })\r\n        this.componentDidMount()\r\n    }\r\n\r\n    paymentChange = (id,data) =>{\r\n        const { parent_list,invoice_list,paymentShow,childQuote_list} = this.state\r\n\r\n                if(data == 'child'){\r\n                    // console.log(id)\r\n                        const newquote = childQuote_list.find(quote=>quote.id == id)\r\n                        const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        this.setState({client_invoice,cont_invoice,newquote})\r\n                        this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                else{\r\n                    // console.log(id)\r\n                    const newquote = parent_list.find(quote=>quote.id == id)\r\n                    const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    this.setState({client_invoice,cont_invoice,newquote})\r\n                    this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                \r\n    }\r\n    payment = (id) =>{\r\n        const { paymentShow } = this.state\r\n        this.setState({paymentShow:!this.state.paymentShow})\r\n    }\r\n\r\n    handleTrash = () =>{\r\n        // axiosInstance.post(``)\r\n    }\r\n    render() {\r\n        const { visible,pagenumber,client_list,singleCountry, paymentShow,visibleParent,client_invoice, editQuote, childQuote_list, parent_list, quotation_list, country_list, emailSearch, countrySearch, fromDate, toDate, status, } = this.state;\r\n        return (\r\n            <div>\r\n                {editQuote ? <AddQuotation id={this.state.quote_id} Back={this.Back} /> :\r\n                    <div className=\"component\">\r\n                        <h4>{singleCountry !== undefined?singleCountry.name:''}</h4>\r\n                        {/* <Card>\r\n                        <Row >\r\n                        <Col lg={2}></Col>\r\n                        <Col lg={2}>\r\n                            <Link to='/cwr-summary/pending'>\r\n                            <Radio label='Pending'  />\r\n                            </Link>\r\n                            </Col>\r\n                            <Col lg={2}>\r\n                            <Link to='/cwr-summary/completed'>\r\n                            <Radio label='Completed' checked />\r\n                            </Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/cancelled'>\r\n                                <Radio label='Cancelled'  /></Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/allQ'>\r\n                                <Radio label='All Qutotations' />\r\n                                </Link>\r\n                                </Col>\r\n                        </Row>                            \r\n                        </Card> */}\r\n                        <Card style={{ marginTop: \"30px\" }} >\r\n                            <Row  >\r\n                                <Col lg={3}>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name='emailSearch'\r\n                                        placeholder=\"Search\"\r\n                                        value={emailSearch}\r\n                                        onChange={this.search}\r\n                                    />\r\n                                    <button className='iconButtton' >\r\n                                        <i className=\"fa fa-search\" ></i>\r\n                                    </button><br />\r\n                                    {/* <Autocomplete\r\n                                        options={quotation_list!==undefined?quotation_list:[]}\r\n                                        onChange={(e, value) => value !== null ? this.quotationfilter(value.quotation_num) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.quotation_num}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Quotation' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    /> */}\r\n                                </Col>\r\n                                {/* <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={country_list}\r\n                                        onChange={(e, value) => value !== null ? this.countryFilter('countrySearch', value.id) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Country' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col> */}\r\n                                <Col lg={1}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"fromDate\"\r\n                                        value={fromDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br /> \r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"toDate\"\r\n                                        value={toDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Form.Control as='select' value={status} name=\"status\" onChange={this.statusFilter} >\r\n                                        <option value='' disabled selected> Status </option>\r\n                                        <option value='2' selected>Pending</option>\r\n                                        <option value='1'>Completed</option>\r\n                                        <option value='3'>Cancelled</option>\r\n                                        <option value='4'>All Quotations</option>\r\n                                    </Form.Control><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={singleCountry.id === '' ? client_list : client_list.filter(client => parseInt(client.country) === parseInt(singleCountry.id))}\r\n                                        onChange={(e, value) => value !== null ? this.clientFilter('client_id', value.id) :''}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Client' {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Link to='/addQuotation' >\r\n                                        <Popup content=\"Add Quotation\" trigger={<button className='addIcon' >\r\n                                        <i className=\"fa fa-plus\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                    </Link>\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Popup content=\"Refresh\"\r\n                                    trigger={<button className='addIcon' onClick={()=>window.location.reload()}>\r\n                                        <i className=\"fa fa-retweet\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Popup content=\"Recycle Bin\"\r\n                                    trigger={<Link to=\"/trash\"><button className='addIcon' onClick={this.handleTrash}>\r\n                                        <i className=\"fa fa-trash\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button></Link>}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\" }}>\r\n                            <Row>\r\n                                <Table style={{ backgroundColor: \"white\" }} responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>EDIT</th>\r\n                                            <th>VIEW_INV</th>\r\n                                            <th >QUOTE NO</th>\r\n                                            <th >DATE ISSUED</th>\r\n                                            <th >CLIENT</th>\r\n                                            <th >DESCRIPTION</th>\r\n                                            <th style={{textAlign:'right'}}>QUOTE AMT</th>\r\n                                            <th >QUOTE APPROVAL</th>\r\n                                            <th>CLIENT PO</th>\r\n                                            <th>MARGIN %</th>\r\n                                            <th style={{textAlign:'right'}}>MARGIN AMT</th>\r\n                                            <th>CCM TKT NO</th>\r\n                                            <th>COMPLETION DATE</th>\r\n                                            <th>DELETE</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {/* {quotation_list.map(this.renderTable)} */}\r\n                                        {parent_list.length !== 0 && parent_list.map((quote, i) =>\r\n                                            <>\r\n                                                <tr key={quote.quotation_num}\r\n                                                \r\n                                                    className={quote.job_complete_date !== '0000-00-00'? \"greenish\" : \"\"}\r\n                                                    onClick={() => this.childQuote(quote.id)}\r\n                                                    style={{ height: \"50px\", padding: \"10px\" }}\r\n                                                    >\r\n                                                    \r\n                                                    <td>\r\n                                                    {/* <Link to={`/editQuotation/${quote.id}`}> */}\r\n                                                    <button onClick={() => this.renderComponent(quote.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", }} ></i></button>\r\n                                                    {/* </Link> */}\r\n                                                    </td>\r\n                                                    <td><button onClick={()=>this.paymentChange(quote.id)} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                    {quote.sub_list == 0 ?<td> {quote.quotation_num} </td>:\r\n                                                    <Popup content=\"View Child Quote\" trigger={<td style={{cursor:'pointer'}}> {quote.quotation_num} </td>}/>}\r\n                                                    \r\n                                                    <td >{quote.qut_date_issue !== '0000-00-00' ? quote.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                    <td >{this.clientName(quote.client_id)} </td>\r\n                                                    <td >{quote.description} </td>\r\n                                                    <td style={{textAlign:'right'}}>{quote.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td >{quote.qut_status === '1' ? 'Approved' : quote.qut_status === '2' ? 'Pending' : quote.qut_status === '3' ? 'Canceled' : quote.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                    <td > {quote.client_po} </td>\r\n                                                    {parseInt(quote.margin_amount) > 0 ?\r\n                                                        <>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                `${quote.margin}%`:''} </td>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                        </>\r\n                                                        : parseInt(quote.margin_amount) === 0 ?\r\n                                                            <>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00 %' :''}</td>\r\n                                                                <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00' :''}</td>\r\n                                                            </> :\r\n                                                            <>\r\n                                                                <td ></td>\r\n                                                                <td style={{ color: 'red',textAlign:'right' }} >{quote.qut_status === '1' ?\r\n                                                                    quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                            </>}\r\n                                                    <td >{quote.ticket_no !== '0' ? quote.ticket_no : ''} </td>\r\n                                                    <td >{quote.job_complete_date !== '0000-00-00' ? quote.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                    <td><button onClick={(e) => this.trashQuote(quote.id, quote.client_invoice_id, quote.cont_invoice_id, 'parent',quote.sub_list)} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px' }} ></i></button></td>\r\n                                                </tr>\r\n                                                <React.Fragment >\r\n                                                    {(visible === true && visibleParent == quote.id) && childQuote_list.map(child =>\r\n                                                        <tr key={child.quotation_num}\r\n                                                            className=\"rowtable\"\r\n                                                            style={{ height: \"50px\", padding: \"10px\" }}>\r\n                                                            <td><button onClick={() => this.renderComponent(child.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                            <td><button onClick={()=>this.paymentChange(child.id,\"child\")} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                            <td > {child.quotation_num} </td>\r\n                                                            <td >{child.qut_date_issue !== '0000-00-00' ? child.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                            <td >{this.clientName(child.client_id)} </td>\r\n                                                            <td >{child.description} </td>\r\n                                                            <td  style={{textAlign:'right'}}>{child.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                            <td >{child.qut_status === '1' ? 'Approved' : child.qut_status === '2' ? 'Pending' : child.qut_status === '3' ? 'Canceled' : child.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                            <td > {child.cont_po_num} </td>\r\n                                                            {parseInt(child.margin_amount) > 0 ?\r\n                                                                <>\r\n                                                                    <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                        `${child.margin}%`:''} </td>\r\n                                                                    <td  style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                        child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                </>\r\n                                                                : parseInt(child.margin_amount) === 0 ?\r\n                                                                    <>\r\n                                                                        <td ></td>\r\n                                                                        <td ></td>\r\n                                                                    </> : <>\r\n                                                                        <td ></td>\r\n                                                                        <td style={{ color: 'red',textAlign:\"right\" }} >{quote.qut_status === '1' ?\r\n                                                                            child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                    </>}\r\n                                                            <td >{child.ticket_no !== '0' ? child.ticket_no : ''} </td>\r\n                                                            <td >{child.job_complete_date !== '0000-00-00' ? child.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                            <td><button onClick={(e) => this.trashQuote(child.id, child.client_invoice_id, child.cont_invoice_id, 'child')} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px', backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                        </tr>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            </>\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Row>\r\n                        </Card>\r\n                        <div style={{display:'flex',alignItems:'center',justifyContent:'center',marginTop:\"50px\"}}>\r\n                                <button  style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('dec')}><i className=\"fa fa-arrow-left\" style={{fontSize:\"15px\"}}></i></button>\r\n                                <p style={{marginLeft:\"20px\",fontSize:\"18px\",marginTop:\"15px\"}}>{pagenumber}</p>\r\n                                <button \r\n                                    style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('inc')}><i className=\"fa fa-arrow-right\" style={{fontSize:\"15px\"}}></i></button>\r\n                            </div>\r\n                    </div>}\r\n                    {/* <Payment\r\n                        show={paymentShow}\r\n                        handleClose={this.paymentChange}\r\n                        list={client_invoice}\r\n                        onDelete={this.onDelete}\r\n                        user='Client'\r\n                    /> */}\r\n                    <Clientcontinvoice\r\n                    show={paymentShow}\r\n                    handleClose={this.payment}\r\n                    client_list={client_invoice}\r\n                    cont_list={this.state.cont_invoice}\r\n                    quote={this.state.newquote}\r\n                    />\r\n                   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// const renderInvoice = () => {\r\n//     return (\r\n//         <Card>\r\n\r\n//         </Card>\r\n//     )\r\n// }\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\TrashQuote.js",["530","531","532","533","534","535"],"import React,{useState,useEffect} from 'react'\r\nimport { Row, Card, Table, Col, Button } from 'react-bootstrap'\r\nimport axiosInstance from '../../utils/axiosinstance'\r\nimport CustomButton from '../../utils/Button'\r\nimport {Alert} from '../../utils/Utilities'\r\nfunction TrashQuote() {\r\n    const [QuoteList,setQuoteList] = useState([])\r\n    const [client_list, setclient_list] = useState([])\r\n    const [restoreData, setrestoreData] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        axiosInstance.post(`quotation/list`,{trash:1})\r\n        .then(res =>{\r\n            const list = res.data.response.quotation_list\r\n            const QuotationList = list.filter(quote => quote.country_id == localStorage.getItem('countryid'))\r\n            setQuoteList(QuotationList)\r\n\r\n        axiosInstance.post(`/client/list`)\r\n        .then(res => {\r\n            const client_list = res.data.response.client_list\r\n            setclient_list(client_list)\r\n            })\r\n        })\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        axiosInstance.post(`quotation/list`,{trash:1})\r\n        .then(res =>{\r\n            const list = res.data.response.quotation_list\r\n            const QuotationList = list.filter(quote => quote.country_id == localStorage.getItem('countryid'))\r\n            console.log(QuotationList)\r\n            setQuoteList(QuotationList)\r\n        })\r\n    },[restoreData])\r\n    \r\n    const clientName = (client_id) => {\r\n        const client = client_list.find(client => parseInt(client.id) === parseInt(client_id))\r\n        if (client !== undefined) {\r\n            return client.name\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    const restore =(id,parent_id) =>{\r\n        if(parent_id == '0'){\r\n            axiosInstance.post(`quotation/restore`,{id})\r\n            .then(res =>{\r\n                if (res.data.message.success !== undefined) {\r\n                    setrestoreData(!restoreData)\r\n                    Alert(\"success\", \"success\", `${res.data.message.success}`,)\r\n                } else {\r\n                    Alert(\"error\", \"error\", `${res.data.message.error}`,)\r\n                }\r\n            })\r\n        }\r\n        else{\r\n            const parent = QuoteList.find(quote => quote.id == parent_id)\r\n            if(parent !== undefined){\r\n                Alert('error','Error!',`Recover the Parent Quote \" ${parent.quotation_num} \" First !..`)\r\n            }\r\n            else{\r\n                axiosInstance.post(`quotation/restore`,{id})\r\n                .then(res =>{\r\n                    if (res.data.message.success !== undefined) {\r\n                        setrestoreData(!restoreData)\r\n                        Alert(\"success\", \"success\", `${res.data.message.success}`,)\r\n                    } else {\r\n                        Alert(\"error\", \"error\", `${res.data.message.error}`,)\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    return (\r\n        <div className=\"component\">\r\n            <Row>\r\n                <Col lg={1}>\r\n                    <button className='button' style={{width:80}} onClick={()=>window.history.back()}>Back</button>\r\n                </Col>\r\n                <Col lg={3} style={{marginTop:10}}>\r\n                    <h4>Deleted Quotes</h4>\r\n                </Col>\r\n            </Row>\r\n            <Card style={{ marginTop: \"30px\", backgroundColor: \"white\" }}>\r\n                <Row>\r\n                    <Table style={{ backgroundColor: \"white\" }} responsive>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Restore</th>\r\n                                        <th >QUOTATION NUMBER</th>\r\n                                            <th >DATE ISSUED</th>\r\n                                            <th >CLIENT</th>\r\n                                            <th >DESCRIPTION</th>\r\n                                            <th >QUOTE AMOUNT</th>\r\n                                            <th >APPROVAL STATUS</th>\r\n                                            <th>CLIENT PO</th>\r\n                                            <th>MARGIN %</th>\r\n                                            <th>MARGIN AMOUNT</th>\r\n                                            <th>CCM TICKET NO</th>\r\n                                            <th>COMPLETION DATE</th>\r\n                                            \r\n                                        </tr>\r\n                                    </thead>\r\n\r\n                                    <tbody>\r\n                                        {QuoteList.map(quote =>\r\n                                            <tr key={quote.quotation_num}\r\n                                                \r\n                                            className={quote.job_complete_date !== '0000-00-00'? \"greenish\" : \"\"}\r\n                                            style={{ height: \"50px\", padding: \"10px\" }}\r\n                                            >\r\n                                            <td><button className=\"button1\" style={{width:70}} onClick={()=>restore(quote.id,quote.parent_id)}>Restore</button></td>\r\n                                            <td>{quote.quotation_num}</td>\r\n                                            <td >{quote.qut_date_issue !== '0000-00-00' ? quote.qut_date_issue : ''}  </td>\r\n                                            <td >{clientName(quote.client_id)} </td>\r\n                                            <td >{quote.description} </td>\r\n                                            <td style={{textAlign:'right'}}>{quote.quotation_amt} </td>\r\n                                            <td >{quote.qut_status === '1' ? 'Approved' : quote.qut_status === '2' ? 'Pending' : quote.qut_status === '3' ? 'Canceled' : quote.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                            <td > {quote.client_po} </td>\r\n                                            {parseInt(quote.margin_amount) > 0 ?\r\n                                                <>\r\n                                                    <td style={{textAlign:'right'}}>{`${quote.margin}%`} </td>\r\n                                                    <td style={{textAlign:'right'}}>{quote.margin_amount} </td>\r\n                                                </>\r\n                                                : parseInt(quote.margin_amount) === 0 ?\r\n                                                    <>\r\n                                                    <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00 %' :''}</td>\r\n                                                                <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00' :''}</td>\r\n                                                    </> :\r\n                                                    <>\r\n                                                        <td ></td>\r\n                                                        <td style={{ color: 'red',textAlign:'right' }} >{quote.margin_amount} </td>\r\n                                                    </>}\r\n                                            <td >{quote.ticket_no !== '0' ? quote.ticket_no : ''} </td>\r\n                                            <td >{quote.job_complete_date !== '0000-00-00' ? quote.job_complete_date : ''} </td>\r\n                                        </tr>)}\r\n                                    </tbody>\r\n                    </Table>\r\n                </Row>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TrashQuote\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\Cancelled.js",["536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n    InputGroup,\r\n    FormControl,\r\n} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axiosInstance from '../../../utils/axiosinstance'\r\nimport axios from 'axios'\r\nimport Invoice from '../../../Invoice'\r\nimport DatePicker from \"react-datepicker\";\r\nimport AddQuotation from '.././AddQuotation'\r\nimport \"bootstrap/js/src/collapse.js\";\r\nimport { Alert } from '../../../utils/Utilities'\r\nimport { Radio } from 'semantic-ui-react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport swal from 'sweetalert'\r\nimport Swal from 'sweetalert2'\r\nimport Payment from '.././invoice/Payment'\r\nimport Clientcontinvoice from '.././invoice/Clientcontinvoice';\r\nimport { Popup } from 'semantic-ui-react'\r\nimport EditQuotation from '.././EditQuotation';\r\nvar token = localStorage.getItem('access_token')\r\n\r\nexport default class Cancelled extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote_id: null,\r\n            emailSearch: '',\r\n            countrySearch: '',\r\n            fromDate: '',\r\n            toDate: '',\r\n            status: '3',\r\n\r\n            visible: false,\r\n            childQuote_list: [],\r\n            parent_list: [],\r\n\r\n            addQuotation: false,\r\n            country_list: [],\r\n            list: [],\r\n            quotation_list: [],\r\n            client_list: [],\r\n            client_invoice:[],\r\n            paymentShow:false,\r\n            invoice_list:[],\r\n            cont_invoice:[],\r\n            pagenumber:1,\r\n            perpage:10,\r\n            total_pages:null,\r\n            singleCountry:'',\r\n            newquote:[],\r\n            client_id:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                const singleCountry = country_list.find(country => country.id == localStorage.getItem('countryid'))\r\n                const filtered_contries = country_list.filter(country => country.id == localStorage.getItem('countryid'))\r\n                if(localStorage.getItem('role') == 'admin'){\r\n                    this.setState({country_list,singleCountry})\r\n                }\r\n                else{\r\n                    this.setState({ country_list:filtered_contries,singleCountry })\r\n                }\r\n                // //console.log(country_list)\r\n            })\r\n            // axiosInstance.post(`/quotation/list`).then(res=>{\r\n            //     const list = res.data.response.quotation_list\r\n            //     this.setState({list})\r\n            // })\r\n        axiosInstance.post(`/quotation/filter`,{from_date:this.state.fromDate,client_id:this.state.client_id,to_date:this.state.toDate,s:this.state.emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n            .then(res => {\r\n                console.log(res)\r\n                if(localStorage.getItem('countryid') === null){\r\n                    this.setState({ list:[], quotation_list:[], parent_list:[] })\r\n\r\n                }\r\n                else{\r\n                \r\n                const total_pages = res.data.response.paging_details.total\r\n                // const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = res.data.response.quotation_list\r\n                // console.log(parent_list)\r\n                \r\n                // console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ parent_list,total_pages })\r\n                }\r\n            })\r\n        axiosInstance.post(`/client/list`)\r\n            .then(res => {\r\n                const client_list = res.data.response.client_list\r\n                this.setState({ client_list })\r\n                // //console.log(client_list, 'client_list');\r\n            })\r\n        axiosInstance.post(`/invoice/list`)\r\n            .then(res => {\r\n                const invoice_list = res.data.response.invoice_list\r\n                this.setState({invoice_list})\r\n                //console.log(invoice_list, 'invoice');\r\n            })\r\n    }\r\n    childQuote = (id) => {\r\n\r\n        const { status } = this.state;\r\n        // console.log(id)\r\n        // const childQuote_list = list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n        //console.log(childQuote_list, 'childQuote_list')\r\n        axiosInstance.post(`quotation/sub_list`,{id}).then(res=>{\r\n            const childQuote_list = res.data.response.sub_quotation_list\r\n            // console.log(childQuote_list)\r\n            this.setState({ childQuote_list, visible: !this.state.visible, visibleParent: id })\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value, },()=>this.onChangeDate())\r\n        \r\n    }\r\n    onChangeDate = () =>{\r\n        const {fromDate,toDate,pagenumber,perpage,emailSearch,status} = this.state\r\n        const data = {from_date:fromDate,to_date:toDate,page:pagenumber,client_id:this.state.client_id,per_page:perpage,country_id:localStorage.getItem('countryid'),job_status:status,s:emailSearch}\r\n        axiosInstance.post(`quotation/filter`,data)\r\n    .then(res=>{\r\n        const parent_list = res.data.response.quotation_list\r\n        // const total_pages = res.data.response.paging_details.total\r\n        // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n        // console.log(parent_list)\r\n        this.setState({parent_list})\r\n    })\r\n    }\r\n    statusFilter = (e) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,s:emailSearch,client_id:this.state.client_id,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ [e.target.name]: e.target.value })\r\n        window.location.replace(`/cwr-summary/${e.target.value}`)\r\n    }\r\n    countryFilter = (name, value) => {\r\n        const { quotation_list, client_list, status } = this.state;\r\n        const client = client_list.find(client => client.country === value)\r\n        let filter = ''\r\n        if (client !== undefined) {\r\n            filter = quotation_list.filter(quote => quote.client_id === client.id && quote.job_status === status)\r\n        }\r\n        this.setState({ [name]: value, parent_list: filter })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    clientFilter = (name, value) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,client_id:value,s:emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ client_id: value })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    // quotationfilter = (quoteno) => {\r\n    //     const { quotation_list, client_list, status } = this.state;\r\n    //     const filter = quotation_list.filter(quote=>quote.quotation_num === quoteno)\r\n    //     this.setState({parent_list:filter})\r\n    // }\r\n    search = (e) =>{\r\n        const {fromDate,toDate,status} = this.state\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,client_id:this.state.client_id,to_date:toDate,s:e.target.value,page:1,job_status:status,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res=>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({emailSearch:e.target.value})\r\n    }\r\n    setDate = (date, name) => {\r\n        this.setState({\r\n            [name]: date\r\n        })\r\n    }\r\n\r\n    clientName = (client_id) => {\r\n        ////console.log(this.state.client_list, parseInt(client_id))\r\n        const client = this.state.client_list.find(client => parseInt(client.id) === parseInt(client_id))\r\n        if (client !== undefined) {\r\n            return client.name\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    onDelete = (id, client_invoice, cont_invoice,) => {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"Deleted Record can be found in Bin for 7 Days\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n            .then((willDelete) => {\r\n                if (willDelete) {\r\n                    axiosInstance.post(`/quotation/trash`, { id })\r\n                        .then((res) => {\r\n                            //console.log(res);\r\n                            if (res.data.message.success !== undefined) {\r\n                                Alert(\"success\", \"success\", `${res.data.message.success}`,)\r\n                                this.componentDidMount()\r\n                                this.setState({ visible: false })\r\n                            } else {\r\n                                Alert(\"error\", \"error\", `${res.data.message.error}`,)\r\n                            }\r\n                        })\r\n                } else {\r\n                    swal(\"Quotation Record is safe!\");\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                //console.log(error);\r\n            })\r\n    }\r\n    trashQuote = (id, client_invoice, cont_invoice, name,sublist) => {\r\n        // const { childQuote_list } = this.state\r\n        if (name === 'child') {\r\n            this.onDelete(id, client_invoice, cont_invoice,)\r\n        } else {\r\n            // const childQuote_list = this.state.list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n            if (sublist != 0) {\r\n                Alert('error', 'error', 'Parent quotation could not be deleted without deleting the child first!..')\r\n            } else {\r\n                this.onDelete(id, client_invoice, cont_invoice,)\r\n            }\r\n        }\r\n    }\r\n    pagination = (condition) =>{\r\n        const { pagenumber,perpage,total_pages,fromDate,toDate } = this.state\r\n        if(condition === 'inc')\r\n        {\r\n            const page = pagenumber >= total_pages ? total_pages:pagenumber+1\r\n            this.setState({pagenumber:page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,s:this.state.emailSearch,client_id:this.state.client_id,job_status:this.state.status,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n        else{\r\n            const page = pagenumber <= 1 ? 1 : pagenumber-1\r\n            this.setState({pagenumber: page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,job_status:this.state.status,s:this.state.emailSearch,client_id:this.state.client_id,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n    }\r\n   \r\n\r\n    renderComponent = (id) => {\r\n        // window.location.replace(`/editQuotation/${id}`)\r\n        this.setState({\r\n            editQuote: true,\r\n            quote_id: id,\r\n        })\r\n    }\r\n    Back = () => {\r\n        this.setState({\r\n            editQuote: false,\r\n            quote_id: null,\r\n        })\r\n        this.componentDidMount()\r\n    }\r\n\r\n    paymentChange = (id,data) =>{\r\n        const { parent_list,invoice_list,paymentShow,childQuote_list} = this.state\r\n\r\n                if(data == 'child'){\r\n                    // console.log(id)\r\n                        const newquote = childQuote_list.find(quote=>quote.id == id)\r\n                        const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        this.setState({client_invoice,cont_invoice,newquote})\r\n                        this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                else{\r\n                    // console.log(id)\r\n                    const newquote = parent_list.find(quote=>quote.id == id)\r\n                    const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    this.setState({client_invoice,cont_invoice,newquote})\r\n                    this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                \r\n    }\r\n    payment = (id) =>{\r\n        const { paymentShow } = this.state\r\n        this.setState({paymentShow:!this.state.paymentShow})\r\n    }\r\n\r\n    handleTrash = () =>{\r\n        // axiosInstance.post(``)\r\n    }\r\n    render() {\r\n        const { visible,pagenumber,client_list,singleCountry, paymentShow,visibleParent,client_invoice, editQuote, childQuote_list, parent_list, quotation_list, country_list, emailSearch, countrySearch, fromDate, toDate, status, } = this.state;\r\n        return (\r\n            <div>\r\n                {editQuote ? <AddQuotation id={this.state.quote_id} Back={this.Back} /> :\r\n                    <div className=\"component\">\r\n                        <h4>{singleCountry !== undefined?singleCountry.name:''}</h4>\r\n                        {/* <Card>\r\n                        <Row >\r\n                        <Col lg={2}></Col>\r\n                        <Col lg={2}>\r\n                            <Link to='/cwr-summary/pending'>\r\n                            <Radio label='Pending'  />\r\n                            </Link>\r\n                            </Col>\r\n                            <Col lg={2}>\r\n                            <Link to='/cwr-summary/completed'>\r\n                            <Radio label='Completed'  />\r\n                            </Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/cancelled'>\r\n                                <Radio label='Cancelled' checked /></Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/allQ'>\r\n                                <Radio label='All Qutotations' />\r\n                                </Link>\r\n                                </Col>\r\n                        </Row>                            \r\n                        </Card> */}\r\n                        <Card style={{ marginTop: \"30px\" }} >\r\n                            <Row  >\r\n                                <Col lg={3}>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name='emailSearch'\r\n                                        placeholder=\"Search\"\r\n                                        value={emailSearch}\r\n                                        onChange={this.search}\r\n                                    />\r\n                                    <button className='iconButtton' >\r\n                                        <i className=\"fa fa-search\" ></i>\r\n                                    </button><br />\r\n                                    {/* <Autocomplete\r\n                                        options={quotation_list!==undefined?quotation_list:[]}\r\n                                        onChange={(e, value) => value !== null ? this.quotationfilter(value.quotation_num) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.quotation_num}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Quotation' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    /> */}\r\n                                </Col>\r\n                                {/* <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={country_list}\r\n                                        onChange={(e, value) => value !== null ? this.countryFilter('countrySearch', value.id) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Country' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col> */}\r\n                                <Col lg={1}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"fromDate\"\r\n                                        value={fromDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br /> \r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"toDate\"\r\n                                        value={toDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Form.Control as='select' value={status} name=\"status\" onChange={this.statusFilter} >\r\n                                        <option value='' disabled selected> Status </option>\r\n                                        <option value='2' selected>Pending</option>\r\n                                        <option value='1'>Completed</option>\r\n                                        <option value='3'>Cancelled</option>\r\n                                        <option value='4'>All Quotations</option>\r\n                                    </Form.Control><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={singleCountry.id === '' ? client_list : client_list.filter(client => parseInt(client.country) === parseInt(singleCountry.id))}\r\n                                        onChange={(e, value) => value !== null ? this.clientFilter('client_id', value.id) :''}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Client' {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Link to='/addQuotation' >\r\n                                        <Popup content=\"Add Quotation\" trigger={<button className='addIcon' >\r\n                                        <i className=\"fa fa-plus\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                    </Link>\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Popup content=\"Refresh\"\r\n                                    trigger={<button className='addIcon' onClick={()=>window.location.reload()}>\r\n                                        <i className=\"fa fa-retweet\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Popup content=\"Recycle Bin\"\r\n                                    trigger={<Link to=\"/trash\"><button className='addIcon' onClick={this.handleTrash}>\r\n                                        <i className=\"fa fa-trash\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button></Link>}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\" }}>\r\n                            <Row>\r\n                                <Table style={{ backgroundColor: \"white\" }} responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>EDIT</th>\r\n                                            <th>VIEW_INV</th>\r\n                                            <th >QUOTE NO</th>\r\n                                            <th >DATE ISSUED</th>\r\n                                            <th >CLIENT</th>\r\n                                            <th >DESCRIPTION</th>\r\n                                            <th style={{textAlign:'right'}}>QUOTE AMT</th>\r\n                                            <th >QUOTE APPROVAL</th>\r\n                                            <th>CLIENT PO</th>\r\n                                            <th>MARGIN %</th>\r\n                                            <th style={{textAlign:'right'}}>MARGIN AMT</th>\r\n                                            <th>CCM TKT NO</th>\r\n                                            <th>COMPLETION DATE</th>\r\n                                            <th>DELETE</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {/* {quotation_list.map(this.renderTable)} */}\r\n                                        {parent_list.length !== 0 && parent_list.map((quote, i) =>\r\n                                            <>\r\n                                                <tr key={quote.quotation_num}\r\n                                                \r\n                                                    className={quote.job_complete_date !== '0000-00-00'? \"greenish\" : \"\"}\r\n                                                    onClick={() => this.childQuote(quote.id)}\r\n                                                    style={{ height: \"50px\", padding: \"10px\" }}\r\n                                                    >\r\n                                                    \r\n                                                    <td>\r\n                                                    {/* <Link to={`/editQuotation/${quote.id}`}> */}\r\n                                                    <button onClick={() => this.renderComponent(quote.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", }} ></i></button>\r\n                                                    {/* </Link> */}\r\n                                                    </td>\r\n                                                    <td><button onClick={()=>this.paymentChange(quote.id)} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                    {quote.sub_list == 0 ?<td> {quote.quotation_num} </td>:\r\n                                                    <Popup content=\"View Child Quote\" trigger={<td style={{cursor:'pointer'}}> {quote.quotation_num} </td>}/>}\r\n                                                    \r\n                                                    <td >{quote.qut_date_issue !== '0000-00-00' ? quote.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                    <td >{this.clientName(quote.client_id)} </td>\r\n                                                    <td >{quote.description} </td>\r\n                                                    <td style={{textAlign:'right'}}>{quote.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td >{quote.qut_status === '1' ? 'Approved' : quote.qut_status === '2' ? 'Pending' : quote.qut_status === '3' ? 'Canceled' : quote.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                    <td > {quote.client_po} </td>\r\n                                                    {parseInt(quote.margin_amount) > 0 ?\r\n                                                        <>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                `${quote.margin}%`:''} </td>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                        </>\r\n                                                        : parseInt(quote.margin_amount) === 0 ?\r\n                                                            <>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00 %' :''}</td>\r\n                                                                <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00' :''}</td>\r\n                                                            </> :\r\n                                                            <>\r\n                                                                <td ></td>\r\n                                                                <td style={{ color: 'red',textAlign:'right' }} >{quote.qut_status === '1' ?\r\n                                                                    quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                            </>}\r\n                                                    <td >{quote.ticket_no !== '0' ? quote.ticket_no : ''} </td>\r\n                                                    <td >{quote.job_complete_date !== '0000-00-00' ? quote.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                    <td><button onClick={(e) => this.trashQuote(quote.id, quote.client_invoice_id, quote.cont_invoice_id, 'parent',quote.sub_list)} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px' }} ></i></button></td>\r\n                                                </tr>\r\n                                                <React.Fragment >\r\n                                                    {(visible === true && visibleParent == quote.id) && childQuote_list.map(child =>\r\n                                                        <tr key={child.quotation_num}\r\n                                                            className=\"rowtable\"\r\n                                                            style={{ height: \"50px\", padding: \"10px\" }}>\r\n                                                            <td><button onClick={() => this.renderComponent(child.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                            <td><button onClick={()=>this.paymentChange(child.id,\"child\")} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                            <td > {child.quotation_num} </td>\r\n                                                            <td >{child.qut_date_issue !== '0000-00-00' ? child.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                            <td >{this.clientName(child.client_id)} </td>\r\n                                                            <td >{child.description} </td>\r\n                                                            <td  style={{textAlign:'right'}}>{child.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                            <td >{child.qut_status === '1' ? 'Approved' : child.qut_status === '2' ? 'Pending' : child.qut_status === '3' ? 'Canceled' : child.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                            <td > {child.cont_po_num} </td>\r\n                                                            {parseInt(child.margin_amount) > 0 ?\r\n                                                                <>\r\n                                                                    <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                        `${child.margin}%`:''} </td>\r\n                                                                    <td  style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                        child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                </>\r\n                                                                : parseInt(child.margin_amount) === 0 ?\r\n                                                                    <>\r\n                                                                        <td ></td>\r\n                                                                        <td ></td>\r\n                                                                    </> : <>\r\n                                                                        <td ></td>\r\n                                                                        <td style={{ color: 'red',textAlign:\"right\" }} >{quote.qut_status === '1' ?\r\n                                                                            child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                    </>}\r\n                                                            <td >{child.ticket_no !== '0' ? child.ticket_no : ''} </td>\r\n                                                            <td >{child.job_complete_date !== '0000-00-00' ? child.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                            <td><button onClick={(e) => this.trashQuote(child.id, child.client_invoice_id, child.cont_invoice_id, 'child')} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px', backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                        </tr>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            </>\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Row>\r\n                        </Card>\r\n                        <div style={{display:'flex',alignItems:'center',justifyContent:'center',marginTop:\"50px\"}}>\r\n                                <button  style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('dec')}><i className=\"fa fa-arrow-left\" style={{fontSize:\"15px\"}}></i></button>\r\n                                <p style={{marginLeft:\"20px\",fontSize:\"18px\",marginTop:\"15px\"}}>{pagenumber}</p>\r\n                                <button \r\n                                    style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('inc')}><i className=\"fa fa-arrow-right\" style={{fontSize:\"15px\"}}></i></button>\r\n                            </div>\r\n                    </div>}\r\n                    {/* <Payment\r\n                        show={paymentShow}\r\n                        handleClose={this.paymentChange}\r\n                        list={client_invoice}\r\n                        onDelete={this.onDelete}\r\n                        user='Client'\r\n                    /> */}\r\n                    <Clientcontinvoice\r\n                    show={paymentShow}\r\n                    handleClose={this.payment}\r\n                    client_list={client_invoice}\r\n                    cont_list={this.state.cont_invoice}\r\n                    quote={this.state.newquote}\r\n                    />\r\n                   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// const renderInvoice = () => {\r\n//     return (\r\n//         <Card>\r\n\r\n//         </Card>\r\n//     )\r\n// }\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\AllQ.js",["572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n    InputGroup,\r\n    FormControl,\r\n} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axiosInstance from '../../../utils/axiosinstance'\r\nimport axios from 'axios'\r\nimport Invoice from '../../../Invoice'\r\nimport DatePicker from \"react-datepicker\";\r\nimport AddQuotation from '.././AddQuotation'\r\nimport \"bootstrap/js/src/collapse.js\";\r\nimport { Alert } from '../../../utils/Utilities'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { Radio } from 'semantic-ui-react';\r\nimport swal from 'sweetalert'\r\nimport Swal from 'sweetalert2'\r\nimport Payment from '.././invoice/Payment'\r\nimport Clientcontinvoice from '.././invoice/Clientcontinvoice';\r\nimport { Popup } from 'semantic-ui-react'\r\nimport EditQuotation from '.././EditQuotation';\r\nvar token = localStorage.getItem('access_token')\r\n\r\nexport default class AllQ extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote_id: null,\r\n            emailSearch: '',\r\n            countrySearch: '',\r\n            fromDate: '',\r\n            toDate: '',\r\n            status: '4',\r\n\r\n            visible: false,\r\n            childQuote_list: [],\r\n            parent_list: [],\r\n\r\n            addQuotation: false,\r\n            country_list: [],\r\n            list: [],\r\n            quotation_list: [],\r\n            client_list: [],\r\n            client_invoice:[],\r\n            paymentShow:false,\r\n            invoice_list:[],\r\n            cont_invoice:[],\r\n            pagenumber:1,\r\n            perpage:10,\r\n            total_pages:null,\r\n            singleCountry:'',\r\n            newquote:[],\r\n            client_id:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                const singleCountry = country_list.find(country => country.id == localStorage.getItem('countryid'))\r\n                const filtered_contries = country_list.filter(country => country.id == localStorage.getItem('countryid'))\r\n                if(localStorage.getItem('role') == 'admin'){\r\n                    this.setState({country_list,singleCountry})\r\n                }\r\n                else{\r\n                    this.setState({ country_list:filtered_contries,singleCountry })\r\n                }\r\n                // //console.log(country_list)\r\n            })\r\n            // axiosInstance.post(`/quotation/list`).then(res=>{\r\n            //     const list = res.data.response.quotation_list\r\n            //     this.setState({list})\r\n            // })\r\n        axiosInstance.post(`/quotation/filter`,{from_date:this.state.fromDate,client_id:this.state.client_id,to_date:this.state.toDate,s:this.state.emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n            .then(res => {\r\n                console.log(res)\r\n                if(localStorage.getItem('countryid') === null){\r\n                    this.setState({ list:[], quotation_list:[], parent_list:[] })\r\n\r\n                }\r\n                else{\r\n                \r\n                const total_pages = res.data.response.paging_details.total\r\n                // const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = res.data.response.quotation_list\r\n                // console.log(parent_list)\r\n                \r\n                // console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ parent_list,total_pages })\r\n                }\r\n            })\r\n        axiosInstance.post(`/client/list`)\r\n            .then(res => {\r\n                const client_list = res.data.response.client_list\r\n                this.setState({ client_list })\r\n                // //console.log(client_list, 'client_list');\r\n            })\r\n        axiosInstance.post(`/invoice/list`)\r\n            .then(res => {\r\n                const invoice_list = res.data.response.invoice_list\r\n                this.setState({invoice_list})\r\n                //console.log(invoice_list, 'invoice');\r\n            })\r\n    }\r\n    childQuote = (id) => {\r\n\r\n        const { status } = this.state;\r\n        // console.log(id)\r\n        // const childQuote_list = list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n        //console.log(childQuote_list, 'childQuote_list')\r\n        axiosInstance.post(`quotation/sub_list`,{id}).then(res=>{\r\n            const childQuote_list = res.data.response.sub_quotation_list\r\n            // console.log(childQuote_list)\r\n            this.setState({ childQuote_list, visible: !this.state.visible, visibleParent: id })\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value, },()=>this.onChangeDate())\r\n        \r\n    }\r\n    onChangeDate = () =>{\r\n        const {fromDate,toDate,pagenumber,perpage,emailSearch,status} = this.state\r\n        const data = {from_date:fromDate,to_date:toDate,page:pagenumber,client_id:this.state.client_id,per_page:perpage,country_id:localStorage.getItem('countryid'),job_status:status,s:emailSearch}\r\n        axiosInstance.post(`quotation/filter`,data)\r\n    .then(res=>{\r\n        const parent_list = res.data.response.quotation_list\r\n        // const total_pages = res.data.response.paging_details.total\r\n        // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n        // console.log(parent_list)\r\n        this.setState({parent_list})\r\n    })\r\n    }\r\n    statusFilter = (e) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,client_id:this.state.client_id,to_date:toDate,s:emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ [e.target.name]: e.target.value })\r\n        window.location.replace(`/cwr-summary/${e.target.value}`)\r\n    }\r\n    countryFilter = (name, value) => {\r\n        const { quotation_list, client_list, status } = this.state;\r\n        const client = client_list.find(client => client.country === value)\r\n        let filter = ''\r\n        if (client !== undefined) {\r\n            filter = quotation_list.filter(quote => quote.client_id === client.id && quote.job_status === status)\r\n        }\r\n        this.setState({ [name]: value, parent_list: filter })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    clientFilter = (name, value) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,client_id:value,s:emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ client_id: value })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    // quotationfilter = (quoteno) => {\r\n    //     const { quotation_list, client_list, status } = this.state;\r\n    //     const filter = quotation_list.filter(quote=>quote.quotation_num === quoteno)\r\n    //     this.setState({parent_list:filter})\r\n    // }\r\n    search = (e) =>{\r\n        const {fromDate,toDate,status} = this.state\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,client_id:this.state.client_id,to_date:toDate,s:e.target.value,page:1,job_status:status,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res=>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({emailSearch:e.target.value})\r\n    }\r\n    setDate = (date, name) => {\r\n        this.setState({\r\n            [name]: date\r\n        })\r\n    }\r\n\r\n    clientName = (client_id) => {\r\n        ////console.log(this.state.client_list, parseInt(client_id))\r\n        const client = this.state.client_list.find(client => parseInt(client.id) === parseInt(client_id))\r\n        if (client !== undefined) {\r\n            return client.name\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    onDelete = (id, client_invoice, cont_invoice,) => {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"Deleted Record can be found in Bin for 7 Days\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n            .then((willDelete) => {\r\n                if (willDelete) {\r\n                    axiosInstance.post(`/quotation/trash`, { id })\r\n                        .then((res) => {\r\n                            //console.log(res);\r\n                            if (res.data.message.success !== undefined) {\r\n                                Alert(\"success\", \"success\", `${res.data.message.success}`,)\r\n                                this.componentDidMount()\r\n                                this.setState({ visible: false })\r\n                            } else {\r\n                                Alert(\"error\", \"error\", `${res.data.message.error}`,)\r\n                            }\r\n                        })\r\n                } else {\r\n                    swal(\"Quotation Record is safe!\");\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                //console.log(error);\r\n            })\r\n    }\r\n    trashQuote = (id, client_invoice, cont_invoice, name,sublist) => {\r\n        // const { childQuote_list } = this.state\r\n        if (name === 'child') {\r\n            this.onDelete(id, client_invoice, cont_invoice,)\r\n        } else {\r\n            // const childQuote_list = this.state.list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n            if (sublist != 0) {\r\n                Alert('error', 'error', 'Parent quotation could not be deleted without deleting the child first!..')\r\n            } else {\r\n                this.onDelete(id, client_invoice, cont_invoice,)\r\n            }\r\n        }\r\n    }\r\n    pagination = (condition) =>{\r\n        const { pagenumber,perpage,total_pages,fromDate,toDate } = this.state\r\n        if(condition === 'inc')\r\n        {\r\n            const page = pagenumber >= total_pages ? total_pages:pagenumber+1\r\n            this.setState({pagenumber:page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,client_id:this.state.client_id,s:this.state.emailSearch,job_status:this.state.status,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n        else{\r\n            const page = pagenumber <= 1 ? 1 : pagenumber-1\r\n            this.setState({pagenumber: page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,job_status:this.state.status,client_id:this.state.client_id,s:this.state.emailSearch,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n    }\r\n   \r\n\r\n    renderComponent = (id) => {\r\n        // window.location.replace(`/editQuotation/${id}`)\r\n        this.setState({\r\n            editQuote: true,\r\n            quote_id: id,\r\n        })\r\n    }\r\n    Back = () => {\r\n        this.setState({\r\n            editQuote: false,\r\n            quote_id: null,\r\n        })\r\n        this.componentDidMount()\r\n    }\r\n\r\n    paymentChange = (id,data) =>{\r\n        const { parent_list,invoice_list,paymentShow,childQuote_list} = this.state\r\n\r\n                if(data == 'child'){\r\n                    // console.log(id)\r\n                        const newquote = childQuote_list.find(quote=>quote.id == id)\r\n                        const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        this.setState({client_invoice,cont_invoice,newquote})\r\n                        this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                else{\r\n                    // console.log(id)\r\n                    const newquote = parent_list.find(quote=>quote.id == id)\r\n                    const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    this.setState({client_invoice,cont_invoice,newquote})\r\n                    this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                \r\n    }\r\n    payment = (id) =>{\r\n        const { paymentShow } = this.state\r\n        this.setState({paymentShow:!this.state.paymentShow})\r\n    }\r\n\r\n    handleTrash = () =>{\r\n        // axiosInstance.post(``)\r\n    }\r\n    render() {\r\n        const { visible,pagenumber,client_list,singleCountry, paymentShow,visibleParent,client_invoice, editQuote, childQuote_list, parent_list, quotation_list, country_list, emailSearch, countrySearch, fromDate, toDate, status, } = this.state;\r\n        return (\r\n            <div>\r\n                {editQuote ? <AddQuotation id={this.state.quote_id} Back={this.Back} /> :\r\n                    <div className=\"component\">\r\n                        <h4>{singleCountry !== undefined?singleCountry.name:''}</h4>\r\n                        {/* <Card>\r\n                        <Row >\r\n                        <Col lg={2}></Col>\r\n                        <Col lg={2}>\r\n                            <Link to='/cwr-summary/pending'>\r\n                            <Radio label='Pending'  />\r\n                            </Link>\r\n                            </Col>\r\n                            <Col lg={2}>\r\n                            <Link to='/cwr-summary/completed'>\r\n                            <Radio label='Completed'  />\r\n                            </Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/cancelled'>\r\n                                <Radio label='Cancelled'  /></Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/allQ'>\r\n                                <Radio label='All Qutotations' checked />\r\n                                </Link>\r\n                                </Col>\r\n                        </Row>                            \r\n                        </Card> */}\r\n                        <Card style={{ marginTop: \"30px\" }} >\r\n                            <Row  >\r\n                                <Col lg={3}>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name='emailSearch'\r\n                                        placeholder=\"Search\"\r\n                                        value={emailSearch}\r\n                                        onChange={this.search}\r\n                                    />\r\n                                    <button className='iconButtton' >\r\n                                        <i className=\"fa fa-search\" ></i>\r\n                                    </button><br />\r\n                                    {/* <Autocomplete\r\n                                        options={quotation_list!==undefined?quotation_list:[]}\r\n                                        onChange={(e, value) => value !== null ? this.quotationfilter(value.quotation_num) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.quotation_num}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Quotation' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    /> */}\r\n                                </Col>\r\n                                {/* <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={country_list}\r\n                                        onChange={(e, value) => value !== null ? this.countryFilter('countrySearch', value.id) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Country' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col> */}\r\n                                <Col lg={1}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"fromDate\"\r\n                                        value={fromDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br /> \r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"toDate\"\r\n                                        value={toDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Form.Control as='select' value={status} name=\"status\" onChange={this.statusFilter} >\r\n                                        <option value='' disabled selected> Status </option>\r\n                                        <option value='2' selected>Pending</option>\r\n                                        <option value='1'>Completed</option>\r\n                                        <option value='3'>Cancelled</option>\r\n                                        <option value='4'>All Quotations</option>\r\n                                    </Form.Control><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={singleCountry.id === '' ? client_list : client_list.filter(client => parseInt(client.country) === parseInt(singleCountry.id))}\r\n                                        onChange={(e, value) => value !== null ? this.clientFilter('client_id', value.id) :''}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Client' {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Link to='/addQuotation' >\r\n                                        <Popup content=\"Add Quotation\" trigger={<button className='addIcon' >\r\n                                        <i className=\"fa fa-plus\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                    </Link>\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Popup content=\"Refresh\"\r\n                                    trigger={<button className='addIcon' onClick={()=>window.location.reload()}>\r\n                                        <i className=\"fa fa-retweet\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <Popup content=\"Recycle Bin\"\r\n                                    trigger={<Link to=\"/trash\"><button className='addIcon' onClick={this.handleTrash}>\r\n                                        <i className=\"fa fa-trash\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button></Link>}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\" }}>\r\n                            <Row>\r\n                                <Table style={{ backgroundColor: \"white\" }} responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>EDIT</th>\r\n                                            <th>VIEW_INV</th>\r\n                                            <th >QUOTE NO</th>\r\n                                            <th >DATE ISSUED</th>\r\n                                            <th >CLIENT</th>\r\n                                            <th >DESCRIPTION</th>\r\n                                            <th style={{textAlign:'right'}}>QUOTE AMT</th>\r\n                                            <th >QUOTE APPROVAL</th>\r\n                                            <th>CLIENT PO</th>\r\n                                            <th>MARGIN %</th>\r\n                                            <th style={{textAlign:'right'}}>MARGIN AMT</th>\r\n                                            <th>CCM TKT NO</th>\r\n                                            <th>COMPLETION DATE</th>\r\n                                            <th>DELETE</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {/* {quotation_list.map(this.renderTable)} */}\r\n                                        {parent_list.length !== 0 && parent_list.map((quote, i) =>\r\n                                            <>\r\n                                                <tr key={quote.quotation_num}\r\n                                                \r\n                                                    className={quote.job_complete_date !== '0000-00-00'? \"greenish\" : \"\"}\r\n                                                    onClick={() => this.childQuote(quote.id)}\r\n                                                    style={{ height: \"50px\", padding: \"10px\" }}\r\n                                                    >\r\n                                                    \r\n                                                    <td>\r\n                                                    {/* <Link to={`/editQuotation/${quote.id}`}> */}\r\n                                                    <button onClick={() => this.renderComponent(quote.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", }} ></i></button>\r\n                                                    {/* </Link> */}\r\n                                                    </td>\r\n                                                    <td><button onClick={()=>this.paymentChange(quote.id)} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                    {quote.sub_list == 0 ?<td> {quote.quotation_num} </td>:\r\n                                                    <Popup content=\"View Child Quote\" trigger={<td style={{cursor:'pointer'}}> {quote.quotation_num} </td>}/>}\r\n                                                    \r\n                                                    <td >{quote.qut_date_issue !== '0000-00-00' ? quote.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                    <td >{this.clientName(quote.client_id)} </td>\r\n                                                    <td >{quote.description} </td>\r\n                                                    <td style={{textAlign:'right'}}>{quote.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td >{quote.qut_status === '1' ? 'Approved' : quote.qut_status === '2' ? 'Pending' : quote.qut_status === '3' ? 'Canceled' : quote.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                    <td > {quote.client_po} </td>\r\n                                                    {parseInt(quote.margin_amount) > 0 ?\r\n                                                        <>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                `${quote.margin}%`:''} </td>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                        </>\r\n                                                        : parseInt(quote.margin_amount) === 0 ?\r\n                                                            <>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00 %' :''}</td>\r\n                                                                <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00' :''}</td>\r\n                                                            </> :\r\n                                                            <>\r\n                                                                <td ></td>\r\n                                                                <td style={{ color: 'red',textAlign:'right' }} >{quote.qut_status === '1' ?\r\n                                                                    quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                            </>}\r\n                                                    <td >{quote.ticket_no !== '0' ? quote.ticket_no : ''} </td>\r\n                                                    <td >{quote.job_complete_date !== '0000-00-00' ? quote.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                    <td><button onClick={(e) => this.trashQuote(quote.id, quote.client_invoice_id, quote.cont_invoice_id, 'parent',quote.sub_list)} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px' }} ></i></button></td>\r\n                                                </tr>\r\n                                                <React.Fragment >\r\n                                                    {(visible === true && visibleParent == quote.id) && childQuote_list.map(child =>\r\n                                                        <tr key={child.quotation_num}\r\n                                                            className=\"rowtable\"\r\n                                                            style={{ height: \"50px\", padding: \"10px\" }}>\r\n                                                            <td><button onClick={() => this.renderComponent(child.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                            <td><button onClick={()=>this.paymentChange(child.id,\"child\")} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                            <td > {child.quotation_num} </td>\r\n                                                            <td >{child.qut_date_issue !== '0000-00-00' ? child.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                            <td >{this.clientName(child.client_id)} </td>\r\n                                                            <td >{child.description} </td>\r\n                                                            <td  style={{textAlign:'right'}}>{child.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                            <td >{child.qut_status === '1' ? 'Approved' : child.qut_status === '2' ? 'Pending' : child.qut_status === '3' ? 'Canceled' : child.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                            <td > {child.cont_po_num} </td>\r\n                                                            {parseInt(child.margin_amount) > 0 ?\r\n                                                                <>\r\n                                                                    <td style={{textAlign:'right'}}>{`${child.margin}%`} </td>\r\n                                                                    <td  style={{textAlign:'right'}}>{child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                                </>\r\n                                                                : parseInt(child.margin_amount) === 0 ?\r\n                                                                    <>\r\n                                                                        <td ></td>\r\n                                                                        <td ></td>\r\n                                                                    </> : <>\r\n                                                                        <td ></td>\r\n                                                                        <td style={{ color: 'red',textAlign:\"right\" }} >{child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                                    </>}\r\n                                                            <td >{child.ticket_no !== '0' ? child.ticket_no : ''} </td>\r\n                                                            <td >{child.job_complete_date !== '0000-00-00' ? child.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                            <td><button onClick={(e) => this.trashQuote(child.id, child.client_invoice_id, child.cont_invoice_id, 'child')} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px', backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                        </tr>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            </>\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Row>\r\n                        </Card>\r\n                        <div style={{display:'flex',alignItems:'center',justifyContent:'center',marginTop:\"50px\"}}>\r\n                                <button  style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('dec')}><i className=\"fa fa-arrow-left\" style={{fontSize:\"15px\"}}></i></button>\r\n                                <p style={{marginLeft:\"20px\",fontSize:\"18px\",marginTop:\"15px\"}}>{pagenumber}</p>\r\n                                <button \r\n                                    style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('inc')}><i className=\"fa fa-arrow-right\" style={{fontSize:\"15px\"}}></i></button>\r\n                            </div>\r\n                    </div>}\r\n                    {/* <Payment\r\n                        show={paymentShow}\r\n                        handleClose={this.paymentChange}\r\n                        list={client_invoice}\r\n                        onDelete={this.onDelete}\r\n                        user='Client'\r\n                    /> */}\r\n                    <Clientcontinvoice\r\n                    show={paymentShow}\r\n                    handleClose={this.payment}\r\n                    client_list={client_invoice}\r\n                    cont_list={this.state.cont_invoice}\r\n                    quote={this.state.newquote}\r\n                    />\r\n                   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// const renderInvoice = () => {\r\n//     return (\r\n//         <Card>\r\n\r\n//         </Card>\r\n//     )\r\n// }\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\Pending.js",["608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n    InputGroup,\r\n    FormControl,\r\n} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport axiosInstance from '../../../utils/axiosinstance'\r\nimport axios from 'axios'\r\nimport Invoice from '../../../Invoice'\r\nimport DatePicker from \"react-datepicker\";\r\nimport AddQuotation from '.././AddQuotation'\r\nimport \"bootstrap/js/src/collapse.js\";\r\nimport { Alert } from '../../../utils/Utilities'\r\nimport { Radio } from 'semantic-ui-react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport swal from 'sweetalert'\r\nimport Swal from 'sweetalert2'\r\nimport Payment from '.././invoice/Payment'\r\nimport Clientcontinvoice from '.././invoice/Clientcontinvoice';\r\nimport { Popup } from 'semantic-ui-react'\r\nimport EditQuotation from '.././EditQuotation';\r\nimport SearchAccordion from './SearchAccordion';\r\nvar token = localStorage.getItem('access_token')\r\n\r\nexport default class Pending extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote_id: null,\r\n            emailSearch: '',\r\n            countrySearch: '',\r\n            fromDate: '',\r\n            toDate: '',\r\n            status: '2',\r\n\r\n            visible: false,\r\n            childQuote_list: [],\r\n            parent_list: [],\r\n\r\n            addQuotation: false,\r\n            country_list: [],\r\n            list: [],\r\n            quotation_list: [],\r\n            client_list: [],\r\n            client_invoice:[],\r\n            paymentShow:false,\r\n            invoice_list:[],\r\n            cont_invoice:[],\r\n            pagenumber:1,\r\n            perpage:10,\r\n            total_pages:null,\r\n            singleCountry:'',\r\n            newquote:[],\r\n            client_id:''\r\n        }\r\n        this.clientName=this.clientName.bind(this)\r\n        this.paymentChange=this.paymentChange.bind(this)\r\n        this.renderComponent=this.renderComponent.bind(this)\r\n        this.trashQuote=this.trashQuote.bind(this)\r\n        this.childQuote=this.childQuote.bind(this)\r\n        this.pagination1=this.pagination1.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        axiosInstance.post(`/country/list`)\r\n            .then((res) => {\r\n                const country_list = res.data.response.country_list\r\n                const singleCountry = country_list.find(country => country.id == localStorage.getItem('countryid'))\r\n                const filtered_contries = country_list.filter(country => country.id == localStorage.getItem('countryid'))\r\n                if(localStorage.getItem('role') == 'admin'){\r\n                    this.setState({country_list,singleCountry})\r\n                }\r\n                else{\r\n                    this.setState({ country_list:filtered_contries,singleCountry })\r\n                }\r\n                // //console.log(country_list)\r\n            })\r\n            // axiosInstance.post(`/quotation/list`).then(res=>{\r\n            //     const list = res.data.response.quotation_list\r\n            //     this.setState({list})\r\n            // })\r\n        axiosInstance.post(`/quotation/filter`,{from_date:this.state.fromDate,client_id:this.state.client_id,to_date:this.state.toDate,s:this.state.emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n            .then(res => {\r\n                console.log(res)\r\n                if(localStorage.getItem('countryid') === null){\r\n                    this.setState({ list:[], quotation_list:[], parent_list:[] })\r\n\r\n                }\r\n                else{\r\n                \r\n                const total_pages = res.data.response.paging_details.total\r\n                // const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = res.data.response.quotation_list\r\n                // console.log(parent_list)\r\n                \r\n                // console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ parent_list,total_pages })\r\n                }\r\n            })\r\n        axiosInstance.post(`/client/list`)\r\n            .then(res => {\r\n                const client_list = res.data.response.client_list\r\n                this.setState({ client_list })\r\n                // //console.log(client_list, 'client_list');\r\n            })\r\n        axiosInstance.post(`/invoice/list`)\r\n            .then(res => {\r\n                const invoice_list = res.data.response.invoice_list\r\n                this.setState({invoice_list})\r\n                //console.log(invoice_list, 'invoice');\r\n            })\r\n    }\r\n    childQuote = (id) => {\r\n\r\n        const { status } = this.state;\r\n        // console.log(id)\r\n        // const childQuote_list = list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n        //console.log(childQuote_list, 'childQuote_list')\r\n        axiosInstance.post(`quotation/sub_list`,{id}).then(res=>{\r\n            const childQuote_list = res.data.response.sub_quotation_list\r\n            // console.log(childQuote_list)\r\n            this.setState({ childQuote_list, visible: !this.state.visible, visibleParent: id })\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value, },()=>this.onChangeDate())\r\n        \r\n    }\r\n    onChangeDate = () =>{\r\n        const {fromDate,toDate,pagenumber,perpage,emailSearch,status} = this.state\r\n        const data = {from_date:fromDate,to_date:toDate,page:pagenumber,client_id:this.state.client_id,per_page:perpage,country_id:localStorage.getItem('countryid'),job_status:status,s:emailSearch}\r\n        axiosInstance.post(`quotation/filter`,data)\r\n    .then(res=>{\r\n        const parent_list = res.data.response.quotation_list\r\n        // const total_pages = res.data.response.paging_details.total\r\n        // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n        // console.log(parent_list)\r\n        this.setState({parent_list})\r\n    })\r\n    }\r\n    statusFilter = (e) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,client_id:this.state.client_id,s:emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ [e.target.name]: e.target.value })\r\n       \r\n        window.location.replace(`/cwr-summary/${e.target.value}`)\r\n    }\r\n    countryFilter = (name, value) => {\r\n        const { quotation_list, client_list, status } = this.state;\r\n        const client = client_list.find(client => client.country === value)\r\n        let filter = ''\r\n        if (client !== undefined) {\r\n            filter = quotation_list.filter(quote => quote.client_id === client.id && quote.job_status === status)\r\n        }\r\n        this.setState({ [name]: value, parent_list: filter })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    clientFilter = (name, value) => {\r\n        const { quotation_list,emailSearch,fromDate,toDate } = this.state;\r\n        // const parent_list = quotation_list.filter(quote => quote.job_status == e.target.value)\r\n        // //console.log( e.target.value,parent_list)\r\n        // axiosInstance.post(`quotation/filter`,{job_status:e.target.value})\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,client_id:value,s:emailSearch,job_status:this.state.status,page:this.state.pagenumber,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res =>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // console.log(parent_list,\"Parent\")\r\n            this.setState({parent_list})\r\n        })\r\n        this.setState({ client_id: value })\r\n        //console.log(filter, 'country filter')\r\n    }\r\n\r\n    // quotationfilter = (quoteno) => {\r\n    //     const { quotation_list, client_list, status } = this.state;\r\n    //     const filter = quotation_list.filter(quote=>quote.quotation_num === quoteno)\r\n    //     this.setState({parent_list:filter})\r\n    // }\r\n    search = (e) =>{\r\n        const {fromDate,toDate,status} = this.state\r\n        axiosInstance.post(`quotation/filter`,{from_date:fromDate,to_date:toDate,s:e.target.value,client_id:this.state.client_id,page:1,job_status:status,per_page:this.state.perpage,country_id:localStorage.getItem('countryid')})\r\n        .then(res=>{\r\n            const parent_list = res.data.response.quotation_list\r\n            // const parent_list = list.filter(li => li.country_id == localStorage.getItem('countryid'))\r\n            this.setState({parent_list})\r\n            // console.log(this.state.parent_list,'parent')\r\n        })\r\n        this.setState({emailSearch:e.target.value})\r\n    }\r\n    setDate = (date, name) => {\r\n        this.setState({\r\n            [name]: date\r\n        })\r\n    }\r\n\r\n    clientName = (client_id) => {\r\n        ////console.log(this.state.client_list, parseInt(client_id))\r\n        const client = this.state.client_list.find(client => parseInt(client.id) === parseInt(client_id))\r\n        if (client !== undefined) {\r\n            return client.name\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    onDelete = (id, client_invoice, cont_invoice,) => {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: \"Deleted Record can be found in Bin for 7 Days\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n            .then((willDelete) => {\r\n                if (willDelete) {\r\n                    axiosInstance.post(`/quotation/trash`, { id })\r\n                        .then((res) => {\r\n                            //console.log(res);\r\n                            if (res.data.message.success !== undefined) {\r\n                                Alert(\"success\", \"success\", `${res.data.message.success}`,)\r\n                                this.componentDidMount()\r\n                                this.setState({ visible: false })\r\n                            } else {\r\n                                Alert(\"error\", \"error\", `${res.data.message.error}`,)\r\n                            }\r\n                        })\r\n                } else {\r\n                    swal(\"Quotation Record is safe!\");\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                //console.log(error);\r\n            })\r\n    }\r\n    trashQuote = (id, client_invoice, cont_invoice, name,sublist) => {\r\n        // const { childQuote_list } = this.state\r\n        if (name === 'child') {\r\n            this.onDelete(id, client_invoice, cont_invoice,)\r\n        } else {\r\n            // const childQuote_list = this.state.list.filter(quote => parseInt(quote.parent_id) === parseInt(id))\r\n            if (sublist != 0) {\r\n                Alert('error', 'error', 'Parent quotation could not be deleted without deleting the child first!..')\r\n            } else {\r\n                this.onDelete(id, client_invoice, cont_invoice,)\r\n            }\r\n        }\r\n    }\r\n    pagination = (condition) =>{\r\n        const { pagenumber,perpage,total_pages,fromDate,toDate } = this.state\r\n        if(condition === 'inc')\r\n        {\r\n            const page = pagenumber >= total_pages ? total_pages:pagenumber+1\r\n            this.setState({pagenumber:page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,s:this.state.emailSearch,job_status:this.state.status,client_id:this.state.client_id,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n        else{\r\n            const page = pagenumber <= 1 ? 1 : pagenumber-1\r\n            this.setState({pagenumber: page})\r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,job_status:this.state.status,s:this.state.emailSearch,client_id:this.state.client_id,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n        }\r\n    }\r\n\r\n    pagination1 = (page) =>{\r\n        const { pagenumber,perpage,total_pages,fromDate,toDate } = this.state\r\n       \r\n            localStorage.getItem('countryid') !==null && axiosInstance.post(`/quotation/filter`,{page,per_page:perpage,s:this.state.emailSearch,job_status:this.state.status,client_id:this.state.client_id,country_id:localStorage.getItem('countryid'),from_date:fromDate,to_date:toDate})\r\n            .then(res => {\r\n                //console.log(res)\r\n                const list = res.data.response.quotation_list\r\n                // //console.log(list)\r\n                const quotation_list = list.filter(quote => quote.parent_id === '0')\r\n                const parent_list = quotation_list.filter(quote => quote.job_status == this.state.status)\r\n                // //console.log(quotation_list, list, \"quotation_list\")\r\n                this.setState({ list, quotation_list, parent_list })\r\n            })\r\n    }\r\n   \r\n   \r\n    renderComponent = (id) => {\r\n        // window.location.replace(`/editQuotation/${id}`)  \r\n        this.setState({\r\n            editQuote: true,\r\n            quote_id: id,        \r\n        })\r\n        // console.log(this.state.parent_list,'before')\r\n    }\r\n    Back = () => {       \r\n        this.setState({\r\n            editQuote: false,\r\n            quote_id: null,\r\n        })\r\n        // console.log(this.state.parent_list,'after')\r\n        this.componentDidMount()\r\n    }\r\n\r\n    paymentChange = (id,data) =>{\r\n        const { parent_list,invoice_list,paymentShow,childQuote_list} = this.state\r\n\r\n                if(data == 'child'){\r\n                    // console.log(id)\r\n                        const newquote = childQuote_list.find(quote=>quote.id == id)\r\n                        const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                        this.setState({client_invoice,cont_invoice,newquote})\r\n                        this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                else{\r\n                    // console.log(id)\r\n                    const newquote = parent_list.find(quote=>quote.id == id)\r\n                    const client_invoice =  newquote.client_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    const cont_invoice = newquote.cont_invoice_id.map(clinv => invoice_list.find(inv=>inv.id == clinv))\r\n                    this.setState({client_invoice,cont_invoice,newquote})\r\n                    this.setState({paymentShow:!this.state.paymentShow})\r\n                }\r\n                \r\n    }\r\n    payment = (id) =>{\r\n        const { paymentShow } = this.state\r\n        this.setState({paymentShow:!this.state.paymentShow})\r\n    }\r\n\r\n    handleTrash = () =>{\r\n        // axiosInstance.post(``)\r\n    }\r\n    render() {\r\n        const { visible,pagenumber,singleCountry, client_list,paymentShow,visibleParent,client_invoice, editQuote, childQuote_list, parent_list, quotation_list, country_list, emailSearch, countrySearch, fromDate, toDate, status, } = this.state;\r\n        return (\r\n            <div>\r\n                {editQuote ? <AddQuotation id={this.state.quote_id} Back={this.Back} /> :\r\n                    <div className=\"component\">\r\n                        <h4>{singleCountry !== undefined?singleCountry.name:''}</h4>\r\n                        {/* <Card>\r\n                        <Row >\r\n                        <Col lg={2}></Col>\r\n                            <Col lg={2}>\r\n                            <Link to='/cwr-summary/pending'>\r\n                            <Radio label='Pending' checked />\r\n                            </Link>\r\n                            </Col>\r\n                            <Col lg={2}>\r\n                            <Link to='/cwr-summary/completed'>\r\n                            <Radio label='Completed' />\r\n                            </Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/cancelled'>\r\n                                <Radio label='Cancelled'  /></Link>\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                <Link to='/cwr-summary/allQ'>\r\n                                <Radio label='All Qutotations' />\r\n                                </Link>\r\n                                </Col>\r\n                        </Row>                            \r\n                        </Card> */}\r\n                        <Card style={{ marginTop: \"30px\" }} >\r\n                            <Row  >\r\n                                <Col lg={2}>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name='emailSearch'\r\n                                        placeholder=\"Search\"\r\n                                        value={emailSearch}\r\n                                        onChange={this.search}\r\n                                    />\r\n                                    <button className='iconButtton' >\r\n                                        <i className=\"fa fa-search\" ></i>\r\n                                    </button><br />\r\n                                    {/* <Autocomplete\r\n                                        options={quotation_list!==undefined?quotation_list:[]}\r\n                                        onChange={(e, value) => value !== null ? this.quotationfilter(value.quotation_num) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.quotation_num}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Quotation' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    /> */}\r\n                                </Col>\r\n                                {/* <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={country_list}\r\n                                        onChange={(e, value) => value !== null ? this.countryFilter('countrySearch', value.id) : this.setState({ parent_list: quotation_list.filter(quote => quote.job_status === status) })}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Country' type=\"text\" {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col> */}\r\n                                <Col lg={2}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"fromDate\"\r\n                                        value={fromDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br /> \r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        name=\"toDate\"\r\n                                        value={toDate}\r\n                                        onChange={this.onChange}\r\n                                    /><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Form.Control as='select' value={status} name=\"status\" onChange={this.statusFilter} >\r\n                                        <option value='' disabled selected> Status </option>\r\n                                        <option value='2' selected>Pending</option>\r\n                                        <option value='1'>Completed</option>\r\n                                        <option value='3'>Cancelled</option>\r\n                                        <option value='4'>All Quotations</option>\r\n                                    </Form.Control><br />\r\n                                </Col>\r\n                                <Col lg={2}>\r\n                                    <Autocomplete\r\n                                        options={singleCountry.id === '' ? client_list : client_list.filter(client => parseInt(client.country) === parseInt(singleCountry.id))}\r\n                                        onChange={(e, value) => value !== null ? this.clientFilter('client_id', value.id) :''}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                <Form.Control placeholder='Client' {...params.inputProps} />\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <Row>\r\n                                <Col lg={3}>\r\n                                    <Link to='/addQuotation' >\r\n                                        <Popup content=\"Add Quotation\" trigger={<button className='addIcon' >\r\n                                        <i className=\"fa fa-plus\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                    </Link>\r\n                                </Col>\r\n                                <Col lg={3} >\r\n                                    <Popup content=\"Refresh\"\r\n                                    trigger={<button className='addIcon' onClick={()=>window.location.reload()} >\r\n                                        <i className=\"fa fa-retweet\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button>}/>\r\n                                </Col>\r\n                                <Col lg={3}>\r\n                                    <Popup content=\"Recycle Bin\"\r\n                                    trigger={<Link to=\"/trash\"><button className='addIcon' onClick={this.handleTrash}>\r\n                                        <i className=\"fa fa-trash\" style={{ fontSize: \"20px\", color: \"white\" }}></i>\r\n                                    </button></Link>}/>\r\n                                </Col>\r\n                                </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        {this.state.emailSearch==''?\r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\" }}>\r\n                            <Row>\r\n                                <Table style={{ backgroundColor: \"white\" }} responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>EDIT</th>\r\n                                            <th>VIEW_INV</th>\r\n                                            <th >QUOTE NO</th>\r\n                                            <th >DATE ISSUED</th>\r\n                                            <th >CLIENT</th>\r\n                                            <th >DESCRIPTION</th>\r\n                                            <th style={{textAlign:'right'}}>QUOTE AMT</th>\r\n                                            <th >APPROVAL STATUS</th>\r\n                                            <th>CLIENT PO</th>\r\n                                            <th>MARGIN %</th>\r\n                                            <th style={{textAlign:'right'}}>MARGIN AMT</th>\r\n                                            <th>CCM TKT NO</th>\r\n                                            <th>COMPLETION DATE</th>\r\n                                            <th>DELETE</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {/* {quotation_list.map(this.renderTable)} */}\r\n                                        {parent_list.length !== 0 && parent_list.map((quote, i) =>\r\n                                            <>\r\n                                                <tr key={quote.quotation_num}\r\n                                                \r\n                                                    className={quote.job_complete_date !== '0000-00-00'? \"greenish\" : \"\"}\r\n                                                    onClick={() => this.childQuote(quote.id)}\r\n                                                    style={{ height: \"50px\", padding: \"10px\" }}\r\n                                                    >\r\n                                                    \r\n                                                    <td>\r\n                                                    {/* <Link to={`/editQuotation/${quote.id}`}> */}\r\n                                                    <button onClick={() => this.renderComponent(quote.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", }} ></i></button>\r\n                                                    {/* </Link> */}\r\n                                                    </td>\r\n                                                    <td><button onClick={()=>this.paymentChange(quote.id)} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                    {quote.sub_list == 0 ?<td> {quote.quotation_num} </td>:\r\n                                                    <Popup content=\"View Child Quote\" trigger={<td style={{cursor:'pointer'}}> {quote.quotation_num} </td>}/>}\r\n                                                    \r\n                                                    <td >{quote.qut_date_issue !== '0000-00-00' ? quote.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                    <td >{this.clientName(quote.client_id)} </td>\r\n                                                    <td >{quote.description} </td>\r\n                                                    <td style={{textAlign:'right'}}>{quote.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td >{quote.qut_status === '1' ? 'Approved' : quote.qut_status === '2' ? 'Pending' : quote.qut_status === '3' ? 'Canceled' : quote.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                    <td > {quote.client_po} </td>\r\n                                                    {parseInt(quote.margin_amount) > 0 ?\r\n                                                        <>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                `${quote.margin}%`:''} </td>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                        </>\r\n                                                        : parseInt(quote.margin_amount) === 0 ?\r\n                                                            <>\r\n                                                                <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00 %' :''}</td>\r\n                                                                <td style={{textAlign:'right'}}>{quote.qut_status === '1' ? '0.00' :''}</td>\r\n                                                            </> :\r\n                                                            <>\r\n                                                                <td ></td>\r\n                                                                <td style={{ color: 'red',textAlign:'right' }} >{quote.qut_status === '1' ?\r\n                                                                    quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                            </>}\r\n                                                    <td >{quote.ticket_no !== '0' ? quote.ticket_no : ''} </td>\r\n                                                    <td >{quote.job_complete_date !== '0000-00-00' ? quote.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                    <td><button onClick={(e) => this.trashQuote(quote.id, quote.client_invoice_id, quote.cont_invoice_id, 'parent',quote.sub_list)} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px' }} ></i></button></td>\r\n                                                </tr>\r\n                                                <React.Fragment >\r\n                                                    {(visible === true && visibleParent == quote.id) && childQuote_list.map(child =>\r\n                                                        <tr key={child.quotation_num}\r\n                                                            className=\"rowtable\"\r\n                                                            style={{ height: \"50px\", padding: \"10px\" }}>\r\n                                                            <td><button onClick={() => this.renderComponent(child.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                            <td><button onClick={()=>this.paymentChange(child.id,\"child\")} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                            <td > {child.quotation_num} </td>\r\n                                                            <td >{child.qut_date_issue !== '0000-00-00' ? child.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                            <td >{this.clientName(child.client_id)} </td>\r\n                                                            <td >{child.description} </td>\r\n                                                            <td  style={{textAlign:'right'}}>{child.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                            <td >{child.qut_status === '1' ? 'Approved' : child.qut_status === '2' ? 'Pending' : child.qut_status === '3' ? 'Canceled' : child.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                            <td > {child.cont_po_num} </td>\r\n                                                            {parseInt(child.margin_amount) > 0 ?\r\n                                                                <>\r\n                                                                    <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                        `${child.margin}%`:''} </td>\r\n                                                                    <td  style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                        child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                </>\r\n                                                                : parseInt(child.margin_amount) === 0 ?\r\n                                                                    <>\r\n                                                                        <td ></td>\r\n                                                                        <td ></td>\r\n                                                                    </> : <>\r\n                                                                        <td ></td>\r\n                                                                        <td style={{ color: 'red',textAlign:\"right\" }} >{quote.qut_status === '1' ?\r\n                                                                            child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                    </>}\r\n                                                            <td >{child.ticket_no !== '0' ? child.ticket_no : ''} </td>\r\n                                                            <td >{child.job_complete_date !== '0000-00-00' ? child.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                            <td><button onClick={(e) => this.trashQuote(child.id, child.client_invoice_id, child.cont_invoice_id, 'child')} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px', backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                        </tr>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            </>\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </Row>\r\n                        </Card>:\r\n                        <SearchAccordion \r\n                        search={this.state.emailSearch}\r\n                        list={parent_list}\r\n                        paymentChange={this.paymentChange}\r\n                        visible={visible}\r\n                        visibleParent={visibleParent}\r\n                        childQuote_list={childQuote_list}\r\n                        clientName={this.clientName}\r\n                        renderComponent={this.renderComponent}\r\n                        trashQuote={this.trashQuote}\r\n                        childQuote={this.childQuote}\r\n                        pagination={this.pagination1}\r\n                        pagenumber={pagenumber}\r\n                        totalPages={this.state.total_pages}\r\n                        />}\r\n                        {this.state.emailSearch==''?\r\n                        <div style={{display:'flex',alignItems:'center',justifyContent:'center',marginTop:\"50px\"}}>\r\n                                <button  style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('dec')}><i className=\"fa fa-arrow-left\" style={{fontSize:\"15px\"}}></i></button>\r\n                                <p style={{marginLeft:\"20px\",fontSize:\"18px\",marginTop:\"15px\"}}>{pagenumber}</p>\r\n                                <button \r\n                                    style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.pagination('inc')}><i className=\"fa fa-arrow-right\" style={{fontSize:\"15px\"}}></i></button>\r\n                            </div>:''}\r\n                    </div>}\r\n                    {/* <Payment\r\n                        show={paymentShow}\r\n                        handleClose={this.paymentChange}\r\n                        list={client_invoice}\r\n                        onDelete={this.onDelete}\r\n                        user='Client'\r\n                    /> */}\r\n                    <Clientcontinvoice\r\n                    show={paymentShow}\r\n                    handleClose={this.payment}\r\n                    client_list={client_invoice}\r\n                    cont_list={this.state.cont_invoice}\r\n                    quote={this.state.newquote}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// const renderInvoice = () => {\r\n//     return (\r\n//         <Card>\r\n\r\n//         </Card>\r\n//     )\r\n// }\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\AddQuotation.js",["649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\EditQuotation.js",["723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786"],"import React, { Component } from 'react'\r\nimport { Card, Container, Row, Col, Form} from 'react-bootstrap'\r\nimport {Label} from 'semantic-ui-react'\r\nimport {Button} from 'semantic-ui-react'\r\nimport CustomTextBox from '../../utils/TextBox'\r\nimport CustomButton from '../../utils/Button'\r\nimport axiosInstance from '../../utils/axiosinstance'\r\nimport CurrencyFormat from 'react-currency-format'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport ClientInvoice from './invoice/ClientInvoice'\r\nimport ContractorInvoice from './invoice/ContractorInvoice';\r\nimport { CategoryList } from '../../utils/CategoryList'\r\nimport { Alert } from '../../utils/Utilities'\r\nimport { DateFormat } from '../../utils/DateFormat'\r\nimport Curreny, { data } from 'currency-codes'\r\nimport $ from 'jquery'\r\nimport swal from 'sweetalert';\r\nimport ContPO from './contractor/ContPO'\r\nimport { getParamByParam } from 'iso-country-currency'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n// import interval from '../../utils/setInterval'\r\nimport SaveAlert from '../../utils/SaveAlert'\r\nimport { Popup } from 'semantic-ui-react'\r\nimport { isEmpty } from 'ramda'\r\nimport axios from 'axios'\r\nexport class EditQuotation extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // this.textLog = React.createRef();\r\n\r\n        this.initialState = {\r\n            quote_id: this.props.match.params.id,\r\n            parent_id: '0',\r\n            parent_QuoteNum: '',\r\n            categories: '',\r\n\r\n            quotation_num: '',\r\n            description: '',\r\n            client_id: '',\r\n            clientName: '',\r\n            client_po: '',\r\n            quotationDate: '',\r\n            quoteAmount: '',\r\n            quotationStatus: '2',\r\n\r\n            margin: 0,\r\n            margin_amount: 0,\r\n\r\n            cont_id: '',\r\n\r\n            clientInvoice_list: [],\r\n            contInvoice_list: [],\r\n\r\n            jobComplete: '',\r\n            ticket_no: '',\r\n            comments2:'',\r\n            quote_comments:'',\r\n            job_status: '2',\r\n            currency: '',\r\n            timestamp:new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(Date.now()),\r\n           \r\n            client_amount: 0,\r\n            cont_amount: 0,\r\n            quote_number:'',\r\n            quote_amount:'',\r\n            client_list: [],\r\n            contractor_list: [],\r\n            client_invoice: [],\r\n            contractor_invoice: [],\r\n            user:{},\r\n            showSnak:false,\r\n            vertical:'top',\r\n            horizontal:'right',\r\n            snaklist:{},\r\n            po_amount:0,\r\n            clientinvaddedClicked:false,\r\n            continvaddedClicked:false,\r\n            POaddClicked:false,\r\n            contractor_id:'',\r\n            rerender:true,\r\n            po_amount:0,\r\n            usrname:'',\r\n            saveshow:false,\r\n        }\r\n        this.client_invoice = {}\r\n        this.cont_invoice = {}\r\n        this.cont_po = {}\r\n        this.state = this.initialState\r\n        this.msg = []\r\n    }\r\n    // componentDidUpdate() {\r\n    //     this.textLog.current.scrollTop = this.textLog.current.scrollHeight;\r\n    // }\r\n    componentDidMount() {\r\n        if(this.props.match.params.id === undefined){\r\n            \r\n        \r\n        axiosInstance.post('/country/list')\r\n        .then(res=>{\r\n            const countries = res.data.response.country_list\r\n            const findcountry = countries.find(country => country.id == localStorage.getItem('countryid'))\r\n            if(findcountry !== undefined){\r\n            const currency = getParamByParam('countryName',findcountry.name,'currency')\r\n            // ////console.log(currency)\r\n            this.setState({currency})\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    axiosInstance.post(`/quotation/search`)\r\n    .then(res=>{\r\n        const quotation_list2 = res.data.response.quotation_list \r\n        this.setState({quotation_list2})\r\n        if (this.props.match.params.id !== undefined) {\r\n            const quote_detail = quotation_list2.find(quote => parseInt(quote.id) === parseInt(this.props.match.params.id))\r\n            const parent_quote = quotation_list2.find(quote => parseInt(quote.id) === parseInt(quote_detail.parent_id))\r\n            this.setState({parent_QuoteNum: parent_quote !== undefined ? parent_quote.quotation_num : '--parent quote--'})\r\n        }\r\n\r\n    })\r\n        axiosInstance.post(`/quotation/list`)\r\n            .then(res => {\r\n                const quotation_list = res.data.response.quotation_list\r\n                const filtered_quotes = quotation_list.filter(quote => quote.country_id == localStorage.getItem('countryid'))\r\n                ////console.log(filtered_quotes)\r\n                const user = res.data.session.users\r\n                ////console.log(user)\r\n                this.setState({ quotation_list,user})\r\n                //////console.log(quotation_list);\r\n                const usrname=res.data.session.users.name\r\n                this.setState({usrname})\r\n\r\n                if (this.props.match.params.id !== undefined) {\r\n                   this.notification(this.props.match.params.id)\r\n                    const quote_detail = quotation_list.find(quote => parseInt(quote.id) === parseInt(this.props.match.params.id))\r\n                    console.log(quote_detail)\r\n                    const parent_quote = quotation_list.find(quote => parseInt(quote.id) === parseInt(quote_detail.parent_id))\r\n                    // this.notification(this.props.match.params.id)\r\n                    this.setState({\r\n                        quote_id: this.props.match.params.id,\r\n                        parent_id: quote_detail.parent_id,\r\n                        parent_QuoteNum: parent_quote !== undefined ? parent_quote.quotation_num : '--parent quote--',\r\n                        categories: quote_detail.categories ==''?'--catogories--':quote_detail.categories,\r\n                        quote_comments:quote_detail.quote_comments,\r\n                        quotation_num: quote_detail.quotation_num,\r\n                        description: quote_detail.description,\r\n                        client_id: quote_detail.client_id,\r\n                        client_po: quote_detail.client_po,\r\n                        quotationDate: DateFormat(quote_detail.qut_date_issue),\r\n                        quoteAmount: parseFloat(quote_detail.quotation_amt).toFixed(2),\r\n                        quotationStatus: quote_detail.qut_status,\r\n                        margin:quote_detail.margin,\r\n                        margin_amount:quote_detail.margin_amount,\r\n                        // cont_id: quote_detail.cont_id,\r\n                        // PO_number: quote_detail.cont_po_num,\r\n                        // PO_amount: parseFloat(quote_detail.cont_po_amt).toFixed(2),\r\n                        // PO_date: DateFormat(quote_detail.cont_date),\r\n                        // workCommence: DateFormat(quote_detail.work_com_date),\r\n                        // workComplete: DateFormat(quote_detail.work_complete_date),\r\n                        clientInvoice_list: quote_detail.client_invoice_id,\r\n                        contInvoice_list: quote_detail.cont_invoice_id,\r\n                        job_status:quote_detail.job_status,\r\n                        jobComplete: DateFormat(quote_detail.job_complete_date),\r\n                        ticket_no: quote_detail.ticket_no !== '0' ? quote_detail.ticket_no : '',\r\n                        currency: quote_detail.currency\r\n\r\n                    }, () => {\r\n                        axiosInstance.post(`/client/list`,{country:localStorage.getItem('countryid')})\r\n                            .then(res => {\r\n                                const client_list = res.data.response.client_list\r\n                                const client = client_list.find(client => parseInt(client.id) === parseInt(quote_detail.client_id))\r\n                                this.setState({ client_list, clientName: client.name })\r\n                                //////console.log(client_list);\r\n                            })\r\n                        axiosInstance.post(`/contractor/list`,{country:localStorage.getItem('countryid')})\r\n                            .then(res => {\r\n                                const contractor_list = res.data.response.contractor_list\r\n                                this.setState({ contractor_list, })\r\n                                // ////console.log(contractor_list);\r\n                            })\r\n                    })\r\n                    axiosInstance.post(`/quotation/activity/${this.props.match.params.id}`)\r\n                    .then(res=> this.handleNotificationResponse(res)) \r\n                } else {\r\n                    axiosInstance.post(`/client/list`,{country:localStorage.getItem('countryid')})\r\n                        .then(res => {\r\n                            const client_list = res.data.response.client_list\r\n                            this.setState({ client_list, })\r\n                            //////console.log(client_list);\r\n                        })\r\n                    axiosInstance.post(`/contractor/list`,{country:localStorage.getItem('countryid')})\r\n                        .then(res => {\r\n                            const contractor_list = res.data.response.contractor_list\r\n                            this.setState({ contractor_list, })\r\n                            //////console.log(contractor_list);\r\n                        })\r\n                }\r\n            })\r\n\r\n            const timestamp = Date.now(); // This would be the timestamp you want to format\r\n\r\n            console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(timestamp));  \r\n\r\n    }\r\n\r\n    marginCalc = () => {\r\n        let { quoteAmount, po_amount ,creditAmount,credit_amount} = this.state;\r\n        // console.log(\"calculated\")\r\n        // console.log(quoteAmount,\"quoteAmount\")\r\n        // console.log(po_amount,\"po_amount\")\r\n        // console.log(creditAmount,\"creditAmount\")\r\n        // console.log(credit_amount,\"credit_amount\")\r\n\r\n        if(credit_amount == NaN || credit_amount == undefined || credit_amount == ''){\r\n            credit_amount=0\r\n        }\r\n        if(creditAmount == NaN || creditAmount == undefined || creditAmount == ''){\r\n            creditAmount=0\r\n        }\r\n\r\n        if (parseInt(quoteAmount) !== 0 || parseInt(po_amount) !== 0) {              // for prevent NaN values\r\n            const marginAmount = parseFloat(quoteAmount) - parseFloat(po_amount) + parseFloat(credit_amount) - parseFloat(creditAmount)\r\n            // console.log(`marginAmount = ${parseFloat(quoteAmount)} - ${parseFloat(po_amount)} + ${parseFloat(credit_amount)} - ${parseFloat(creditAmount)}`)\r\n            let margin = '';\r\n\r\n            if (parseInt(po_amount) !== 0 && parseInt(quoteAmount) > parseInt(po_amount)) {        // to prevent negative values\r\n                margin = parseFloat((marginAmount / parseFloat(po_amount)) * 100).toFixed(1)\r\n            }\r\n            // console.log(margin,\"margin\")\r\n            // console.log(marginAmount,\"marginAmount\")\r\n            this.setState({ margin_amount: parseFloat(marginAmount).toFixed(2), margin })\r\n        }\r\n        else{\r\n            this.setState({ margin_amount: 0.00, margin:0 })\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n    checkboxChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.checked })\r\n    }\r\n    onChangeAmount = (values, name) => {              // amount\r\n        const { formattedValue, value } = values;\r\n        this.setState({ [name]: value }, () => this.marginCalc())\r\n    }\r\n    autoComplete = (e, value, name) => {\r\n        value !== null && this.setState({ [name]: value[name], })\r\n    }\r\n    invoiceAdd = (name, value) => {\r\n        this.state[name].push(value)\r\n        this.setState({clientinvaddedClicked:true})\r\n        this.onEdit('invoice')           // we need to call quotation_edit api for auto store invoice_id to quotattion.\r\n    }\r\n    ContinvoiceAdd = (name, value) => {\r\n        this.state[name].push(value)\r\n        this.setState({continvaddedClicked:true})\r\n        this.onEdit('invoice')           // we need to call quotation_edit api for auto store invoice_id to quotattion.\r\n    }\r\n    invoiceRemove = (name, id) => {\r\n        const index = this.state[name].indexOf(id)\r\n        this.state[name].splice(index, 1)\r\n        this.onEdit('invoice')                  // we need to call quotation_edit api for auto remove invoice_id from quotattion.\r\n    }\r\n    amountChange = (name, value) => {\r\n        this.setState({ [name]: value }, () => this.marginCalc())\r\n    }\r\n    swalAlert = (name, id) => {        // alert message & focus\r\n        swal({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: 'Please fillout ' + name,\r\n            button: {\r\n                OK: true\r\n            },\r\n        }).then((value) => {\r\n            $(\"#\" + id).focus()\r\n        });\r\n    }\r\n    AddClientInv = (data) =>{\r\n        const newData = {...data,quotation_id:this.state.quote_id} \r\n        axiosInstance.post(`/invoice/add`, newData)\r\n        .then((res) => {\r\n            //console.log(res);\r\n            if (res.data.message.success !== undefined) {\r\n                this.msg.push(res.data.message)\r\n                // if(isEmpty(this.cont_invoice) && isEmpty(this.cont_po)){\r\n                this.setState({saveshow:true})\r\n                // }\r\n                this.client_invoice = {}\r\n                this.invoiceAdd('clientInvoice_list', res.data.response.invoice_id)\r\n                // Alert(\"success\", \"success!\", `${res.data.message.success}`,)\r\n            } else {\r\n                    this.msg.push(res.data.message)\r\n                    if(isEmpty(this.cont_invoice) && isEmpty(this.cont_po)){\r\n                    this.setState({saveshow:true})\r\n                }\r\n                this.client_invoice = {}\r\n                    // Alert(\"error\", \"error!\", `${res.data.message.error}`,)\r\n            }\r\n        })\r\n    }\r\n\r\n    AddComment=()=>{\r\n        const newData={comments:this.state.comments2,id:this.state.quote_id}\r\n        axiosInstance.post(`/quotation/addComments`,newData)\r\n        .then((res)=>{\r\n            if (res.data.message.success !== undefined) {\r\n                this.componentDidMount()\r\n                this.setState({comments2:''})\r\n            \r\n                 Alert(\"success\", \"success!\", `${res.data.message.success}`,)\r\n                console.log(res.data.message.success)\r\n            }else {\r\n                Alert(\"error\", \"error!\", `${res.data.message.error}`,)\r\n                console.log(res.data.message.error)\r\n            }\r\n        })\r\n    }\r\n\r\n    AddContInv = (data,temp) =>{\r\n        var newData = {}\r\n        if(temp == 'edit'){\r\n            newData = {...data,quotation_id:this.state.quote_id,po_id:this.state.po_id} \r\n        }\r\n        else{\r\n            newData = {...data,quotation_id:this.state.quote_id} \r\n        }\r\n        axiosInstance.post(`/invoice/add`, newData)\r\n                .then((res) => {\r\n                    //console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        this.msg.push(res.data.message)\r\n                        this.cont_invoice = {}\r\n                        this.invoiceAdd('contInvoice_list', res.data.response.invoice_id)  // add invoice_id to quotation \r\n                        // Alert(\"success\", \"success!\", `${res.data.message.success}`,)\r\n                        // this.onCancel()\r\n                        this.setState({saveshow:true})\r\n                    } else {\r\n                        // Alert(\"error\", \"error!\", `${res.data.message.error}`,)\r\n                        this.msg.push(res.data.message)\r\n                        this.setState({saveshow:true})\r\n                        this.cont_invoice = {}\r\n                    }\r\n                })\r\n    }\r\n\r\n    AddcontPo = (id,data) =>{\r\n        const po_data = {\r\n            quotation_id: id,\r\n            cont_id:this.state.contractor_id,\r\n            quote_number:this.cont_po.quote_number === undefined?'':this.cont_po.quote_number,\r\n            quote_amount:this.cont_po.quote_amount === undefined?'':this.cont_po.quote_amount,\r\n            po_number:this.cont_po.po_number === undefined?'':this.cont_po.po_number,\r\n            po_amount:this.cont_po.po_amount === undefined?'':this.cont_po.po_amount,\r\n            po_issue_date:this.cont_po.po_issue_date === undefined?'':this.cont_po.po_issue_date,\r\n            work_commence:this.cont_po.work_commence === undefined?'':this.cont_po.work_commence,\r\n            work_complete:this.cont_po.work_complete === undefined?'':this.cont_po.work_complete,\r\n        }\r\n        axiosInstance.post(`/quotation/contractor_po_add`, po_data)\r\n                .then((res) => {\r\n                    //console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        this.msg.push(res.data.message)\r\n                        console.log(this.cont_invoice)\r\n                        // if(isEmpty(this.cont_invoice)){\r\n                            this.setState({saveshow:!this.state.saveshow})\r\n                        // }\r\n                        this.cont_po = {}\r\n                        if(this.state.continvaddedClicked == false &&\r\n                            this.cont_invoice.invoiceNo !== undefined){\r\n                                this.setState({po_id:res.data.response.contractorpo_id})\r\n                                const Cont_data = {...data,po_id:res.data.response.contractorpo_id}\r\n                                this.AddContInv(Cont_data)\r\n                            }\r\n                    } else {\r\n                        this.msg.push(res.data.message)\r\n                        // if(isEmpty(this.cont_invoice)){\r\n                            this.setState({saveshow:true})\r\n                        // }\r\n                        this.cont_po = {}\r\n                        // Alert(\"error\", \"error!\", `${res.data.message.error}`,)\r\n                    }\r\n                })\r\n    }\r\n    onSubmit = () => {\r\n        const { categories, parent_id, quotation_num, client_id, quoteAmount, quotationDate, client_po, description, quotationStatus,\r\n            cont_id, PO_number, PO_amount, PO_date, workCommence, workComplete, clientInvoice_list, margin_amount, margin, contInvoice_list, jobComplete, ticket_no, job_status, currency,comments2, quote_amount,\r\n            quote_number,quote_comments} = this.state;\r\n        \r\n        const { invoiceNo, invoiceAmount, issuedDate, receivedDate, receivedAmount, invoiceCredit, creditAmount, creditNote, creditDate} = this.client_invoice\r\n        \r\n        const Invoicedata = {\r\n            cust_type: '1',\r\n            cust_id: client_id,\r\n            num: invoiceNo,\r\n            invoice_amount: invoiceAmount === undefined?'':invoiceAmount,\r\n            invoice_date: issuedDate === undefined?'':issuedDate,\r\n            amount_received_date: receivedDate === undefined?'':receivedDate,\r\n            price: receivedAmount === undefined?'':parseFloat(receivedAmount).toFixed(2),\r\n            credit_note: creditNote === undefined?'':creditNote,\r\n            credit_amount: creditAmount === undefined?'':parseFloat(creditAmount).toFixed(2),\r\n            credit_date: creditDate === undefined ?'':creditDate,\r\n        }\r\n\r\n        const Cont_data = {\r\n            cust_type: '2',\r\n            cust_id: this.state.contractor_id,\r\n            po_id:this.state.po_id,\r\n            num: this.cont_invoice.invoiceNo,\r\n            invoice_amount: this.cont_invoice.invoiceAmount === undefined?'':this.cont_invoice.invoiceAmount,\r\n            invoice_date: this.cont_invoice.receivedDate=== undefined?'':this.cont_invoice.receivedDate,\r\n            amount_received_date: this.cont_invoice.paidDate === undefined?'':this.cont_invoice.paidDate,\r\n            tax_invoice:this.cont_invoice.tax === undefined?'':this.cont_invoice.tax,\r\n            price: this.cont_invoice.paidAmount === undefined?'':parseFloat(this.cont_invoice.paidAmount).toFixed(2),\r\n            credit_note: this.cont_invoice.creditNote  === undefined?'':this.cont_invoice.creditNote,\r\n            credit_amount: this.cont_invoice.creditAmount === undefined ?'':parseFloat(this.cont_invoice.creditAmount).toFixed(2),\r\n            credit_date: this.cont_invoice.creditDate  === undefined?'':this.cont_invoice.creditDate,\r\n        }\r\n\r\n        \r\n        \r\n        const data = {\r\n            parent_id, categories,\r\n            quotation_num, description, client_id, client_po,\r\n            qut_date_issue: quotationDate,\r\n            quotation_amt: quoteAmount,\r\n            qut_status: quotationStatus,\r\n\r\n            cont_id,\r\n            // cont_po_num: PO_number,\r\n            cont_po_amt: PO_amount,\r\n            quote_amount,\r\n            quote_number,\r\n            cont_date: PO_date,\r\n            work_com_date: workCommence,\r\n            work_complete_date: workComplete,\r\n            client_invoice_id: clientInvoice_list,\r\n            cont_invoice_id: contInvoice_list,\r\n            country_id:localStorage.getItem('countryid'),\r\n            job_complete_date: jobComplete,\r\n            ticket_no,\r\n            quote_comments,\r\n            job_status,\r\n            margin_amount,\r\n            margin,\r\n            currency,\r\n        }\r\n        \r\n        ////console.log(data)\r\n        const condition =\r\n            (quotation_num === \"\") ? this.swalAlert(\"Quotation No\", \"quotation_num\") :\r\n                (currency === \"\") ? this.swalAlert(\"Currency\", \"currency\") :\r\n                    (client_id === \"\") ? this.swalAlert(\"Client Name\", \"client_id\") : true\r\n\r\n        if (condition === true) {\r\n\r\n            axiosInstance.post(`/quotation/add`, data)\r\n                .then((res) => {\r\n                    ////console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        this.msg.push(res.data.message)\r\n                        this.setState({ quote_id: res.data.response.quotation_id },\r\n                            ()=>{\r\n                                // if(isEmpty(this.client_invoice) && isEmpty(this.cont_invoice) && isEmpty(this.cont_po)){\r\n                                //     // this.setState({saveshow:!this.state.saveshow})\r\n                                // }\r\n                                if(this.state.clientinvaddedClicked == false &&\r\n                                    invoiceNo !== undefined){\r\n                                    this.AddClientInv(Invoicedata,)\r\n                                }\r\n                                if(this.state.POaddClicked == false &&\r\n                                    this.state.contractor_id !== undefined &&\r\n                                    this.cont_po.po_number !== undefined){\r\n                                        // //console.log(\"addpo\")\r\n                                    this.AddcontPo(res.data.response.quotation_id,Cont_data)\r\n                                }\r\n                               \r\n                                Alert(\"success\", \"success!\", `${res.data.message.success}`,)\r\n                                \r\n                            })\r\n                    \r\n                    } else {\r\n                        Alert(\"error\", \"error!\", `${res.data.message.error}`,)\r\n                        // this.msg.push(res.data.message)\r\n                    }\r\n                })\r\n                .then(()=>{\r\n                    this.oldState(this.state.quote_id)\r\n                })\r\n                .catch((e) => {\r\n                    ////console.log(e)\r\n                })\r\n        }\r\n    }\r\n\r\n    oldState = (id) =>{\r\n        setTimeout(()=>{\r\n            axiosInstance.post(`/quotation/list`)\r\n            .then(res=>{\r\n                // this.setState({rerender:false})\r\n                const quotation_list = res.data.response.quotation_list\r\n                const quote_detail = quotation_list.find(quote => parseInt(quote.id) === parseInt(id))\r\n                console.log(quote_detail)\r\n                const parent_quote = quotation_list.find(quote => parseInt(quote.id) === parseInt(quote_detail.parent_id))\r\n                this.setState({\r\n                    rerender:false,\r\n                    quote_id: id,\r\n                    parent_id: quote_detail.parent_id,\r\n                    parent_QuoteNum: parent_quote !== undefined ? parent_quote.quotation_num : '--parent quote--',\r\n                    categories: quote_detail.categories ==''?'--catogories--':quote_detail.categories,\r\n    \r\n                    quotation_num: quote_detail.quotation_num,\r\n                    description: quote_detail.description,\r\n                    client_id: quote_detail.client_id,\r\n                    client_po: quote_detail.client_po,\r\n                    quotationDate: DateFormat(quote_detail.qut_date_issue),\r\n                    quoteAmount: parseFloat(quote_detail.quotation_amt).toFixed(2),\r\n                    quotationStatus: quote_detail.qut_status,\r\n                    margin:quote_detail.margin,\r\n                    marginAmount:quote_detail.margin_amount,\r\n                    // cont_id: quote_detail.cont_id,\r\n                    // PO_number: quote_detail.cont_po_num,\r\n                    // PO_amount: parseFloat(quote_detail.cont_po_amt).toFixed(2),\r\n                    // PO_date: DateFormat(quote_detail.cont_date),\r\n                    // workCommence: DateFormat(quote_detail.work_com_date),\r\n                    // workComplete: DateFormat(quote_detail.work_complete_date),\r\n                    clientInvoice_list: quote_detail.client_invoice_id,\r\n                    contInvoice_list: quote_detail.cont_invoice_id,\r\n                    job_status:quote_detail.job_status,\r\n                    jobComplete: DateFormat(quote_detail.job_complete_date),\r\n                    ticket_no: quote_detail.ticket_no !== '0' ? quote_detail.ticket_no : '',\r\n                    quote_comments:quote_detail.quote_comments,\r\n                    currency: quote_detail.currency\r\n                }, () => {\r\n                    this.setState({rerender:true})\r\n                    axiosInstance.post(`/client/list`,{country:localStorage.getItem('countryid')})\r\n                        .then(res => {\r\n                            const client_list = res.data.response.client_list\r\n                            const client = client_list.find(client => parseInt(client.id) === parseInt(quote_detail.client_id))\r\n                            this.setState({ client_list, clientName: client.name })\r\n                            //////console.log(client_list);\r\n                        })\r\n                    axiosInstance.post(`/contractor/list`,{country:localStorage.getItem('countryid')})\r\n                        .then(res => {\r\n                            const contractor_list = res.data.response.contractor_list\r\n                            this.setState({ contractor_list})\r\n                            // ////console.log(contractor_list);\r\n                        })\r\n                })\r\n            })\r\n        },2000)\r\n        \r\n    }\r\n\r\n    onEdit = (value) => {\r\n        const { quote_id, categories, parent_id, quotation_num, client_id, quoteAmount, quotationDate, client_po, description, quotationStatus,\r\n            cont_id, PO_number, PO_amount, PO_date, workCommence, workComplete, clientInvoice_list, contInvoice_list, jobComplete, job_status, ticket_no, margin_amount, margin, currency,comments2, quote_amount,\r\n            quote_number,quote_comments } = this.state;\r\n            const { invoiceNo, invoiceAmount, issuedDate, receivedDate, receivedAmount, invoiceCredit, creditAmount, creditNote, creditDate,timestamp} = this.client_invoice\r\n        \r\n            const Invoicedata = {\r\n                cust_type: '1',\r\n                cust_id: client_id,\r\n                num: invoiceNo,\r\n                invoice_amount: invoiceAmount === undefined?'':invoiceAmount,\r\n                invoice_date: issuedDate === undefined?'':issuedDate,\r\n                amount_received_date: receivedDate === undefined?'':receivedDate,\r\n                price: receivedAmount === undefined?'':parseFloat(receivedAmount).toFixed(2),\r\n                credit_note: creditNote === undefined?'':creditNote,\r\n                credit_amount: creditAmount === undefined?'':parseFloat(creditAmount).toFixed(2),\r\n                credit_date: creditDate === undefined ?'':creditDate,\r\n            }\r\n    \r\n            const Cont_data = {\r\n                cust_type: '2',\r\n                cust_id: this.state.contractor_id,\r\n                po_id:this.state.po_id,\r\n                num: this.cont_invoice.invoiceNo,\r\n                invoice_amount: this.cont_invoice.invoiceAmount === undefined?'':this.cont_invoice.invoiceAmount,\r\n                invoice_date: this.cont_invoice.receivedDate=== undefined?'':this.cont_invoice.receivedDate,\r\n                amount_received_date: this.cont_invoice.paidDate === undefined?'':this.cont_invoice.paidDate,\r\n                tax_invoice:this.cont_invoice.tax === undefined?'':this.cont_invoice.tax,\r\n                price: this.cont_invoice.paidAmount === undefined?'':parseFloat(this.cont_invoice.paidAmount).toFixed(2),\r\n                credit_note: this.cont_invoice.creditNote  === undefined?'':this.cont_invoice.creditNote,\r\n                credit_amount: this.cont_invoice.creditAmount === undefined ?'':parseFloat(this.cont_invoice.creditAmount).toFixed(2),\r\n                credit_date: this.cont_invoice.creditDate  === undefined?'':this.cont_invoice.creditDate,\r\n            }\r\n        const data = {\r\n            parent_id, categories,\r\n\r\n            quotation_num, description, client_id, client_po,\r\n            qut_date_issue: quotationDate,\r\n            quotation_amt: quoteAmount,\r\n            qut_status: quotationStatus,\r\n\r\n            cont_id,\r\n            quote_comments,\r\n            comments:comments2,\r\n            cont_po_amt: PO_amount,\r\n            cont_date: PO_date,\r\n            work_com_date: workCommence,\r\n            work_complete_date: workComplete,\r\n            client_invoice_id: clientInvoice_list,\r\n            cont_invoice_id: contInvoice_list,\r\n            country_id:localStorage.getItem('countryid'),\r\n            job_complete_date: jobComplete,\r\n            ticket_no,\r\n            job_status,\r\n            margin_amount,\r\n            quote_amount,\r\n            quote_number,\r\n            margin,\r\n            currency\r\n        }\r\n        ////console.log(data)\r\n        const condition =\r\n            (quotation_num === \"\") ? this.swalAlert(\"Quotation No\", \"quotation_num\") :\r\n                (currency === \"\") ? this.swalAlert(\"Currency\", \"currency\") :\r\n                    (client_id === \"\") ? this.swalAlert(\"Client Name\", \"client_id\") : true\r\n\r\n        if (condition === true) {\r\n            axiosInstance.post(`/quotation/edit/` + quote_id, data)\r\n                .then((res) => {\r\n                    ////console.log(res);\r\n                    if(value !== 'invoice'){\r\n                        if (res.data.message.success !== undefined) {\r\n                            if(this.state.clientinvaddedClicked == false &&\r\n                                invoiceNo !== undefined && \r\n                                invoiceAmount !== undefined){\r\n                                this.AddClientInv(Invoicedata)\r\n                            }\r\n                            if(this.state.POaddClicked == false &&\r\n                                this.state.contractor_id !== undefined &&\r\n                                this.cont_po.po_number !== undefined){\r\n                                    // //console.log(\"addpo\")\r\n                                this.AddcontPo(quote_id,Cont_data)\r\n                            }\r\n                            else if(this.state.continvaddedClicked == false &&\r\n                                this.cont_invoice.invoiceNo !== undefined &&\r\n                                this.cont_invoice.invoiceAmount !== undefined){\r\n                                    this.AddContInv(Cont_data,\"edit\")\r\n                                }\r\n                            value !== 'invoice' && Alert(\"success\", \"success!\", `${res.data.message.success}`,)\r\n                        } else {\r\n                            value !== 'invoice' && Alert(\"error\", \"error!\", `${res.data.message.error}`,)\r\n                        }\r\n                    }\r\n                    \r\n                })\r\n                .then(()=>{\r\n                    this.setState({rerender:false},()=>{\r\n                        this.componentDidMount()\r\n                        this.setState({rerender:true})\r\n                    })\r\n                })\r\n                .catch((e) => {\r\n                    ////console.log(e)\r\n                })\r\n        }\r\n    }\r\n    notification = (quoteid) =>{\r\n        \r\n        setInterval(() => {\r\n           axiosInstance.post(`/quotation/activity/${quoteid}`)\r\n                   .then(res=>this.handleNotificationResponse(res)) \r\n        },600000);\r\n    }\r\n\r\n    handleNotificationResponse = (res) =>{\r\n        const { user } = this.state\r\n        const { id } = user\r\n        ////console.log(id)\r\n        const data = res.data.response.data.current_activity\r\n        const filtered = data.find(single => single.user_id != id)\r\n        if( filtered !== undefined){\r\n            this.setState({showSnak:!this.state.showSnak,snaklist:filtered})\r\n        }\r\n        ////console.log(filtered)\r\n    }\r\n\r\n    onComplete = (fun) => {\r\n        const { jobComplete, } = this.state\r\n        const condition = (jobComplete === \"\" || jobComplete === '0000-00-00') ? this.swalAlert(\"Job Complete Date\", \"jobComplete\") : true\r\n\r\n        if (condition) {\r\n            fun === 'submit'\r\n                ? this.setState({ job_status: '1' }, () => this.onSubmit())\r\n                : this.setState({ job_status: '1' }, () => this.onEdit())\r\n        }\r\n    }\r\n    collectClientInvData = (name,value) => {\r\n        this.client_invoice = {...this.client_invoice,[name]:value}\r\n        if(name == 'credit_amount'){\r\n            this.marginCalc()\r\n        }\r\n        //console.log(this.client_invoice)\r\n    }\r\n\r\n    collectConttInvData = (name,value) => {\r\n        this.cont_invoice = {...this.cont_invoice,[name]:value}\r\n        if(name == 'creditAmount'){\r\n            this.marginCalc()\r\n        }\r\n        //console.log(this.cont_invoice)\r\n    }\r\n\r\n    collectPOData = (name,value) => {\r\n        this.cont_po = {...this.cont_po,[name]:value}\r\n        // console.log(this.cont_po)\r\n    }\r\n    // onJobcancel = (fun)\r\n\r\n    \r\n\r\n    onCancel = () => {\r\n        this.setState(this.initialState)                                           // clear input field values\r\n        this.componentDidMount()\r\n        this.componentDidMount()\r\n        this.componentDidMount()\r\n    }\r\n\r\n    ClientInvoice = () => {\r\n        const { client_po, client_id } = this.state;\r\n        const condition =\r\n            (client_po === \"\") ? this.swalAlert(\"Client PO\", \"client_po\") :\r\n                (client_id === \"\") ? this.swalAlert(\"Client Name\", \"client_id\") : true\r\n        if (condition) {\r\n            return\r\n        }\r\n    }\r\n    QuoteChange = (name, value,clicked) => this.setState({ [name]: value,POaddClicked:clicked })\r\n    handleCloseSnack = () => {\r\n        this.setState({showSnak:!this.state.showSnak})\r\n    }\r\n    Edit = (value) =>{\r\n        console.log(\"Edit Called\")\r\n        const { quote_id, categories, parent_id, quotation_num, client_id, quoteAmount, quotationDate, client_po, description, quotationStatus,\r\n            cont_id, PO_number, PO_amount, PO_date, workCommence, workComplete, clientInvoice_list, contInvoice_list, jobComplete, job_status, ticket_no, margin_amount, margin, currency,comments, quote_amount,\r\n            quote_number,quote_comments } = this.state;\r\n\r\n        const data = {\r\n            parent_id, categories,\r\n\r\n            quotation_num, description, client_id, client_po,\r\n            qut_date_issue: quotationDate,\r\n            quotation_amt: quoteAmount,\r\n            qut_status: quotationStatus,\r\n\r\n            cont_id,\r\n            quote_comments,\r\n            // comments:comments2,\r\n            cont_po_amt: PO_amount,\r\n            cont_date: PO_date,\r\n            work_com_date: workCommence,\r\n            work_complete_date: workComplete,\r\n            client_invoice_id: clientInvoice_list,\r\n            cont_invoice_id: contInvoice_list,\r\n            country_id:localStorage.getItem('countryid'),\r\n            job_complete_date: jobComplete,\r\n            ticket_no,\r\n            job_status,\r\n            margin_amount,\r\n            margin,\r\n            currency,\r\n            quote_amount,\r\n            quote_number,\r\n        }\r\n        ////console.log(data)\r\n        const condition =\r\n            (quotation_num === \"\") ? this.swalAlert(\"Quotation No\", \"quotation_num\") :\r\n                (currency === \"\") ? this.swalAlert(\"Currency\", \"currency\") :\r\n                    (client_id === \"\") ? this.swalAlert(\"Client Name\", \"client_id\") : true\r\n\r\n        if (condition === true) {\r\n            axiosInstance.post(`/quotation/edit/` + quote_id, data)\r\n                .then((res) => {\r\n                    ////console.log(res);\r\n                    if (res.data.message.success !== undefined) {\r\n                        this.componentDidMount()\r\n                        // value !== 'invoice' && Alert(\"success\", \"success!\", `${res.data.message.success}`,)\r\n                    } else {\r\n                        value !== 'invoice' && Alert(\"error\", \"error!\", `${res.data.message.error}`,)\r\n                    }\r\n                })\r\n                .catch((e) => {\r\n                    ////console.log(e)\r\n                })\r\n        }\r\n    }\r\n    render() {\r\n        const { quote_id, clientName, parent_id, categories, quotation_num, quotationDate, client_id, quoteAmount, description, quotationStatus, client_po, margin, margin_amount,\r\n            workCommence, workComplete, contName, cont_id, PO_number, PO_amount, PO_date,\r\n            jobComplete, ticket_no, clientInvoice_list, contInvoice_list,po_id,\r\n            quotation_list, client_list, contractor_list, parent_QuoteNum, contractor_invoice, client_invoice,\r\n            client_amount, cont_amount, currency,user,vertical,horizontal,showSnak,rerender, comments2 ,quote_comments} = this.state;\r\n\r\n            \r\n\r\n        return (\r\n            <div>\r\n                {rerender?<>\r\n                <div className=\"component\">\r\n                    <Row>\r\n                    <Col lg={1}>\r\n                    {this.props.match.params.id !== undefined ? <Button primary onClick={this.props.Back} >Back</Button>:\r\n                        <Button primary onClick={()=>window.history.back()} >Back</Button>}\r\n                    </Col>\r\n                        {/* <Col lg={2}>\r\n                        {quote_id === undefined ?\r\n                            <h5 style={{ fontSize: \"20px\",marginTop:6 }}>Add Quotation</h5>:<h5 style={{ fontSize: \"20px\",marginTop:6 }}>Edit Quotation</h5>\r\n                        }\r\n                        </Col> */}\r\n\r\n                        <Col className='d-flex justify-content-end'>\r\n                            <div style={{ margin: '0px 10px' }}>\r\n                                <Autocomplete\r\n                                    id='currency'\r\n                                    options={Curreny.codes()}\r\n                                    onChange={(e, value) => value !== null ? this.setState({ currency: value }) : this.setState({ currency: '' })}\r\n                                    getOptionLabel={(option) => option}\r\n                                    value={currency}\r\n                                    renderInput={(params) => (\r\n                                        <div ref={params.InputProps.ref}>\r\n                                            {quote_id === undefined ? <Form.Control placeholder={currency} value={currency} type=\"text\" {...params.inputProps} style={{ padding: '8px' }} />\r\n                                                : <Form.Control placeholder={currency} type=\"text\" {...params.inputProps} style={{ padding: '8px' }} />}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div style={{ margin: '0px 5px' }}>\r\n                                <Autocomplete\r\n                                    options={quotation_list !== undefined && quotation_list.filter(quote => quote.parent_id === '0' && quote.country_id == localStorage.getItem('countryid'))}\r\n                                    onChange={(e, value) => value !== null ? this.setState({ parent_id: value.id, ticket_no: value.ticket_no }) : this.setState({ parent_id: '' })}\r\n                                    getOptionLabel={(option) => option.quotation_num}\r\n                                    renderInput={(params) => (\r\n                                        <div ref={params.InputProps.ref}>\r\n                                            {quote_id === undefined ? <Form.Control placeholder='--parent quote--' type=\"text\" {...params.inputProps} style={{ padding: '8px' }} />\r\n                                                : <Form.Control placeholder={parent_QuoteNum} type=\"text\" {...params.inputProps} style={{ padding: '8px' }} />}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            <div style={{ margin: '0px 10px' }}>\r\n                                <Autocomplete\r\n                                    options={CategoryList}\r\n                                    onChange={(e, value) => value !== null ? this.setState({ categories: value.text }) : this.setState({ categories: '' })}\r\n                                    getOptionLabel={(option) => option.text}\r\n                                    renderInput={(params) => (\r\n                                        <div ref={params.InputProps.ref}>\r\n                                            {quote_id === undefined ? <Form.Control placeholder='--category--' type=\"text\" {...params.inputProps} style={{ padding: '8px' }} />\r\n                                                : <Form.Control placeholder={categories} type=\"text\" {...params.inputProps} style={{ padding: '8px' }} />}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n                            </div>\r\n\r\n\r\n                        </Col>\r\n                    </Row><br />\r\n                    {user.quotation_client_sec == 0?'':\r\n                    <Card>\r\n                   <Row>\r\n                       <Col lg={3}>\r\n                      <Form.Label>CLIENT QUOTATION</Form.Label>\r\n                      <hr/>\r\n                       </Col>\r\n                   </Row>\r\n                        <Row>                     \r\n                            <Col lg={3}>\r\n                           \r\n                                <CustomTextBox\r\n                                    txtBoxID='quotation_num'\r\n                                    txtBoxLabel=\"Quotation No\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"quotation_num\"\r\n                                    txtBoxValue={quotation_num}\r\n                                    txtBoxPH=\" Quotation No\"\r\n                                    changeEvent={this.onChange}\r\n                                    // disabled={user.quotation_client_sec == '1'?true:false}\r\n                                    disabled={user.quotation_client_sec === \"1\"?true:false}\r\n                                    // readonly\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Group >\r\n                                    <Form.Label > Client</Form.Label>\r\n                                    <Autocomplete\r\n                                        id='client_id'\r\n                                        options={client_list}\r\n                                        // disabled={user.quotation_client_sec == '1'?'true':'false'}\r\n                                        disabled={user.quotation_client_sec == '1'?true:false}\r\n                                        onChange={(e, value) => value !== null ? this.setState({ client_id: value.id }) : this.setState({ client_id: '' })}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        renderInput={(params) => (\r\n                                            <div ref={params.InputProps.ref}>\r\n                                                {quote_id === undefined ? <Form.Control placeholder='Client Name' type=\"text\" {...params.inputProps} />\r\n                                                    : <Form.Control placeholder={clientName} type=\"text\" {...params.inputProps} />}\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Group>\r\n                                    <Form.Label >Quote Amount</Form.Label>\r\n                                    <CurrencyFormat\r\n                                        className='form-control'\r\n                                        value={quoteAmount}\r\n                                        placeholder=\"Amount\"\r\n                                        disabled={user.quotation_client_sec == '1'?true:false}\r\n                                        onValueChange={(values) => this.onChangeAmount(values, 'quoteAmount')}\r\n                                        thousandSeparator={true} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <CustomTextBox\r\n                                    txtBoxID='client_po'\r\n                                    txtBoxLabel=\"Client PO\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"client_po\"\r\n                                    txtBoxValue={client_po}\r\n                                    txtBoxPH=\" Client PO\"\r\n                                    changeEvent={this.onChange}\r\n                                    disabled={user.quotation_client_sec == '1'?true:false}\r\n                                    \r\n                                />\r\n                            </Col>\r\n\r\n\r\n                        </Row>\r\n                        <Row>\r\n                            <Col lg={3}>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Date Issued\"\r\n                                    txtBoxType=\"date\"\r\n                                    txtBoxName=\"quotationDate\"\r\n                                    txtBoxValue={quotationDate}\r\n                                    txtBoxPH=\"Price Amount\"\r\n                                    changeEvent={this.onChange}\r\n                                    disabled={user.quotation_client_sec == '1'?true:false}\r\n                                    \r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Description\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"description\"\r\n                                    txtBoxValue={description}\r\n                                    txtBoxPH=\"description\"\r\n                                    changeEvent={this.onChange}\r\n                                    disabled={user.quotation_client_sec == '1'?true:false}\r\n                                    \r\n                                />\r\n                            </Col>\r\n\r\n\r\n                            <Col lg={3}>\r\n                                <Form.Group >\r\n                                    <Form.Label >Quote Approval</Form.Label>\r\n                                    <Form.Control as=\"select\" name=\"quotationStatus\" value={quotationStatus} onChange={this.onChange} disabled={user.quotation_client_sec == '1'?true:false}>\r\n                                        <option value=\"\" disabled>Quote Approval</option>\r\n                                        <option value=\"1\">Approved</option>\r\n                                        <option value=\"2\">Pending</option>\r\n                                        <option value=\"4\">Rejected</option>\r\n                                        <option value=\"3\">Cancelled</option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col lg={1} >\r\n                                {margin_amount >= 0 ? <CustomTextBox\r\n                                    txtBoxLabel=\"Margin\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"margin\"\r\n                                    txtBoxValue={`${margin}%`}\r\n                                    txtBoxPH=\"%\"\r\n                                    disabled=\"true\"\r\n                                /> :\r\n                                    <CustomTextBox\r\n                                        txtBoxLabel=\"Margin\"\r\n                                        txtBoxType=\"text\"\r\n                                        txtBoxName=\"margin\"\r\n                                        txtBoxValue={`${margin}%`}\r\n                                        txtBoxPH=\"%\"\r\n                                        disabled=\"true\"\r\n                                        style={{ color: 'red' }}\r\n                                    />}\r\n                            </Col>\r\n                            <Col lg={2} >\r\n                                {margin_amount >= 0 ?\r\n                                    <CurrencyFormat\r\n                                        className='form-control'\r\n                                        placeholder=\"Amount\"\r\n                                        value={margin_amount}\r\n                                        thousandSeparator={true}\r\n                                        disabled=\"true\"\r\n                                        style={{ marginTop: \"47px\" }}\r\n                                    />\r\n                                    : <CurrencyFormat\r\n                                        className='form-control'\r\n                                        placeholder=\"Amount\"\r\n                                        value={margin_amount}\r\n                                        thousandSeparator={true}\r\n                                        disabled=\"true\"\r\n                                        style={{ marginTop: \"47px\", color: 'red' }} />}\r\n                            </Col>\r\n                        </Row>\r\n                        <hr/>\r\n                    </Card>}\r\n                    {user.invoice_client_sec == 0?'':\r\n                    <ClientInvoice\r\n                        client_id={client_id}\r\n                        quote_id={quote_id}\r\n                        client_PO={client_po}\r\n                        list={clientInvoice_list}\r\n                        invoiceAdd={this.invoiceAdd}\r\n                        invoiceRemove={this.invoiceRemove}\r\n                        amountChange={this.amountChange}\r\n                        swalAlert={this.swalAlert}\r\n                        callEdit={this.Edit}\r\n                        passData = {this.collectClientInvData}\r\n                        permission = {user.invoice_client_sec == '1'?true:false}\r\n                        marginAmt={margin_amount}\r\n                    />}\r\n                    {/* {user.quotation_cont_sec == 0?'': */}\r\n                    <ContPO\r\n                        quote_id={quote_id}\r\n                        swalAlert={this.swalAlert}\r\n                        list={contInvoice_list}\r\n                        amountChange={this.amountChange}\r\n                        invoiceRemove={this.invoiceRemove}\r\n                        permission = {user.quotation_cont_sec == '1'?true:false}\r\n                        quote_onChange={this.QuoteChange}\r\n                        passData={this.collectPOData}\r\n                        callEdit={this.Edit}\r\n                        getContId={(name,value)=>this.setState({[name]:value})}\r\n                        Viewpermission = {user.quotation_cont_sec == 0?false:true}\r\n                    />\r\n                    {/* } */}\r\n                    {user.invoice_cont_sec == 0?'':\r\n                    <ContractorInvoice\r\n                        quote_id={quote_id}\r\n                        cont_id={cont_id}\r\n                        po_id={po_id}\r\n                        list={contInvoice_list}\r\n                        permission = {user.invoice_cont_sec == '1'?true:false}\r\n                        invoiceAdd={this.ContinvoiceAdd}\r\n                        invoiceRemove={this.invoiceRemove}\r\n                        amountChange={this.amountChange}\r\n                        swalAlert={this.swalAlert}\r\n                        callEdit={this.Edit}\r\n                        marginAmt={margin_amount}\r\n                        passData={this.collectConttInvData}\r\n                    />}\r\n\r\n                    <Card style={{ marginTop: '15px', backgroundColor: '#C0BFBF' }}>\r\n                        <Row>\r\n                            <Col lg={3}>\r\n                                <CustomTextBox\r\n                                    txtBoxID='ticket_no'\r\n                                    txtBoxLabel=\"CCM Ticket Number\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"ticket_no\"\r\n                                    txtBoxValue={ticket_no}\r\n                                    txtBoxPH=\"Ticket Number\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <CustomTextBox\r\n                                    txtBoxID='jobComplete'\r\n                                    txtBoxLabel=\"Job Complete\"\r\n                                    txtBoxType=\"date\"\r\n                                    txtBoxName=\"jobComplete\"\r\n                                    txtBoxValue={jobComplete}\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Group>\r\n                                <Form.Label>Quotation Status</Form.Label>\r\n                                    <Form.Control as='select' name=\"job_status\" value={this.state.job_status} onChange={this.onChange} >\r\n                                        <option value='' disabled> Status </option>\r\n                                        <option value='2' selected>Pending</option>\r\n                                        <option value='1'>Completed</option>\r\n                                        <option value='3'>Cancelled</option>\r\n                                    </Form.Control>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                        </Row>\r\n                  \r\n                   </Card><Card style={{ marginTop: '15px'}}>\r\n                    <Row>\r\n                        <Col lg='6'>\r\n                        <div class=\"form-group\">\r\n                            <Form.Label >Comments</Form.Label>\r\n                            <textarea  className=\"form-control\" rows=\"5\" id='quote_comments' name='quote_comments' value={quote_comments} onChange={this.onChange}  disabled></textarea>\r\n                        </div>\r\n                        </Col>\r\n                        {/* <Col lg={2} style={{marginTop:55}}>\r\n                        <CustomTextBox\r\n                                    txtBoxID='usrname'\r\n                                    // txtBoxLabel=\"usrname\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"usrname\"\r\n                                    txtBoxValue={usrname}\r\n                                    changeEvent={this.onChange}\r\n                                    disabled='true'\r\n                                />\r\n                        </Col> */}\r\n                        <Col lg={3}  style={{marginTop:101}}>\r\n                        <CustomTextBox\r\n                                    txtBoxID='comments2'\r\n                                    // txtBoxLabel=\"usrname\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"comments2\"\r\n                                    txtBoxPH=\"Comment something...\"\r\n                                    txtBoxValue={comments2}\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                        </Col>\r\n                        <Col lg={1}  style={{marginTop:101}}> \r\n                        <Button circular icon='arrow right' style={{marginTop:37}} color='blue' onClick={this.AddComment}/>\r\n                         </Col>\r\n                    </Row>\r\n                    {/* <Row>\r\n                        <Col lg={2}>\r\n                        <CustomTextBox\r\n                                    txtBoxID='usrname'\r\n                                    // txtBoxLabel=\"usrname\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"usrname\"\r\n                                    txtBoxValue={usrname}\r\n                                    changeEvent={this.onChange}\r\n                                    disabled='true'\r\n                                />\r\n                        </Col>\r\n                        <Col lg={4}>\r\n                        <CustomTextBox\r\n                                    txtBoxID='comments'\r\n                                    // txtBoxLabel=\"usrname\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"comments\"\r\n                                    // txtBoxValue={comments}\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                        </Col>\r\n                        <Col lg={2}> \r\n                        <Button circular icon='settings' style={{marginTop:37}}/>\r\n                         </Col>\r\n                    </Row> */}\r\n                    {/* <CustomTextBox\r\n                                    txtBoxID='comments'\r\n                                    txtBoxLabel=\"Comments\"\r\n                                    txtBoxType=\"text\"\r\n                                    txtBoxName=\"comments\"\r\n                                    txtBoxValue={comments}\r\n                                    txtBoxPH=\"Comments\"\r\n                                    changeEvent={this.onChange}\r\n                                /> */}\r\n                                \r\n                    </Card>\r\n                    <Row className='d-flex justify-content-end' style={{ marginTop: '20px' }}>\r\n                        {this.props.match.params.id !== undefined ? <CustomButton btnType=\"reset\" BtnTxt=\"Back\" ClickEvent={()=>window.history.back()} />:\r\n                        <CustomButton btnType=\"reset\" BtnTxt=\"Back\" ClickEvent={()=>window.history.back()} />}\r\n                        {/* {quote_id === undefined\r\n                            ? <CustomButton btnType=\"reset\" BtnTxt=\"Complete\" ClickEvent={() => this.onComplete('submit')} />\r\n                            : <CustomButton btnType=\"reset\" BtnTxt=\"Complete\" ClickEvent={() => this.onComplete('edit')} />} */}\r\n                        {quote_id === undefined\r\n                            ? <CustomButton btnType=\"reset\" BtnTxt=\"Save\" ClickEvent={this.onSubmit} />\r\n                            : <CustomButton btnType=\"reset\" BtnTxt=\"Save\" ClickEvent={this.onEdit} />}\r\n                            {/* <CustomButton btnType=\"reset\" BtnTxt=\"Cancel\" /> */}\r\n                    </Row>\r\n                </div>\r\n                <Snackbar\r\n                    anchorOrigin={{vertical,horizontal}}\r\n                    open={showSnak}\r\n                    onClose={this.handleCloseSnack}\r\n                    message={`${this.state.snaklist.name} working on this Same Quotation`}\r\n                    // key={vertical + horizontal}\r\n                />\r\n                </>:''}\r\n                <SaveAlert\r\n                    show={this.state.saveshow}\r\n                    close={()=>this.setState({saveshow:!this.state.saveshow},()=>this.msg=[])}\r\n                    msg={this.msg}/>\r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\n\r\nexport default EditQuotation\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\QuotationList.js",["787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\landingPage\\LandingPage.js",["831","832","833","834","835","836","837","838","839","840","841","842"],"// import React, { Component } from 'react'\r\n// import { Card, Row, Col, Form, Button, Image, Table } from 'react-bootstrap'\r\n// import CountryFlags from './CountryFlags'\r\n// import { Link } from \"react-router-dom\";\r\n// import axios from '../../utils/axiosinstance'\r\n// import Logo from '../../img/logo-light.png'\r\n// export default class LandingPage extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n\r\n//         this.state = {\r\n//             countries: [],\r\n//             client_list: [],\r\n//             clients: [],\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         axios.post('/country/list')\r\n//             .then((res) => {\r\n//                 const countries = res.data.response.country_list\r\n//                 const countriesloc = localStorage.getItem('country').split(',')\r\n\r\n//                 const country_list = countriesloc.map(country=> countries.find(count => count.id == country))\r\n//                 // console.log(country_list)\r\n//                 if(localStorage.getItem('role')=='admin'){\r\n//                     this.setState({countries})\r\n//                 }\r\n//                 else{\r\n//                 this.setState({countries:country_list})\r\n//                 }// countriesloc.map(country => {\r\n//                 // const data = countries.find(count => count.id == country)\r\n//                 // if(data !== undefined){\r\n//                 //     array.push(data)\r\n//                 // }\r\n//                 // })\r\n                \r\n//             })\r\n//         axios.post('/client/list')\r\n//             .then((res) => {\r\n//                 const client_list = res.data.response.client_list\r\n//                 this.setState({ client_list })\r\n//                 // console.log(client_list)\r\n//             })\r\n//     }\r\n//     onChange = (e) => {\r\n//         const { name, value } = e.target;\r\n\r\n//         if (value !== '') {\r\n//             axios.post('/country/search', { s: value })\r\n//                 .then((res) => {\r\n//                     const countries = res.data.response.country_list\r\n//                     this.setState({ countries })\r\n//                 })\r\n//             return\r\n//         }\r\n//         axios.post('/country/list')\r\n//             .then((res) => {\r\n//                 const countries = res.data.response.country_list\r\n//                 this.setState({ countries })\r\n//             })\r\n\r\n//     }\r\n\r\n\r\n//     countryClick = (id) => {\r\n//         // const clients = this.state.client_list.filter(client => parseInt(client.country) === parseInt(id))\r\n//         // this.setState({ clients })\r\n//         localStorage.setItem('countryid',id)\r\n//         window.location.replace('/cwr-summary')\r\n//     }\r\n//     render() {\r\n//         const { countries, clients } = this.state\r\n//         return (\r\n//             <div>\r\n//                 <div className=\"component\">\r\n//                     <h4>Country List</h4>\r\n\r\n//                     <Row>\r\n//                         <Col>\r\n//                             <Card lg={4} >\r\n//                                 <Col lg={4}>\r\n//                                     <Form.Control\r\n//                                         type=\"text\"\r\n//                                         id=\"search\"\r\n//                                         placeholder=\"Search\"\r\n//                                         onChange={this.onChange}\r\n//                                         name=\"search\"\r\n//                                     />\r\n//                                     <button className='iconButtton' >\r\n//                                         <i className=\"fa fa-search\" onClick={this.onSearch} ></i>\r\n//                                     </button><br />\r\n//                                 </Col>\r\n//                                 <Row>\r\n//                                 <Col lg={4}>\r\n//                                 {countries.slice(0,Math.floor(countries.length / 2)).map((country, i) => (\r\n//                                     <CountryFlags key={i} id={country.id} country={country.name} onChange={this.countryClick} />))}\r\n//                                     </Col>\r\n//                                     <Col lg={4}>\r\n//                                     {countries.slice(Math.floor(countries.length / 2)).map((country, i) => (\r\n//                                     <CountryFlags key={i} id={country.id} country={country.name} onChange={this.countryClick} />))}\r\n//                                     </Col>\r\n//                                     {/* <Col lg={4}>\r\n//                                     {countries.slice(Math.floor(countries.length / 3),countries.length-1).map((country, i) => (\r\n//                                     <CountryFlags key={i} id={country.id} country={country.name} onChange={this.countryClick} />))}\r\n//                                     </Col> */}\r\n//                                     </Row>\r\n//                             </Card>\r\n//                             <Card >\r\n//                                 <Row style={{alignSelf:'center' }}>\r\n//                                     {localStorage.getItem('role') == 'admin'?<Link to=\"/country\"><button className='button'>Add Country</button></Link>:''}\r\n//                                 </Row>\r\n//                                 </Card>\r\n//                         </Col>\r\n                       \r\n\r\n//                     </Row>\r\n\r\n\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nimport React, { Component } from 'react'\r\nimport { Card, Row, Col, Form, Button, Image, Table } from 'react-bootstrap'\r\nimport CountryFlags from './CountryFlags'\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from '../../utils/axiosinstance'\r\nimport Logo from '../../img/logo-light.png'\r\nconst LandingPage=(props)=> {\r\n\r\n            const [countries,setCountries] = React.useState([])\r\n            const [client_list,setClient_list] = React.useState([])\r\n            const [clients,setClients] = React.useState([])\r\n       \r\n\r\n    React.useEffect(()=>{\r\n        axios.post('/country/list')\r\n            .then((res) => {\r\n                const countries = res.data.response.country_list\r\n                const countriesloc = localStorage.getItem('country').split(',')\r\n\r\n                const country_list = countriesloc.map(country=> countries.find(count => count.id == country))\r\n        \r\n                if(localStorage.getItem('role')=='admin'){\r\n                   setCountries(countries)\r\n                }\r\n                else{\r\n                setCountries(country_list)\r\n                }// countriesloc.map(country => {\r\n                // const data = countries.find(count => count.id == country)\r\n                // if(data !== undefined){\r\n                //     array.push(data)\r\n                // }\r\n                // })\r\n                \r\n            })\r\n        axios.post('/client/list')\r\n            .then((res) => {\r\n                const client_list = res.data.response.client_list\r\n                setClient_list(client_list )\r\n                // console.log(client_list)\r\n            })\r\n    },[])\r\n\r\n    const onChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        if (value !== '') {\r\n            axios.post('/country/search', { s: value })\r\n                .then((res) => {\r\n                    const countries = res.data.response.country_list\r\n                   setCountries( countries )\r\n                })\r\n            return\r\n        }\r\n        axios.post('/country/list')\r\n            .then((res) => {\r\n                const countries = res.data.response.country_list\r\n                setCountries( countries )\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const countryClick = (id) => {\r\n        // const clients = this.state.client_list.filter(client => parseInt(client.country) === parseInt(id))\r\n        // this.setState({ clients })\r\n        localStorage.setItem('countryid',id)\r\n        window.location.replace('/cwr-summary')\r\n    }\r\n\r\n    const gridCols = [[],[],[],[]];\r\n  \r\n    countries.forEach( ( country,i )=>{\r\n          const comp = (\r\n              <CountryFlags key={i} id={country.id} country={country.name} onChange={countryClick} />\r\n          );\r\n          const colNumber = i % 4;\r\n          gridCols[colNumber].push( comp );\r\n  \r\n      } );\r\n   \r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <h4>Country List</h4>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Card lg={4} >\r\n                                <Col lg={3}>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        id=\"search\"\r\n                                        placeholder=\"Search\"\r\n                                        onChange={onChange}\r\n                                        name=\"search\"\r\n                                    />\r\n                                    <button className='iconButtton' >\r\n                                        <i className=\"fa fa-search\"  ></i>\r\n                                    </button><br />\r\n                                </Col>                               \r\n                                <Row>\r\n                               <Col lg={3}>\r\n                                {gridCols[0]}\r\n                                    </Col>\r\n                                    <Col lg={3}>\r\n                                    {gridCols[1]}\r\n                                    </Col>\r\n                                    <Col lg={3}>\r\n                                    {gridCols[2]}\r\n                                    </Col>\r\n                                    <Col lg={3}>\r\n                                    {gridCols[3]}\r\n                                    </Col>\r\n                                    </Row>\r\n                            </Card>\r\n                            <Card >\r\n                                <Row style={{alignSelf:'center' }}>\r\n                                    {localStorage.getItem('role') == 'admin'?<Link to=\"/country\"><button className='button'>Add Country</button></Link>:''}\r\n                                </Row>\r\n                                </Card>\r\n                        </Col>\r\n                       \r\n\r\n                    </Row>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default LandingPage","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\auth\\ProfileForgotPassword.js",["843","844"],"import React, { Component } from 'react'\r\nimport { Card, Form, Row, Col, Button, Image } from 'react-bootstrap'\r\nimport Logo from '../img/logo-light.png'\r\nimport axios from 'axios'\r\nimport CustomTextBox from '../utils/TextBox'\r\nimport { Alert } from '../utils/Utilities'\r\nimport axiosInstance from '../utils/axiosinstance'\r\n\r\nexport class ProfileForgotpassword extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            Password: '',\r\n            ConfirmPassword: '',\r\n            oldPassword:'',\r\n        }\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    onSubmit = () => {\r\n        const { Password, ConfirmPassword,oldPassword } = this.state\r\n\r\n        if (Object.values(this.state).every(x => x)) {\r\n            if (Password !== ConfirmPassword) {\r\n                Alert(\"error\", \"Oops\", \"Password Mismatched!\")\r\n                return\r\n            }\r\n            const data = { old_password:oldPassword, password: Password, confirm_password: ConfirmPassword }\r\n            axiosInstance.post(`/profile/reset_password`,data)\r\n                .then((res) => {\r\n\r\n                    if(res.data.message.error === undefined){\r\n                        Alert(\"success\", \"Success\", \"Password Reset Successful\")\r\n                        this.props.Back()\r\n                    }\r\n                    else{\r\n                        Alert(\"error\",\"Warning\",`${res.data.message.error}`)\r\n                    }\r\n                    // console.log(res.data)\r\n\r\n                })\r\n        }\r\n        else {\r\n            Alert(\"error\", \"Oops\", \"Please Fillout All Fields!\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { Password, ConfirmPassword,oldPassword } = this.state\r\n        return (\r\n            <div>\r\n                <div className=\"component\">\r\n                    <Card border=\"dark\" sm={6} >\r\n                        <Row>\r\n                            <Col sm={4}>\r\n                                <Image src={Logo} rounded style={{ width: \"100px\", marginLeft: \"30%\", marginTop: \"20%\" }} />\r\n                            </Col>\r\n                            <Col sm={4} style={{ marginTop: '50px' }}>\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Old Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"oldPassword\"\r\n                                    txtBoxValue={oldPassword}\r\n                                    txtBoxPH=\"Old Password\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"Password\"\r\n                                    txtBoxValue={Password}\r\n                                    txtBoxPH=\"Password\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                                <CustomTextBox\r\n                                    txtBoxLabel=\"Confirm Password\"\r\n                                    txtBoxType=\"password\"\r\n                                    txtBoxName=\"ConfirmPassword\"\r\n                                    txtBoxValue={ConfirmPassword}\r\n                                    txtBoxPH=\"ConfirmPassword\"\r\n                                    changeEvent={this.onChange}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className='d-flex justify-content-center' style={{ marginTop: \"10%\" }}>\r\n                            <Button onClick={this.props.Back}>Back</Button>\r\n                            <Button onClick={this.onSubmit}>Reset</Button>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileForgotpassword\r\n\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\TextBox.js",["845","846","847"],"import React, { Component } from 'react'\r\nimport {\r\n    Form, Row, Col\r\n} from 'react-bootstrap';\r\n\r\nexport class TextBox extends Component {   \r\n    render() {\r\n        return (\r\n\r\n            <Form.Group >\r\n                <Form.Label  >{this.props.txtBoxLabel}</Form.Label>\r\n                <Form.Control\r\n                    type={this.props.txtBoxType}\r\n                    id={this.props.txtBoxID}\r\n                    placeholder={this.props.txtBoxPH}\r\n                    value={this.props.txtBoxValue}\r\n                    onChange={this.props.changeEvent}\r\n                    name={this.props.txtBoxName}\r\n                    disabled={this.props.disabled}\r\n                    className={this.props.style}\r\n                    ref={this.props.ref}\r\n                    // {this.props.disabled=='true'?readonly:''}\r\n                    disabled={this.props.disabled}\r\n                    required\r\n                />\r\n            </Form.Group>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TextBox\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\landingPage\\ListCountries.js",["848","849","850","851"],"import React from 'react'\r\nimport { Card,Row,Col,Form } from 'react-bootstrap'\r\nimport ReactCountryFlag from 'react-country-flag'\r\nimport {getCode} from 'country-list'\r\n\r\nfunction ListCountries({country,remove,profile}) {\r\n    return (\r\n            // <div style={{backgroundColor:\"#3A5F85\",width:\"200px\",marginLeft:\"20px\",display:\"flex\",justifyContent:'center',alignItems:'center'}}>\r\n            //     <ReactCountryFlag countryCode={getCode(country)} style={{fontSize:\"25px\"}} svg />\r\n            //     <h6 style={{marginLeft:\"10px\"}}>{country}</h6>\r\n            //  </div>\r\n              <div className='ui yellow fluid card' style={{ width: '15rem' }}>\r\n                <div className='content mx-sm-3' >\r\n                  {/* <i className='ui flag th'></i> */}\r\n                  {country == 'United States'?\r\n                  <ReactCountryFlag countryCode={'US'} style={{fontSize:\"25px\"}} svg />:\r\n                  <ReactCountryFlag countryCode={getCode(country)} style={{fontSize:\"25px\"}} svg />}\r\n                  <Form.Label style={{marginLeft:\"10px\"}}>{country}</Form.Label>\r\n                { profile === undefined? <button className=\"buttonStyle\" style={{marginLeft:\"20px\"}} onClick={()=>remove(country)}><i className=\"fa fa-times\"  style={{cursor:'pointer',color:'red'}}></i></button>:''}\r\n                </div>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default ListCountries\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\Button.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\axiosinstance.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\Utilities.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\SaveAlert.js",["852"],"import React from 'react'\r\nimport { Modal,ListGroup,Button } from 'react-bootstrap'\r\nfunction SaveAlert({show,close,msg}) {\r\n    return (\r\n        <div>\r\n            <Modal show={show} onHide={close} centered>\r\n                <Modal.Body>\r\n                   \r\n                        <ListGroup variant=\"flush\">\r\n                        {msg !== undefined && \r\n                            msg.map(message =>\r\n                            <ListGroup.Item style={{display:'flex'}}>\r\n                                {message.success == undefined ?\r\n                                    <>\r\n                                        <i className=\"fa fa-times\" style={{fontSize:'18px',color:'red',marginTop:'15px'}}>\r\n                                        </i>\r\n                                        <h5 style={{marginLeft:'20px'}}>{message.error}</h5>\r\n                                    </>:\r\n                                    <>\r\n                                    <i className=\"fa fa-check\" style={{fontSize:'18px',color:'green'}}></i>\r\n                                    <h5 style={{marginLeft:'20px'}}>{message.success}</h5>\r\n                                    </>\r\n                                    }</ListGroup.Item>)}\r\n                        </ListGroup>\r\n                </Modal.Body>\r\n                \r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={close}>\r\n                    Close\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SaveAlert\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\CategoryList.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\DateFormat.js",[],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\contractor\\ContPO.js",["853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\ClientInvoice.js",["869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\ContractorInvoice.js",["893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Status\\SearchAccordion.js",["913","914","915"],"import React, { Component } from 'react'\r\nimport { Accordion, Icon,Popup,Pagination } from 'semantic-ui-react'\r\nimport {Table} from 'react-bootstrap'\r\n\r\nexport default class SearchAccordion extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        \r\n    }\r\n  state = { \r\n    activeIndex: 0,\r\n    activePage: 1\r\n   }\r\n\r\n   handlePaginationChange = (e, { activePage }) => {\r\n     this.setState({ activePage })\r\n     this.props.pagination(activePage)\r\n   }\r\n\r\n  handleClick = (e, titleProps) => {\r\n    const { index } = titleProps\r\n    const { activeIndex } = this.state\r\n    const newIndex = activeIndex === index ? -1 : index\r\n\r\n    this.setState({ activeIndex: newIndex })\r\n  }\r\n\r\n  render() {\r\n    const { activeIndex,activePage } = this.state\r\n    console.log(activePage,'active')\r\n    return (\r\n        <div style={{marginTop:20}}>\r\n      <Accordion fluid styled>\r\n        <Accordion.Title\r\n          active={activeIndex === 0}\r\n          index={0}\r\n          onClick={this.handleClick}\r\n        >\r\n          <Icon name='dropdown' />\r\n         Quotation <span style={{backgroundColor:'yellow'}}>{this.props.list.length} results</span>\r\n        </Accordion.Title>\r\n        <Accordion.Content active={activeIndex === 0}>\r\n        <Table style={{ backgroundColor: \"white\" }} responsive>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>EDIT</th>\r\n                                            <th>VIEW_INV</th>\r\n                                            <th >QUOTE NO</th>\r\n                                            <th >DATE ISSUED</th>\r\n                                            <th >CLIENT</th>\r\n                                            <th >DESCRIPTION</th>\r\n                                            <th style={{textAlign:'right'}}>QUOTE AMT</th>\r\n                                            <th >QUOTE APPROVAL</th>\r\n                                            <th>CLIENT PO</th>\r\n                                            <th>MARGIN %</th>\r\n                                            <th style={{textAlign:'right'}}>MARGIN AMT</th>\r\n                                            <th>CCM TKT NO</th>\r\n                                            <th>COMPLETION DATE</th>\r\n                                            <th>DELETE</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {/* {quotation_list.map(this.renderTable)} */}\r\n                                        {this.props.list.length !== 0 && this.props.list.map((quote, i) =>\r\n                                            <>\r\n                                                <tr key={quote.quotation_num}\r\n                                                \r\n                                                    className={quote.job_complete_date !== '0000-00-00'? \"greenish\" : \"\"}\r\n                                                    onClick={() => this.props.childQuote(quote.id)}\r\n                                                    style={{ height: \"50px\", padding: \"10px\" }}\r\n                                                    >\r\n                                                    \r\n                                                    <td>\r\n                                                    {/* <Link to={`/editQuotation/${quote.id}`}> */}\r\n                                                    <button onClick={() => this.props.renderComponent(quote.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", }} ></i></button>\r\n                                                    {/* </Link> */}\r\n                                                    </td>\r\n                                                    <td><button onClick={()=>this.props.paymentChange(quote.id)} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                    {quote.sub_list == 0 ?<td> {quote.quotation_num} </td>:\r\n                                                    <Popup content=\"View Child Quote\" trigger={<td style={{cursor:'pointer'}}> {quote.quotation_num} </td>}/>}\r\n                                                    \r\n                                                    <td >{quote.qut_date_issue !== '0000-00-00' ? quote.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                    <td >{this.props.clientName(quote.client_id)} </td>\r\n                                                    <td >{quote.description} </td>\r\n                                                    <td style={{textAlign:'right'}}>{quote.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td >{quote.qut_status === '1' ? 'Approved' : quote.qut_status === '2' ? 'Pending' : quote.qut_status === '3' ? 'Canceled' : quote.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                    <td > {quote.client_po} </td>\r\n                                                    {parseInt(quote.margin_amount) > 0 ?\r\n                                                        <>\r\n                                                            <td>{quote.qut_status === '1' ?\r\n                                                                `${quote.margin}%`:''} </td>\r\n                                                            <td style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                        </>\r\n                                                        : parseInt(quote.margin_amount) === 0 ?\r\n                                                            <>\r\n                                                                <td >0 %</td>\r\n                                                                <td >0.00</td>\r\n                                                            </> :\r\n                                                            <>\r\n                                                                <td ></td>\r\n                                                                <td style={{ color: 'red',textAlign:'right' }} >{quote.qut_status === '1' ?\r\n                                                                    quote.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                            </>}\r\n                                                    <td >{quote.ticket_no !== '0' ? quote.ticket_no : ''} </td>\r\n                                                    <td >{quote.job_complete_date !== '0000-00-00' ? quote.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                    <td><button onClick={(e) => this.props.trashQuote(quote.id, quote.client_invoice_id, quote.cont_invoice_id, 'parent',quote.sub_list)} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px' }} ></i></button></td>\r\n                                                </tr>\r\n                                                <React.Fragment >\r\n                                                    {(this.props.visible === true && this.props.visibleParent == quote.id) && this.props.childQuote_list.map(child =>\r\n                                                        <tr key={child.quotation_num}\r\n                                                            className=\"rowtable\"\r\n                                                            style={{ height: \"50px\", padding: \"10px\" }}>\r\n                                                            <td><button onClick={() => this.props.renderComponent(child.id)} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                            <td><button onClick={()=>this.props.paymentChange(child.id,\"child\")} className='buttonStyle'><i className='fa fa-book' style={{ fontSize: \"18px\", color: \"blue\", margin: '5px' }} ></i></button></td>\r\n                                                            <td > {child.quotation_num} </td>\r\n                                                            <td >{child.qut_date_issue !== '0000-00-00' ? child.qut_date_issue.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''}  </td>\r\n                                                            <td >{this.props.clientName(child.client_id)} </td>\r\n                                                            <td >{child.description} </td>\r\n                                                            <td  style={{textAlign:'right'}}>{child.quotation_amt.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                            <td >{child.qut_status === '1' ? 'Approved' : child.qut_status === '2' ? 'Pending' : child.qut_status === '3' ? 'Canceled' : child.qut_status === '4' ? 'Rejected' : ''} </td>\r\n                                                            <td > {child.cont_po_num} </td>\r\n                                                            {parseInt(child.margin_amount) > 0 ?\r\n                                                                <>\r\n                                                                    <td>{quote.qut_status === '1' ?\r\n                                                                        `${child.margin}%`:''} </td>\r\n                                                                    <td  style={{textAlign:'right'}}>{quote.qut_status === '1' ?\r\n                                                                        child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                </>\r\n                                                                : parseInt(child.margin_amount) === 0 ?\r\n                                                                    <>\r\n                                                                        <td ></td>\r\n                                                                        <td ></td>\r\n                                                                    </> : <>\r\n                                                                        <td ></td>\r\n                                                                        <td style={{ color: 'red',textAlign:\"right\" }} >{quote.qut_status === '1' ?\r\n                                                                            child.margin_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"):''} </td>\r\n                                                                    </>}\r\n                                                            <td >{child.ticket_no !== '0' ? child.ticket_no : ''} </td>\r\n                                                            <td >{child.job_complete_date !== '0000-00-00' ? child.job_complete_date.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/g,\"$3/$2/$1\") : ''} </td>\r\n                                                            <td><button onClick={(e) => this.props.trashQuote(child.id, child.client_invoice_id, child.cont_invoice_id, 'child')} className='buttonStyle'><i className='fa fa-trash' style={{ fontSize: \"18px\", color: \"red\", margin: '5px', backgroundColor: '#C3E7FB' }} ></i></button></td>\r\n                                                        </tr>\r\n                                                    )}\r\n                                                </React.Fragment>\r\n                                            </>\r\n                                        )}\r\n                                    </tbody>\r\n                                </Table>\r\n                                {/* <div style={{display:'flex',alignItems:'center',justifyContent:'center',marginTop:\"50px\"}}>\r\n                                <button  style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.props.pagination('dec')}><i className=\"fa fa-arrow-left\" style={{fontSize:\"15px\"}}></i></button>\r\n                                <p style={{marginLeft:\"20px\",fontSize:\"18px\",marginTop:\"15px\"}}>{this.props.pagenumber}</p>\r\n                                <button \r\n                                    style={{\r\n                                        marginLeft:\"20px\",\r\n                                        border:\"5px solid white\",\r\n                                        backgroundColor:\"#4A88DC\",\r\n                                        padding:\"10px\",\r\n                                        color:\"white\",\r\n                                        borderRadius:\"10px\"\r\n                                        }}\r\n                                        onClick={()=>this.props.pagination('inc')}><i className=\"fa fa-arrow-right\" style={{fontSize:\"15px\"}}></i></button>\r\n                            </div> */}\r\n                            <div style={{marginLeft:550}}>\r\n                            <Pagination defaultActivePage={activePage}  onPageChange={this.handlePaginationChange} totalPages={this.props.totalPages} />\r\n                            </div>\r\n        </Accordion.Content>\r\n\r\n        <Accordion.Title\r\n          active={activeIndex === 1}\r\n          index={1}\r\n          onClick={this.handleClick}\r\n        >\r\n          <Icon name='dropdown' />\r\n         Contractor PO\r\n        </Accordion.Title>\r\n        <Accordion.Content active={activeIndex === 1}>\r\n          <p>\r\n            There are many breeds of dogs. Each breed varies in size and\r\n            temperament. Owners often select a breed of dog that they find to be\r\n            compatible with their own lifestyle and desires from a companion.\r\n          </p>\r\n        </Accordion.Content>\r\n\r\n        <Accordion.Title\r\n          active={activeIndex === 2}\r\n          index={2}\r\n          onClick={this.handleClick}\r\n        >\r\n          <Icon name='dropdown' />\r\n         Invoice {this.props.list.length} results\r\n        </Accordion.Title>\r\n        <Accordion.Content active={activeIndex === 2}>\r\n          <p>\r\n            Three common ways for a prospective owner to acquire a dog is from\r\n            pet shops, private owners, or shelters.\r\n          </p>\r\n          <p>\r\n            A pet shop may be the most convenient way to buy a dog. Buying a dog\r\n            from a private owner allows you to assess the pedigree and\r\n            upbringing of your dog before choosing to take it home. Lastly,\r\n            finding your dog from a shelter, helps give a good home to a dog who\r\n            may not find one so readily.\r\n          </p>\r\n        </Accordion.Content>\r\n        <Accordion.Title\r\n          active={activeIndex === 3}\r\n          index={1}\r\n          onClick={this.handleClick}\r\n        >\r\n          <Icon name='dropdown' />\r\n         Credits\r\n        </Accordion.Title>\r\n        <Accordion.Content active={activeIndex === 3}>\r\n          <p>\r\n            There are many breeds of dogs. Each breed varies in size and\r\n            temperament. Owners often select a breed of dog that they find to be\r\n            compatible with their own lifestyle and desires from a companion.\r\n          </p>\r\n        </Accordion.Content>\r\n      </Accordion>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\landingPage\\CountryFlags.js",["916"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\Clientcontinvoice.js",["917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933"],"import React,{ useState, useEffect } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n    InputGroup,\r\n    FormControl,\r\n    Modal\r\n} from 'react-bootstrap';\r\nimport { DateFormat } from '../../../utils/DateFormat'\r\nimport axiosInstance from '../../../utils/axiosinstance'\r\n\r\nfunction Clientcontinvoice(props) {\r\n    const [clientcredit, setclientcredit] = useState([])\r\n    const [contractor, setcontractor] = useState(false)\r\n    const [clientinv, setclientinv] = useState([])\r\n    const [continv, setcontinv] = useState([])\r\n    const [contcredit, setcontcredit] = useState([])\r\n\r\n    useEffect(()=>{\r\n\r\n        // setcontinv(props.cont_list)  \r\n        const clientinvoice = props.client_list\r\n        const continvoice = props.cont_list\r\n        props.quote.client_invoice_id !== undefined &&\r\n            axiosInstance.post(`invoice/invoice_credit_lists`,{invoice_ids: props.quote.client_invoice_id})\r\n            .then(res =>{\r\n                const list = res.data.response.invoice_credit_list\r\n                setclientcredit(list)\r\n                    // list.map(credit => props.client_list.map(inv => inv.id == credit.invoice_id && clientinvoice.push({...inv,...credit})))\r\n                    clientinvoice.forEach(inv => {\r\n                        let arr = []\r\n                       list.map(credit =>{\r\n                           if(inv.id == credit.invoice_id){\r\n                                arr.push(credit)\r\n                               inv.credits = arr\r\n                           }\r\n                       }) \r\n                    });\r\n                    setclientinv(clientinvoice)\r\n        })\r\n        props.quote.cont_invoice_id !== undefined && \r\n            axiosInstance.post(`invoice/invoice_credit_lists`,{invoice_ids:props.quote.cont_invoice_id})\r\n            .then(res =>{\r\n                const list = res.data.response.invoice_credit_list\r\n                setcontcredit(list)\r\n                continvoice.forEach(inv => {\r\n                    let arr = []\r\n                   list.map(credit =>{\r\n                       if(inv.id == credit.invoice_id){\r\n                            arr.push(credit)\r\n                           inv.credits = arr\r\n                       }\r\n                   }) \r\n                });\r\n                setcontinv(continvoice)\r\n            })\r\n    },[props.show])\r\n\r\n    // const Cont_Name = (cont_id) => {\r\n    //     const contractor = contlist.find(cont => parseInt(cont.id) === parseInt(cont_id))\r\n    //     if (contractor !== undefined) {\r\n    //         return contractor.name\r\n    //     } else {\r\n    //         return ''\r\n    //     }\r\n    // }\r\n\r\n    const CalcTotalCredit = (invoice_id,user) =>{\r\n        let amount = 0\r\n        let list = []\r\n\r\n        if(user == 'client'){\r\n            list = clientcredit.filter(credit => credit.invoice_id == invoice_id)\r\n        }\r\n        else{\r\n            list = contcredit.filter(credit => credit.invoice_id == invoice_id)\r\n        }\r\n        // console.log(list)\r\n        list.map(credit =>{\r\n                // console.log(credit)\r\n            amount += parseFloat(credit.credit_amount)\r\n        })\r\n        return amount.toFixed(2)\r\n\r\n    }\r\n    return (\r\n                <Modal\r\n                    show={props.show}\r\n                    onHide={props.handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    size=\"xl\"\r\n                    style={{ marginTop: '50px', marginLeft: '90px' }}\r\n                //aria-labelledby=\"contained-modal-title-vcenter\"\r\n                //centered\r\n                >\r\n                    {/* <Modal.Header >\r\n                        <Modal.Title>{user} </Modal.Title>\r\n                    </Modal.Header> */}\r\n                    <Modal.Body>\r\n                    <Row>\r\n                    <Col lg={3}>\r\n                        <Row>\r\n                            <Col lg={6}>\r\n                            <button class=\"button\" onClick={props.handleClose} style={{width:100}} ><i aria-hidden=\"true\" class=\"angle left link icon\"></i>back</button>\r\n                            </Col>\r\n                            <Col lg={6}>\r\n                            {contractor?<button class=\"button\"  style={{width:200}} onClick={()=>setcontractor(!contractor)}> View Client invoice </button>\r\n                        :<button class=\"button\"  style={{width:200}} onClick={()=>setcontractor(!contractor)}>View Contractor invoice</button>}\r\n                            </Col>\r\n                            </Row>                          \r\n                        </Col>  \r\n                    </Row>       \r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\", height: '500px', }}>\r\n                            <Row>\r\n                                {contractor ?\r\n                                <table class=\"ui single line table\">\r\n                                <thead>\r\n                                        <tr >\r\n                                            <th >Invoice No</th>\r\n                                            <th >Invoice Amount</th>\r\n                                            <th >Invoice Received Date</th>\r\n                                            <th >Tax No</th>\r\n                                            <th >Paid Date</th>\r\n                                            <th >Paid Amount</th>\r\n                                            <th >Credit Note Amount</th>\r\n                                            <th>Credit Note No</th>\r\n                                            <th>Credit Received Date</th>\r\n                                            {/* <th >Delete</th> */}\r\n                                        </tr>\r\n                                </thead>\r\n                    <tbody >\r\n                        \r\n                            {continv.map(inv => inv.credits !== undefined?\r\n                                            inv.credits.map(cred=>\r\n                                            <tr >\r\n                                                    <td >{inv.num} </td>\r\n                                                    <td > {inv.invoice_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td > {DateFormat(inv.invoice_date)} </td>\r\n                                                    <td > {inv.tax_invoice} </td>\r\n                                                    <td > {DateFormat(inv.amount_received_date)} </td>\r\n                                                    <td > {inv.price} </td>\r\n                                                    <td > {cred.credit_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                                                    <td > {cred.credit_note}</td>\r\n                                                    <td > {DateFormat(cred.credit_date)}</td>\r\n                                                {/* <td><button style={{ border: 'none' }} onClick={(e) => onDelete(inv.id)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td> */}\r\n                                            </tr>):\r\n                                            <tr >\r\n                                                    <td >{inv.num} </td>\r\n                                                    <td > {inv.invoice_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td > {DateFormat(inv.invoice_date)} </td>\r\n                                                    <td > {inv.tax_invoice} </td>\r\n                                                    <td > {DateFormat(inv.amount_received_date)} </td>\r\n                                                    <td > {inv.price} </td>\r\n                                                    <td > {inv.credit_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                                                    <td > {inv.credit_note}</td>\r\n                                                    <td > {DateFormat(inv.credit_date)}</td>\r\n                                                {/* <td><button style={{ border: 'none' }} onClick={(e) => onDelete(inv.id)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td> */}\r\n                                            </tr>\r\n\r\n                                    )}\r\n                    </tbody>\r\n                </table>:\r\n                                <table class=\"ui single line table\">\r\n                                        <thead >\r\n                                            <tr >\r\n                                                <th >Invoice No</th>\r\n                                                <th >Invoice Amount</th>\r\n                                                <th >Issued Date</th>\r\n                                                <th >Received Date</th>\r\n                                                <th >Received Amount</th>\r\n                                                <th >Credit Note Amount</th>\r\n                                                <th>Credit Note No</th>\r\n                                                <th>Credit Received Date</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                            <tbody >\r\n                                            {clientinv.map(inv => inv.credits !== undefined?\r\n                                            inv.credits.map(cred=>\r\n                                                <tr >\r\n                                                    <td >{inv.num} </td>\r\n                                                    <td > {inv.invoice_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td > {DateFormat(inv.invoice_date)} </td>\r\n                                                    <td > {DateFormat(inv.amount_received_date)} </td>\r\n                                                    <td > {inv.price} </td>\r\n                                                    <td > {cred.credit_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                                                    <td > {cred.credit_note}</td>\r\n                                                    <td > {DateFormat(cred.credit_date)}</td>\r\n                                                    {/* <td><button style={{ border: 'none' }} onClick={(e) => onDelete(inv.id)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td> */}\r\n                                                </tr>):\r\n                                                <tr >\r\n                                                    <td >{inv.num} </td>\r\n                                                    <td > {inv.invoice_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                    <td > {DateFormat(inv.invoice_date)} </td>\r\n                                                    <td > {DateFormat(inv.amount_received_date)} </td>\r\n                                                    <td > {inv.price} </td>\r\n                                                    <td > {inv.credit_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                                                    <td > {inv.credit_note}</td>\r\n                                                    <td > {DateFormat(inv.credit_date)}</td>\r\n                                                    {/* <td><button style={{ border: 'none' }} onClick={(e) => onDelete(inv.id)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td> */}\r\n                                            </tr>\r\n                                            )}\r\n                                        </tbody>\r\n                                    </table>}\r\n                            </Row>\r\n                        </Card>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n    )\r\n}\r\n\r\nexport default Clientcontinvoice\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\invoice\\Payment.js",["934","935","936","937","938","939","940","941","942","943","944"],"import React, { useEffect,useState } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n    InputGroup,\r\n    FormControl,\r\n    Modal\r\n} from 'react-bootstrap';\r\nimport { Header, Dropdown } from 'semantic-ui-react'\r\nimport { DateFormat } from '../../../utils/DateFormat'\r\n\r\nexport function Payment(props){\r\n\r\n    const [show, setshow] = useState(null)\r\n    const [list, setlist] = useState([])\r\n    const [user, setuser] = useState('')\r\n        \r\n        //console.log(show,list, 'show')\r\n    useEffect(() => {\r\n        setshow(props.show)\r\n        setlist(props.list)\r\n        setuser(props.user)\r\n    }, [props.show])\r\n    const { handleClose, onDelete, } = props;\r\n        return (\r\n            <>\r\n                <Modal\r\n                    show={show}\r\n                    onHide={handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    size=\"xl\"\r\n                    style={{ marginTop: '50px', marginLeft: '90px' }}\r\n                //aria-labelledby=\"contained-modal-title-vcenter\"\r\n                //centered\r\n                >\r\n                    <Modal.Header >\r\n                        <Modal.Title>{user} </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <button class=\"button\" onClick={handleClose} ><i aria-hidden=\"true\" class=\"angle left link icon\"></i>back</button>\r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\", height: '500px', }}>\r\n                            <Row>\r\n                                <table class=\"ui single line table\">\r\n                                    <thead >\r\n                                        {user === 'Client' ?\r\n                                            <tr >\r\n                                                <th >Invoice No</th>\r\n                                                <th >Invoice Amount</th>\r\n                                                <th >Issued Date</th>\r\n                                                <th >Last Received Date</th>\r\n                                                <th >Received Amount</th>\r\n                                                {/* <th >Credit Note Amount</th>\r\n                                                <th >Credit Note Received Date</th>\r\n                                                <th >Credit Note No</th> */}\r\n                                                <th >Delete</th>\r\n                                            </tr>\r\n                                            :\r\n                                            <tr >\r\n                                                <th >Invoice No</th>\r\n                                                <th >Invoice Amount</th>\r\n                                                <th >Invoice Received Date</th>\r\n                                                <th >Last Paid Date</th>\r\n                                                <th >Paid Amount</th>\r\n                                                {/* <th >Credit Note Amount</th>\r\n                                                <th >Credit Note Received Date</th>\r\n                                                <th >Credit Note No</th> */}\r\n                                                <th >Delete</th>\r\n                                            </tr>}\r\n                                    </thead>\r\n                                    <tbody >\r\n                                        {list !== undefined && list.map(inv =>\r\n                                            <tr >\r\n                                                <td >{inv.num} </td>\r\n                                                <td > {inv.invoice_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                <td > {DateFormat(inv.invoice_date)} </td>\r\n                                                <td > {DateFormat(inv.amount_received_date)} </td>\r\n                                                <td > {inv.price} </td>\r\n                                                {/* <td > {inv.credit_amount} </td>\r\n                                                <td > {DateFormat(inv.credit_date)} </td>\r\n                                                <td > {inv.credit_note} </td> */}\r\n                                                <td><button style={{ border: 'none' }} onClick={(e) => onDelete(inv.id)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </Row>\r\n                        </Card>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n\r\nexport default Payment\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\Invoice.js",["945","946","947","948","949","950","951","952"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n} from 'react-bootstrap';\r\n\r\nclass Invoice extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n           \r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n          <tr className={this.props.id % 2 === 0 ? \"rowtable\":\"\"}>\r\n              \r\n            <th>INVOICE NUMBER</th>\r\n            <th>DATE ISSUED</th>\r\n            <th>CLIENT</th>\r\n            <th>DESCRIPTION</th>\r\n            <th>INVOICE AMOUNT</th>\r\n            <th>QUOTE APPROVAL</th>\r\n\r\n          </tr>\r\n           <tr className={this.props.id % 2 === 0 ? \"rowtable\":\"\"}>   \r\n           <td>123456778</td>\r\n           <td>12/03/2020</td>\r\n           <td>boruto</td>\r\n           <td>Description </td>\r\n           <td>87697</td>\r\n           <td>pending</td>\r\n         </tr>\r\n\r\n         <tr className={this.props.id % 2 === 0 ? \"rowtable\":\"\"}>   \r\n           <td>123456778</td>\r\n           <td>12/03/2020</td>\r\n           <td>boruto</td>\r\n           <td>Description </td>\r\n           <td>87697</td>\r\n           <td>pending</td>\r\n         </tr>\r\n\r\n         <tr className={this.props.id % 2 === 0 ? \"rowtable\":\"\"}>   \r\n           <td>123456778</td>\r\n           <td>12/03/2020</td>\r\n           <td>boruto</td>\r\n           <td>Description </td>\r\n           <td>87697</td>\r\n           <td>pending</td>\r\n         </tr>\r\n\r\n         <tr className={this.props.id % 2 === 0 ? \"rowtable\":\"\"}>   \r\n           <td>123456778</td>\r\n           <td>12/03/2020</td>\r\n           <td>boruto</td>\r\n           <td>Description </td>\r\n           <td>87697</td>\r\n           <td>pending</td>\r\n         </tr>\r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Invoice\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\contractor\\ContPO_list.js",["953","954","955","956","957","958","959","960","961","962"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    Table,\r\n    InputGroup,\r\n    FormControl,\r\n    Modal\r\n} from 'react-bootstrap';\r\nimport { Header, Dropdown } from 'semantic-ui-react'\r\nimport { DateFormat } from '../../../utils/DateFormat'\r\n\r\nexport class ContPO_list extends Component {\r\n\r\n    Cont_Name = (cont_id) => {\r\n        const contractor = this.props.cont_list.find(cont => parseInt(cont.id) === parseInt(cont_id))\r\n        if (contractor !== undefined) {\r\n            return contractor.name\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { show, handleClose, list, onDelete, } = this.props;\r\n        return (\r\n            <>\r\n                <Modal\r\n                    show={show}\r\n                    onHide={handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    size=\"xl\"\r\n                    style={{ marginTop: '50px', marginLeft: '90px' }}\r\n                >\r\n                    <Modal.Header >\r\n                        <Modal.Title>Contractor PO List </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <button class=\"button\" onClick={handleClose} ><i aria-hidden=\"true\" class=\"angle left link icon\"></i>back</button>\r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\", height: '500px', }}>\r\n                            <Row>\r\n                                <table class=\"ui single line table\">\r\n                                    <thead >\r\n                                        <tr >\r\n                                        {/* <th>ID</th> */}\r\n                                            <th >Contractor Name</th>\r\n                                            <th >Po Number</th>\r\n                                            <th >Po Amount</th>\r\n                                            <th >Po Issued Date</th>\r\n                                            <th>Quotation No</th>\r\n                                            <th>Quotation Amount</th>\r\n                                            <th >Work Commence</th>\r\n                                            <th >Work Complete</th>\r\n                                            <th >Delete</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody >\r\n                                        {list !== undefined && list.length !== 0 && list.map(po =>\r\n                                            <tr >\r\n                                            {/* <td>{po.id}</td> */}\r\n                                                <td >{this.Cont_Name(po.cont_id)} </td>\r\n                                                <td > {po.po_number} </td>\r\n                                                <td > {po.po_amount} </td>\r\n                                                <td > {DateFormat(po.po_issue_date)} </td>\r\n                                                <td>{po.quote_number}</td>\r\n                                                <td>{po.quote_amount}</td>\r\n                                                <td > {DateFormat(po.work_commence)} </td>\r\n                                                <td > {DateFormat(po.work_complete)} </td>\r\n                                                <td><button style={{ border: 'none' }} onClick={(e) => onDelete(po.id,po.cont_id)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </tbody>\r\n                                </table>\r\n                            </Row>\r\n                        </Card>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContPO_list\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Payments\\MulipleClientInvPayments.js",["963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986"],"import React,{useState,useEffect} from 'react'\r\nimport { Modal, Row, Form, Col, Card } from 'react-bootstrap'\r\nimport CurrencyFormat from 'react-currency-format'\r\nimport axiosInstance from '../../../utils/axiosinstance'\r\nimport { DateFormat } from '../../../utils/DateFormat'\r\nimport { Alert } from '../../../utils/Utilities'\r\nimport EditPayments from './EditPayments'\r\n\r\nfunction MulipleClientInvPayments({InvNo,showPayment,handleClose,user,InvAmount,issueDate,invId,margin,clientinvIdList,continvIdList,recvAmt,EditQuote,recvcontAmt,recvCredit,recvconCredit}) {\r\n\r\n    const [RecvdDate,setRecvDate] = useState('')\r\n    const [creditRecvdDate,setcreditRecvdDate] = useState('')\r\n    const [Amount,setAmount] = useState('')\r\n    const [creditAmount,setCreditAmount] = useState('')\r\n    const [invoice,setinvoice] = useState(true)\r\n    const [creditNoteNo, setcreditNoteNo] = useState('')\r\n    const [paymentList, setPaymentList] = useState([])\r\n    const [creditList, setCreditList] = useState([])\r\n    const [date,setDate] =useState('')\r\n    const [refresh , setrefresh ] = useState(false)\r\n    const [creditpay,setCreditpay]=useState([])\r\n    const [Invlist, setInvlist] = useState([])\r\n    const [showEdit, setshowEdit] = useState(false)\r\n    const [mode, setmode] = useState('')\r\n    const [singlecredit, setsinglecredit] = useState('')\r\n    const [singlepayment, setsinglepayment] = useState('')\r\n\r\n    useEffect(()=>{\r\n        if(showPayment){\r\n            axiosInstance.post(`invoice/invoice_payment_list`,{invoice_id:invId})\r\n            .then(res =>{\r\n                const list = res.data.response.invoice_payment_list\r\n                let total = 0\r\n                setPaymentList(list)\r\n                list.map(inv =>{\r\n                    total += parseFloat(inv.price)\r\n                })\r\n                \r\n                // console.log('Its me2',res.data.response.invoice_payment_list)\r\n            })\r\n            .then(res =>{\r\n                // setCreditpay(res.data.response.invoice_credit_list)\r\n                let continvarr = []\r\n                if(user == 'Client'){\r\n                    axiosInstance.post(`invoice/invoice_credit_lists`,{invoice_ids:clientinvIdList})\r\n                    .then(res =>{\r\n                        const list = res.data.response.invoice_credit_list\r\n                        // console.log(list)\r\n                        setInvlist(list)\r\n                        const pay = list.filter(inv => inv.invoice_id == invId)\r\n                        setCreditpay(pay)\r\n                    })   \r\n                }\r\n                else{\r\n                    axiosInstance.post(`invoice/invoice_credit_lists`,{invoice_ids:continvIdList})\r\n                    .then(res =>{\r\n                        const list = res.data.response.invoice_credit_list\r\n                        setInvlist(list)\r\n                        const pay = list.filter(inv => inv.invoice_id == invId)\r\n                        setCreditpay(pay)\r\n                        let ContcreditAmount = 0\r\n                    })\r\n                }\r\n            })\r\n    }\r\n    },[showPayment,refresh,showEdit])\r\n\r\n    \r\n    const onChangeAmount = (values, name) => {\r\n        const { formattedValue, value } = values;\r\n        // this.setState({ [name]: value },()=>this.props.passData(name,value))\r\n        setAmount(value)\r\n    }\r\n\r\n    const submit = () => {\r\n        const payments = []\r\n        const list = [...paymentList]\r\n        const data = {price:Amount,payment_date:RecvdDate}\r\n        list.push(data)\r\n        let total = 0\r\n        list.map(inv => {\r\n            total += parseFloat(inv.price)\r\n        })\r\n        // console.log(total)\r\n        if(total <= parseFloat(InvAmount))\r\n        {\r\n            if(user == 'Client'){\r\n                recvAmt('receivedAmount',Amount,'add')\r\n               }\r\n               else{\r\n                   recvcontAmt('paidAmount',Amount,'add')\r\n               }\r\n                payments.push(data)     \r\n                AddPayment(payments)\r\n        }\r\n        else{\r\n            Alert('error','Error!','Total Invoice payment amount should not be greater than Main Invoice amount')\r\n        }\r\n      \r\n    }\r\n    const submit2=()=>{\r\n        const CreditAmt=[]\r\n        const list = [...creditpay]\r\n        const Creditdata={credit_amount:creditAmount,credit_note:creditNoteNo,credit_date:creditRecvdDate}\r\n        list.push(Creditdata)\r\n        let total = 0\r\n        list.map(credit => {\r\n            total += parseFloat(credit.credit_amount)\r\n        })\r\n        // console.log(total)\r\n        if(total <= parseFloat(InvAmount))\r\n        {\r\n            if(user == 'Client'){\r\n                recvCredit('creditAmount',creditAmount,'add')\r\n               }\r\n               else{\r\n                recvconCredit('creditAmount',creditAmount,'add')\r\n               }\r\n                CreditAmt.push(Creditdata)   \r\n        AddPaymentCredit(CreditAmt)\r\n    }\r\n    else{\r\n        Alert('error','Error!','Total Credit amount should not be greater than Main Invoice amount')\r\n    }\r\n    }\r\n\r\n    const DeletePayment = (id,amount) => {\r\n        if( user == 'Client'){\r\n            recvAmt('receivedAmount',amount,'sub')\r\n        }\r\n        else{\r\n           recvcontAmt('paidAmount',amount,'sub')\r\n        }\r\n        axiosInstance.post(`invoice/delete_invoice_payment`,{id})\r\n        .then(res =>{\r\n            console.log(res.data)\r\n            setrefresh(!refresh)\r\n            Alert('success','Success!',`${res.data.message.success}`)\r\n        })\r\n    }\r\n    const DeletePayment2 = (id,amount) => {\r\n        if(user == 'Client'){\r\n            let ClientcreditAmount = 0\r\n            Invlist.map(credit => {\r\n                if(credit !== undefined){\r\n                    ClientcreditAmount += parseFloat(credit.credit_amount)\r\n                }\r\n            })\r\n            margin('creditAmount',ClientcreditAmount-parseFloat(amount))\r\n        }\r\n        else{\r\n            let ContcreditAmount = 0\r\n            Invlist.map(credit => {\r\n                if(credit !== undefined){\r\n                    ContcreditAmount += parseFloat(credit.credit_amount)\r\n                }\r\n            })\r\n            margin('credit_amount',ContcreditAmount-parseFloat(amount))\r\n        }\r\n        axiosInstance.post(`invoice/delete_invoice_credit`,{id})\r\n        .then(res =>{\r\n            console.log(res.data)\r\n            setrefresh(!refresh)\r\n            EditQuote()\r\n            Alert('success','Success!',`${res.data.message.success}`)\r\n        })\r\n    }\r\n\r\n    const AddPaymentCredit = (CreditAmt) =>{\r\n        if(user == 'Client'){\r\n            let ClientcreditAmount = 0\r\n            Invlist.map(credit => {\r\n                // if(credit !== undefined){\r\n                    ClientcreditAmount += parseFloat(credit.credit_amount)\r\n                // }\r\n            })\r\n            margin('creditAmount',ClientcreditAmount+parseFloat(creditAmount))\r\n        }\r\n        else{\r\n            let ContcreditAmount = 0\r\n            Invlist.map(credit => {\r\n                // if(credit !== undefined){\r\n                    ContcreditAmount += parseInt(credit.credit_amount)\r\n                // }\r\n            })\r\n            margin('credit_amount',ContcreditAmount+parseInt(creditAmount))\r\n        }\r\n        axiosInstance.post('invoice/save_invoice_credit',{invoice_id:invId,credits:CreditAmt})\r\n        .then(res =>{\r\n            console.log(res.data)\r\n            Alert('success','Success!',`${res.data.message.success}`)\r\n            setrefresh(!refresh)\r\n            EditQuote()\r\n            setCreditAmount('')\r\n            setcreditNoteNo('')\r\n            setcreditRecvdDate('')\r\n        })\r\n    }\r\n    const AddPayment = (payments) =>{\r\n        axiosInstance.post('invoice/save_invoice_payment',{invoice_id:invId,payments})\r\n        .then(res =>{\r\n            console.log(res.data)\r\n            Alert('success','Success!',`${res.data.message.success}`)\r\n            setrefresh(!refresh)\r\n            setAmount('')\r\n            setRecvDate('')\r\n        })\r\n    }\r\n\r\n    return (\r\n                <Modal\r\n                    show={showPayment}\r\n                    onHide={handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    size=\"xl\"\r\n                    style={{ marginTop: '50px', marginLeft: '90px' }}\r\n               \r\n                >\r\n                    <Modal.Header >\r\n                        <Modal.Title>{user} </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                    <Row>\r\n                        <Col lg={2}>\r\n                        <button class=\"button\" onClick={handleClose} ><i aria-hidden=\"true\" class=\"angle left link icon\"></i>back</button>\r\n                        </Col>\r\n                        <Col lg={2}>\r\n                        {invoice?<button class=\"button\" onClick={()=>setinvoice(!invoice)} >Add Credit</button>:\r\n                        <button class=\"button\" onClick={()=>setinvoice(!invoice)} >Add invoice</button>}\r\n                            </Col>\r\n                    </Row>\r\n                    <Row style={{marginTop:\"20px\"}}>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Invoice Number</Form.Label>\r\n                                <Form.Control disabled value={InvNo}/>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Invoice Amount</Form.Label>\r\n                               <CurrencyFormat\r\n                                    className='form-control'\r\n                                    value={InvAmount}\r\n                                    disabled\r\n                                    placeholder=\"Received Amount\"\r\n                                    thousandSeparator={true} />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Issued Date</Form.Label>\r\n                                <Form.Control value={issueDate} disabled type=\"date\"/>\r\n                            </Col>\r\n                        </Row>\r\n                            {invoice?\r\n                        <Row style={{marginTop:\"20px\"}}>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Received Amount</Form.Label>\r\n                                <CurrencyFormat\r\n                                    className='form-control'\r\n                                    value={Amount}\r\n                                    placeholder=\"Received Amount\"\r\n                                    onValueChange={(values) => onChangeAmount(values, 'receivedAmount')}\r\n                                    thousandSeparator={true} />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Payment Date</Form.Label>\r\n                                <Form.Control value={RecvdDate} onChange={(e)=>setRecvDate(e.target.value)} type=\"date\"/>\r\n                            </Col>\r\n                            <Col lg={2}>\r\n                                <button className='button' style={{marginTop:\"30px\"}} onClick={submit}>Add</button>\r\n                            </Col>\r\n                            </Row>:\r\n                            <Row style={{marginTop:\"20px\"}}>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Credit Amount</Form.Label>\r\n                                <CurrencyFormat\r\n                                    className='form-control'\r\n                                    value={creditAmount}\r\n                                    placeholder=\"Credit Amount\"\r\n                                    onValueChange={(values) => \r\n                                        setCreditAmount(values.value)}\r\n                                    thousandSeparator={true} />:\r\n\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Credit Received Date</Form.Label>\r\n                                <Form.Control value={creditRecvdDate} onChange={(e)=>setcreditRecvdDate(e.target.value)} type=\"date\"/>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Credit Note No</Form.Label>\r\n                                <Form.Control value={creditNoteNo} placeholder=\"Credit Note No\" onChange={(e)=>setcreditNoteNo(e.target.value)} type=\"text\"/>\r\n                            </Col>\r\n                            \r\n                            <Col lg={2}>\r\n                                <button className='button' onClick={submit2} style={{marginTop:\"30px\"}}>Add</button>\r\n                            </Col>\r\n                        </Row>}\r\n                        <Card style={{ marginTop: \"30px\", backgroundColor: \"white\", height: '500px', }}>\r\n                            <Row>\r\n                                {invoice?\r\n                                <table class=\"ui single line table\">\r\n                                    <thead >\r\n                                        {user === 'Client' ?\r\n                                            <tr >\r\n                                                <th >Invoice No</th>\r\n                                                <th >Invoice Amount</th>\r\n                                                <th >Issued Date</th>\r\n                                                <th >Received Date</th>\r\n                                                <th >Received Amount</th>\r\n                                                <th >Edit</th>\r\n                                                <th >Delete</th>\r\n                                            </tr>\r\n                                            :\r\n                                            <tr >\r\n                                                <th >Invoice No</th>\r\n                                                <th >Invoice Amount</th>\r\n                                                <th >Issued Date</th>\r\n                                                <th >Paid Date</th>\r\n                                                <th >Paid Amount</th>\r\n                                                <th >Edit</th>\r\n                                                <th >Delete</th>\r\n                                            </tr>}\r\n                                    </thead>\r\n                                    <tbody >\r\n                                        {paymentList !== undefined && paymentList.map(inv =>\r\n                                            <tr >\r\n                                                <td >{InvNo} </td>\r\n                                                <td > {InvAmount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                                                <td > {issueDate}</td>\r\n                                                <td > {DateFormat(inv.payment_date)} </td>\r\n                                                <td > {inv.price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </td>\r\n                                                <td><button onClick={() => {\r\n                                                    setmode('Payment Edit')\r\n                                                    setsinglepayment(inv)\r\n                                                    setshowEdit(!showEdit)\r\n                                                }} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", }} ></i></button></td>\r\n                                                <td><button style={{ border: 'none' }} onClick={()=>DeletePayment(inv.id,inv.price)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                                            </tr>\r\n                                        )} \r\n                                    </tbody>\r\n                                </table>:\r\n                                <table class=\"ui single line table\">\r\n                                    <thead>\r\n                                    {user === 'Client' ?\r\n                                            <tr >\r\n                                                <th >Credit Note Amount</th>\r\n                                                <th >Credit Note Received Date</th>\r\n                                                <th >Credit Note Number</th>\r\n                                                <th >Edit</th>\r\n                                                <th >Delete</th>\r\n                                            </tr>\r\n                                            :\r\n                                            <tr >\r\n                                             \r\n                                                <th >Credit Note Amount</th>\r\n                                                <th >Credit Note Received Date</th>\r\n                                                <th >Credit Note Number</th>\r\n                                                <th >Edit</th>\r\n                                                <th >Delete</th>\r\n                                            </tr>}\r\n                                    </thead> \r\n                                    <tbody>\r\n                                    { creditpay.map(credit=>(\r\n                                        <tr>\r\n                                                <td>{credit.credit_amount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n                                                <td>{DateFormat(credit.credit_date)}</td>\r\n                                                <td>{credit.credit_note}</td>\r\n                                                <td><button onClick={() => {\r\n                                                    setmode('Credit Edit')\r\n                                                    setsinglecredit(credit)\r\n                                                    setshowEdit(!showEdit)\r\n                                                }} className='buttonStyle'><i className='green edit link icon' style={{ fontSize: \"18px\", }} ></i></button></td>\r\n                                                <td><button style={{ border: 'none' }} onClick={()=>DeletePayment2(credit.id,credit.credit_amount)}><i className=\"fa fa-trash\" style={{ fontSize: \"18px\", color: \"red\" }}></i></button></td>\r\n                                            </tr>\r\n                                    ))\r\n                                           \r\n                                    }\r\n                                    </tbody>   \r\n                                </table>\r\n                                }\r\n                            </Row>\r\n                        </Card>\r\n                        <EditPayments\r\n                            showPaymentEdit={showEdit}\r\n                            handleClose={()=>setshowEdit(!showEdit)}\r\n                            mode={mode}\r\n                            credit={singlecredit}\r\n                            payment={singlepayment}\r\n                            InvNo={InvNo}\r\n                            InvAmount={InvAmount}\r\n                            issueDate={issueDate}\r\n                            Invlist={Invlist}\r\n                            EditQuote={EditQuote}\r\n                            user={user}\r\n                            margin={margin}\r\n                            payments={paymentList}\r\n                            contAmount={recvcontAmt}\r\n                            clientAmount={recvAmt}\r\n                            clientCredit={recvCredit}\r\n                            contCredit={recvconCredit}\r\n                            />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n    )\r\n}\r\n\r\nexport default MulipleClientInvPayments\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\Calculator.js",["987","988"],"export const CurrencyConvertor = (currency, chart_list, currency_list) => {\r\n\r\n    let client_total = 0\r\n    let client_received = 0\r\n    let client_remaining = 0\r\n    let cont_total = 0\r\n    let cont_paid = 0\r\n    let cont_remaining = 0\r\n    let margin = 0\r\n\r\n    chart_list.map(data => {\r\n        // console.log(data,\"data\")\r\n        if (data.currency === currency) {\r\n            client_total += parseFloat(data.total_client_issue_amount)\r\n            client_received += parseFloat(data.total_client_received_amount)\r\n            cont_total += parseFloat(data.total_cont_issue_amount)\r\n            cont_paid += parseFloat(data.total_cont_received_amount)\r\n            margin += parseFloat(data.total_margin_amount)\r\n        } else {\r\n            // console.log(currency_list[currency],\"curreency\")\r\n            client_total += parseFloat(data.total_client_issue_amount * (currency_list[currency] / currency_list[data.currency]))\r\n            client_received += parseFloat(data.total_client_received_amount * (currency_list[currency] / currency_list[data.currency]))\r\n            cont_total += parseFloat(data.total_cont_issue_amount * (currency_list[currency] / currency_list[data.currency]))\r\n            cont_paid += parseFloat(data.total_cont_received_amount * (currency_list[currency] / currency_list[data.currency]))\r\n            margin += parseFloat(data.total_margin_amount * (currency_list[currency] / currency_list[data.currency]))\r\n        }\r\n    })\r\n\r\n    // marginlist !== undefined &&  marginlist.map(mar => {\r\n    //     marginamt +=  parseFloat(mar.margin * (currency_list[currency] / currency_list[mar.currency]))\r\n    // })\r\n\r\n    client_remaining = client_total - client_received\r\n    cont_remaining = cont_total - cont_paid\r\n\r\n    // const margin = client_received - cont_paid\r\n    // console.log(chart_list, client_total,client_received,client_remaining,cont_total,cont_paid,cont_remaining,'chart_list')\r\n    return {\r\n        client: [parseFloat(client_total).toFixed(2), parseFloat(client_received).toFixed(2), parseFloat(client_remaining).toFixed(2)],\r\n        cont: [parseFloat(cont_total).toFixed(2), parseFloat(cont_paid).toFixed(2), parseFloat(cont_remaining).toFixed(2)],\r\n        margin:parseFloat(margin).toFixed(2)\r\n    }\r\n}\r\nexport const AgedDataCalculator = (currency, chart_list, currency_list)=>{\r\n    let payables = 0;\r\n    let receivables = 0\r\n\r\n    chart_list.map(data => {\r\n        if (data.currency === currency) {\r\n            payables += parseFloat(data.payables)\r\n            receivables += parseFloat(data.receivables)\r\n        } else {\r\n            payables += parseFloat(data.payables * (currency_list[currency] / currency_list[data.currency]))\r\n            receivables += parseFloat(data.receivables * (currency_list[currency] / currency_list[data.currency]))\r\n        }\r\n    })\r\n    return [parseFloat(receivables).toFixed(2),parseFloat(payables).toFixed(2),]\r\n}","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\Sidebar.js",["989","990","991","992","993","994","995","996","997"],"import React, { Component } from 'react'\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    DropdownButton,\r\n    Dropdown,\r\n    Spinner,\r\n} from 'react-bootstrap';\r\nimport { SidebarOptions } from './ChartData'\r\n\r\nexport class Sidebar extends Component {  \r\n    render() {\r\n        const Data = {\r\n            labels: ['0-30 DAYS', '30-60 DAYS', 'ABOVE 60 DAYS'],\r\n            datasets: [\r\n                {\r\n                    barThickness: 20,\r\n                    backgroundColor: this.props.color,\r\n                    data: this.props.data,\r\n                }\r\n            ]\r\n        };\r\n        const Options = SidebarOptions()\r\n        return (\r\n            <>\r\n                <Row className='chartCard' >\r\n                    <div style={{  maxWidth: '577px' }}>\r\n                        <HorizontalBar data={Data} options={Options} />\r\n                    </div>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartCardMonth.js",["998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartCard.js",["1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\BarChart.js",["1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartCardCalender.js",["1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\Top5.js",["1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075"],"import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Card,\r\n    Form,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Image,\r\n    DropdownButton,\r\n    Dropdown,\r\n    Spinner,\r\n    ListGroup,\r\n} from 'react-bootstrap';\r\nimport {Table,Header,Rating} from 'semantic-ui-react'\r\n// import { CurrencyConvertor } from '../../utils/Calculator';\r\n\r\nexport class Top5 extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            currency:'SGD'\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        // console.log(this.props.currency,\"amt\")\r\n        this.setState({currency:this.props.currency})\r\n    }\r\n    componentDidUpdate(previousProps, previousState){\r\n        // this.setState({currency:this.props.currency})\r\n        if (previousProps.currency !== this.props.currency) {\r\n            this.setState({currency:this.props.currency})\r\n        }\r\n        // console.log(this.props.currency)\r\n    }\r\n    Converter = (currency,list,amount) =>{\r\n       const data =  parseFloat(amount) * (list[this.state.currency] / list[currency])\r\n    //   console.log(data,'Mine')\r\n       return data.toFixed(2)\r\n    }\r\n    render() {\r\n        const list = this.props.list\r\n        const currency_list = this.props.currency_list\r\n        // console.log(list)\r\n        const amount = {\r\n            color:this.props.color\r\n        }\r\n        const label = {\r\n            // padding: '11px 10px',\r\n            fontSize: '1 em',\r\n            \r\n        }\r\n        // return (\r\n        //     <>\r\n        //     <Row className='chartCard' >\r\n        //         <ListGroup variant=\"flush\">\r\n        //         {list.map(data=>\r\n        //             <ListGroup.Item style={label} >\r\n        //                 <Row style={{height:'42px'}}>\r\n        //                     <Col style={amount}> <h6> {data.name} </h6></Col>\r\n        //                     {/* <Col lg='4'>{data.num}</Col> */}\r\n        //                     <Col>{this.Converter(data.currency,currency_list,data.receivables).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} </Col>\r\n        //                 </Row>\r\n        //             </ListGroup.Item>)}\r\n        //             </ListGroup>\r\n        //         </Row>\r\n        //     </>\r\n        // )\r\n\r\n        return(\r\n            <div className='chartCard'>\r\n            <Table celled padded >\r\n            <Table.Header>\r\n              <Table.Row >\r\n                <Table.HeaderCell style={{color:this.props.color}} >{this.props.name}</Table.HeaderCell>\r\n                <Table.HeaderCell style={{color:this.props.color}}>Amount</Table.HeaderCell>\r\n              </Table.Row>\r\n            </Table.Header>      \r\n            <Table.Body>\r\n            {list.map(data=>\r\n              <Table.Row>\r\n                <Table.Cell style={{width:500}}>\r\n                {data.name}\r\n                </Table.Cell>\r\n                <Table.Cell >{this.Converter(data.currency,currency_list,data.receivables).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</Table.Cell>\r\n              </Table.Row>\r\n            )}\r\n            </Table.Body>            \r\n          </Table>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Top5","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\billing\\Payments\\EditPayments.js",["1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088"],"import React,{ useEffect,useState} from 'react'\r\nimport { Modal, Row, Form, Col, Card, ModalTitle } from 'react-bootstrap'\r\nimport axiosInstance from '../../../utils/axiosinstance'\r\nimport CurrencyFormat from 'react-currency-format'\r\nimport { DateFormat } from '../../../utils/DateFormat'\r\nimport { Alert } from '../../../utils/Utilities'\r\nimport { data } from 'currency-codes'\r\nfunction EditPayments({showPaymentEdit,handleClose,mode,credit,contAmount,clientAmount,payment,InvNo,InvAmount,issueDate,Invlist,EditQuote,user,margin,payments,clientCredit,contCredit}) {\r\n\r\n    const [Price, setPrice] = useState('')\r\n    const [payment_date, setpayment_date] = useState('')\r\n    const [creditAmount, setCreditAmount] = useState('')\r\n    const [creditRecvdDate, setcreditRecvdDate] = useState('')\r\n    const [creditNoteNo, setcreditNoteNo] = useState('')\r\n    useEffect(()=>{\r\n        setPrice(payment.price)\r\n        setpayment_date(DateFormat(payment.payment_date))\r\n        setCreditAmount(credit.credit_amount)\r\n        setcreditRecvdDate(DateFormat(credit.credit_date))\r\n        setcreditNoteNo(credit.credit_note)\r\n        console.log(Invlist)\r\n    },[showPaymentEdit])\r\n\r\n\r\n    const Edit = () =>{\r\n        const filtered = payments.filter(inv => inv.id != payment.id)\r\n        let amount = 0\r\n        const edited = {id:payment.id,price:Price,payment_date}\r\n        filtered.push(edited)\r\n        filtered.map(inv => {\r\n            amount += parseFloat(inv.price)\r\n        })\r\n        if(amount <= parseFloat(InvAmount))\r\n        {\r\n            if(user == 'Client'){\r\n                clientAmount('receivedAmount',amount,'edit')\r\n            }\r\n            else{\r\n                contAmount('paidAmount',amount,'edit')\r\n            }\r\n            axiosInstance.post('invoice/save_invoice_payment',{invoice_id:payment.invoice_id,payments:[{id:payment.id,price:Price,payment_date}]})\r\n            .then(res =>{\r\n                console.log(res.data)\r\n                Alert('success','Succes!',`${res.data.message.success}`)\r\n            })\r\n        }\r\n        else{\r\n            Alert('error','Error!','Total Invoice payment amount should not be greater than Main Invoice amount')\r\n        }\r\n        \r\n    }\r\n\r\n    const EditCredit = () =>{\r\n        const filtered = Invlist.filter(cred => cred.id != credit.id)\r\n        let amount = 0\r\n        const editedcredit = {id:credit.id,credit_note:creditNoteNo,credit_amount:creditAmount,credit_date:creditRecvdDate}\r\n        const data = {invoice_id:credit.invoice_id,credits:[{id:credit.id,credit_note:creditNoteNo,credit_amount:creditAmount,credit_date:creditRecvdDate}]}\r\n        filtered.push(editedcredit)\r\n        filtered.map(inv => {\r\n            amount += parseFloat(inv.credit_amount)\r\n        })\r\n        if(amount <= parseFloat(InvAmount))\r\n        {\r\n            if(user == 'Client'){\r\n                clientCredit('creditAmount',amount,'edit')\r\n                let ClientcreditAmount = 0\r\n                filtered.map(credit => {\r\n                    // if(credit !== undefined){\r\n                        ClientcreditAmount += parseFloat(credit.credit_amount)\r\n                    // }\r\n                })\r\n                margin('creditAmount',ClientcreditAmount)\r\n            }\r\n            else{\r\n                contCredit('creditAmount',amount,'edit')\r\n                let ContcreditAmount = 0\r\n            filtered.map(credit => {\r\n                // if(credit !== undefined){\r\n                    ContcreditAmount += parseInt(credit.credit_amount)\r\n                // }\r\n            })\r\n            margin('credit_amount',ContcreditAmount)\r\n            }\r\n            axiosInstance.post('invoice/save_invoice_credit',data)\r\n            .then(res =>{\r\n                // console.log(res.data)\r\n                Alert('success','Succes!',`${res.data.message.success}`)\r\n                EditQuote()\r\n            })\r\n        }\r\n        else{\r\n            Alert('error','Error!','Total Credit amount should not be greater than Main Invoice amount')\r\n        }\r\n        // console.log(filtered)\r\n        // if(user == 'Client'){\r\n        //     let ClientcreditAmount = 0\r\n        //     filtered.map(credit => {\r\n        //         // if(credit !== undefined){\r\n        //             ClientcreditAmount += parseFloat(credit.credit_amount)\r\n        //         // }\r\n        //     })\r\n        //     margin('creditAmount',ClientcreditAmount)\r\n        // }\r\n        // else{\r\n        //     let ContcreditAmount = 0\r\n        //     filtered.map(credit => {\r\n        //         // if(credit !== undefined){\r\n        //             ContcreditAmount += parseInt(credit.credit_amount)\r\n        //         // }\r\n        //     })\r\n        //     margin('credit_amount',ContcreditAmount)\r\n        // }\r\n        // axiosInstance.post('invoice/save_invoice_credit',data)\r\n        // .then(res =>{\r\n        //     // console.log(res.data)\r\n        //     Alert('success','Succes!',`${res.data.message.success}`)\r\n        //     EditQuote()\r\n        // })\r\n    }\r\n    return (\r\n        <Modal\r\n            show={showPaymentEdit}\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n            size=\"xl\"\r\n            style={{ marginTop: '50px', marginLeft: '90px',backgroundColor:'#00000055' }}\r\n            >\r\n            \r\n                    <Modal.Header >\r\n                        <Modal.Title>{mode} </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                    <button class=\"ui icon button\" onClick={handleClose} ><i aria-hidden=\"true\" class=\"angle left link icon\"></i>Close</button>\r\n                    <Row style={{marginTop:\"20px\"}}>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Invoice Number</Form.Label>\r\n                                <Form.Control disabled value={InvNo}/>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Invoice Amount</Form.Label>\r\n                               <CurrencyFormat\r\n                                    className='form-control'\r\n                                    value={InvAmount}\r\n                                    disabled\r\n                                    placeholder=\"Received Amount\"\r\n                                    thousandSeparator={true} />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Issued Date</Form.Label>\r\n                                <Form.Control value={issueDate} disabled type=\"date\"/>\r\n                            </Col>\r\n                        </Row>\r\n                        {mode == 'Payment Edit'?\r\n                        <Row style={{marginTop:'20px'}}>\r\n                            <Col lg={3}>\r\n                            <Form.Label>Received Amount</Form.Label>\r\n                                <CurrencyFormat\r\n                                    className='form-control'\r\n                                    value={Price}\r\n                                    placeholder=\"Received Amount\"\r\n                                    onValueChange={(values) => setPrice(values.value)}\r\n                                    thousandSeparator={true} />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Payment Date</Form.Label>\r\n                                <Form.Control value={payment_date} onChange={(e)=>setpayment_date(e.target.value)} type=\"date\"/>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <button className='ui primary button' style={{marginTop:\"30px\"}} onClick={Edit}>Edit</button>\r\n                            </Col>\r\n                        </Row>\r\n                        :\r\n                        <Row style={{marginTop:'20px'}}>\r\n                            <Col lg={3}>\r\n                            <Form.Label>Credit Amount</Form.Label>\r\n                                <CurrencyFormat\r\n                                    className='form-control'\r\n                                    value={creditAmount}\r\n                                    placeholder=\"Credit Amount\"\r\n                                    onValueChange={(values) => \r\n                                        setCreditAmount(values.value)}\r\n                                    thousandSeparator={true} />\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Credit Received Date</Form.Label>\r\n                                <Form.Control value={creditRecvdDate} onChange={(e)=>setcreditRecvdDate(e.target.value)} type=\"date\"/>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <Form.Label>Credit Note No</Form.Label>\r\n                                <Form.Control value={creditNoteNo} placeholder=\"Credit Note No\" onChange={(e)=>setcreditNoteNo(e.target.value)} type=\"text\"/>\r\n                            </Col>\r\n                            <Col lg={3}>\r\n                                <button className='ui primary button' onClick={EditCredit} style={{marginTop:\"30px\"}}>Edit</button>\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                    </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default EditPayments\r\n","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\ChartData.js",["1089","1090"],"C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\utils\\DateFilter.js",["1091"],"export const DateFilter = (invoice) => {\r\n    let total = 0;\r\n    let received = 0;\r\n\r\n    invoice.map(inv => {\r\n        total += parseInt(inv.invoice_amount)\r\n        received += (parseInt(inv.price) - parseInt(inv.credit_amount))\r\n    })\r\n    let remaining = total - received\r\n    const data = [total, received, remaining]\r\n    return data\r\n\r\n}","C:\\Users\\Pysch\\Documents\\ccm final new\\CCM-Final\\src\\components\\administration\\dashboard\\Pdf.js",[],{"ruleId":"1092","replacedBy":"1093"},{"ruleId":"1094","replacedBy":"1095"},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1100","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1101","line":13,"column":8,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1102","line":14,"column":10,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":14},{"ruleId":"1103","severity":1,"message":"1104","line":51,"column":91,"nodeType":"1105","messageId":"1106","endLine":51,"endColumn":93},{"ruleId":"1103","severity":1,"message":"1104","line":53,"column":38,"nodeType":"1105","messageId":"1106","endLine":53,"endColumn":40},{"ruleId":"1096","severity":1,"message":"1107","line":80,"column":31,"nodeType":"1098","messageId":"1099","endLine":80,"endColumn":40},{"ruleId":"1096","severity":1,"message":"1108","line":80,"column":42,"nodeType":"1098","messageId":"1099","endLine":80,"endColumn":49},{"ruleId":"1096","severity":1,"message":"1109","line":80,"column":73,"nodeType":"1098","messageId":"1099","endLine":80,"endColumn":82},{"ruleId":"1096","severity":1,"message":"1110","line":80,"column":84,"nodeType":"1098","messageId":"1099","endLine":80,"endColumn":92},{"ruleId":"1096","severity":1,"message":"1111","line":80,"column":94,"nodeType":"1098","messageId":"1099","endLine":80,"endColumn":108},{"ruleId":"1096","severity":1,"message":"1108","line":94,"column":39,"nodeType":"1098","messageId":"1099","endLine":94,"endColumn":46},{"ruleId":"1096","severity":1,"message":"1112","line":94,"column":68,"nodeType":"1098","messageId":"1099","endLine":94,"endColumn":78},{"ruleId":"1096","severity":1,"message":"1113","line":94,"column":80,"nodeType":"1098","messageId":"1099","endLine":94,"endColumn":88},{"ruleId":"1096","severity":1,"message":"1114","line":94,"column":140,"nodeType":"1098","messageId":"1099","endLine":94,"endColumn":144},{"ruleId":"1103","severity":1,"message":"1104","line":262,"column":66,"nodeType":"1105","messageId":"1106","endLine":262,"endColumn":68},{"ruleId":"1096","severity":1,"message":"1115","line":5,"column":8,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1116","line":10,"column":8,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1117","line":11,"column":8,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1118","line":13,"column":8,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1119","line":23,"column":3,"nodeType":"1098","messageId":"1099","endLine":23,"endColumn":6},{"ruleId":"1096","severity":1,"message":"1120","line":24,"column":3,"nodeType":"1098","messageId":"1099","endLine":24,"endColumn":6},{"ruleId":"1096","severity":1,"message":"1121","line":25,"column":3,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":17},{"ruleId":"1096","severity":1,"message":"1122","line":26,"column":3,"nodeType":"1098","messageId":"1099","endLine":26,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1123","line":27,"column":3,"nodeType":"1098","messageId":"1099","endLine":27,"endColumn":14},{"ruleId":"1103","severity":1,"message":"1104","line":99,"column":41,"nodeType":"1105","messageId":"1106","endLine":99,"endColumn":43},{"ruleId":"1096","severity":1,"message":"1124","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1104","line":55,"column":79,"nodeType":"1105","messageId":"1106","endLine":55,"endColumn":81},{"ruleId":"1096","severity":1,"message":"1125","line":119,"column":29,"nodeType":"1098","messageId":"1099","endLine":119,"endColumn":43},{"ruleId":"1096","severity":1,"message":"1126","line":119,"column":45,"nodeType":"1098","messageId":"1099","endLine":119,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1126","line":147,"column":29,"nodeType":"1098","messageId":"1099","endLine":147,"endColumn":35},{"ruleId":"1096","severity":1,"message":"1100","line":2,"column":16,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1127","line":7,"column":8,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1102","line":8,"column":10,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1100","line":2,"column":16,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1128","line":4,"column":8,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1129","line":8,"column":10,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1115","line":5,"column":8,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1116","line":10,"column":8,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1117","line":11,"column":8,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1118","line":13,"column":8,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1119","line":23,"column":3,"nodeType":"1098","messageId":"1099","endLine":23,"endColumn":6},{"ruleId":"1096","severity":1,"message":"1120","line":24,"column":3,"nodeType":"1098","messageId":"1099","endLine":24,"endColumn":6},{"ruleId":"1096","severity":1,"message":"1121","line":25,"column":3,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":17},{"ruleId":"1096","severity":1,"message":"1122","line":26,"column":3,"nodeType":"1098","messageId":"1099","endLine":26,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1123","line":27,"column":3,"nodeType":"1098","messageId":"1099","endLine":27,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1130","line":74,"column":9,"nodeType":"1098","messageId":"1099","endLine":74,"endColumn":18},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1132","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1134","line":22,"column":8,"nodeType":"1098","messageId":"1099","endLine":22,"endColumn":16},{"ruleId":"1103","severity":1,"message":"1104","line":69,"column":106,"nodeType":"1105","messageId":"1106","endLine":69,"endColumn":108},{"ruleId":"1103","severity":1,"message":"1104","line":71,"column":49,"nodeType":"1105","messageId":"1106","endLine":71,"endColumn":51},{"ruleId":"1103","severity":1,"message":"1104","line":80,"column":83,"nodeType":"1105","messageId":"1106","endLine":80,"endColumn":85},{"ruleId":"1103","severity":1,"message":"1104","line":104,"column":65,"nodeType":"1105","messageId":"1106","endLine":104,"endColumn":67},{"ruleId":"1096","severity":1,"message":"1135","line":110,"column":31,"nodeType":"1098","messageId":"1099","endLine":110,"endColumn":41},{"ruleId":"1096","severity":1,"message":"1135","line":123,"column":39,"nodeType":"1098","messageId":"1099","endLine":123,"endColumn":49},{"ruleId":"1096","severity":1,"message":"1136","line":194,"column":15,"nodeType":"1098","messageId":"1099","endLine":194,"endColumn":22},{"ruleId":"1137","severity":1,"message":"1138","line":194,"column":45,"nodeType":"1139","messageId":"1140","endLine":194,"endColumn":47},{"ruleId":"1096","severity":1,"message":"1141","line":226,"column":107,"nodeType":"1098","messageId":"1099","endLine":226,"endColumn":114},{"ruleId":"1096","severity":1,"message":"1142","line":226,"column":116,"nodeType":"1098","messageId":"1099","endLine":226,"endColumn":127},{"ruleId":"1096","severity":1,"message":"1143","line":292,"column":31,"nodeType":"1098","messageId":"1099","endLine":292,"endColumn":35},{"ruleId":"1103","severity":1,"message":"1104","line":349,"column":68,"nodeType":"1105","messageId":"1106","endLine":349,"endColumn":70},{"ruleId":"1103","severity":1,"message":"1104","line":353,"column":34,"nodeType":"1105","messageId":"1106","endLine":353,"endColumn":36},{"ruleId":"1103","severity":1,"message":"1104","line":355,"column":40,"nodeType":"1105","messageId":"1106","endLine":355,"endColumn":42},{"ruleId":"1144","severity":1,"message":"1145","line":364,"column":17,"nodeType":"1146","endLine":364,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1147","line":372,"column":39,"nodeType":"1098","messageId":"1099","endLine":372,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1148","line":372,"column":93,"nodeType":"1098","messageId":"1099","endLine":372,"endColumn":108},{"ruleId":"1096","severity":1,"message":"1149","line":372,"column":110,"nodeType":"1098","messageId":"1099","endLine":372,"endColumn":114},{"ruleId":"1096","severity":1,"message":"1150","line":372,"column":116,"nodeType":"1098","messageId":"1099","endLine":372,"endColumn":130},{"ruleId":"1096","severity":1,"message":"1151","line":372,"column":132,"nodeType":"1098","messageId":"1099","endLine":372,"endColumn":144},{"ruleId":"1096","severity":1,"message":"1152","line":374,"column":15,"nodeType":"1098","messageId":"1099","endLine":374,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":390,"column":44,"nodeType":"1105","messageId":"1106","endLine":390,"endColumn":46},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1153","line":16,"column":8,"nodeType":"1098","messageId":"1099","endLine":16,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1102","line":17,"column":10,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1154","line":18,"column":8,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1155","line":20,"column":8,"nodeType":"1098","messageId":"1099","endLine":20,"endColumn":24},{"ruleId":"1096","severity":1,"message":"1156","line":21,"column":8,"nodeType":"1098","messageId":"1099","endLine":21,"endColumn":24},{"ruleId":"1096","severity":1,"message":"1157","line":22,"column":10,"nodeType":"1098","messageId":"1099","endLine":22,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1158","line":26,"column":10,"nodeType":"1098","messageId":"1099","endLine":26,"endColumn":17},{"ruleId":"1096","severity":1,"message":"1124","line":28,"column":5,"nodeType":"1098","messageId":"1099","endLine":28,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1159","line":89,"column":43,"nodeType":"1105","messageId":"1106","endLine":89,"endColumn":45},{"ruleId":"1103","severity":1,"message":"1104","line":102,"column":77,"nodeType":"1105","messageId":"1106","endLine":102,"endColumn":79},{"ruleId":"1103","severity":1,"message":"1104","line":103,"column":77,"nodeType":"1105","messageId":"1106","endLine":103,"endColumn":79},{"ruleId":"1103","severity":1,"message":"1104","line":104,"column":81,"nodeType":"1105","messageId":"1106","endLine":104,"endColumn":83},{"ruleId":"1103","severity":1,"message":"1104","line":105,"column":81,"nodeType":"1105","messageId":"1106","endLine":105,"endColumn":83},{"ruleId":"1103","severity":1,"message":"1104","line":106,"column":81,"nodeType":"1105","messageId":"1106","endLine":106,"endColumn":83},{"ruleId":"1103","severity":1,"message":"1104","line":107,"column":81,"nodeType":"1105","messageId":"1106","endLine":107,"endColumn":83},{"ruleId":"1103","severity":1,"message":"1104","line":108,"column":85,"nodeType":"1105","messageId":"1106","endLine":108,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":109,"column":85,"nodeType":"1105","messageId":"1106","endLine":109,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":110,"column":63,"nodeType":"1105","messageId":"1106","endLine":110,"endColumn":65},{"ruleId":"1103","severity":1,"message":"1104","line":111,"column":62,"nodeType":"1105","messageId":"1106","endLine":111,"endColumn":64},{"ruleId":"1103","severity":1,"message":"1104","line":112,"column":58,"nodeType":"1105","messageId":"1106","endLine":112,"endColumn":60},{"ruleId":"1103","severity":1,"message":"1104","line":123,"column":83,"nodeType":"1105","messageId":"1106","endLine":123,"endColumn":85},{"ruleId":"1096","severity":1,"message":"1160","line":126,"column":15,"nodeType":"1098","messageId":"1099","endLine":126,"endColumn":25},{"ruleId":"1137","severity":1,"message":"1138","line":126,"column":51,"nodeType":"1139","messageId":"1140","endLine":126,"endColumn":53},{"ruleId":"1103","severity":1,"message":"1104","line":127,"column":58,"nodeType":"1105","messageId":"1106","endLine":127,"endColumn":60},{"ruleId":"1096","severity":1,"message":"1112","line":166,"column":13,"nodeType":"1098","messageId":"1099","endLine":166,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1111","line":167,"column":13,"nodeType":"1098","messageId":"1099","endLine":167,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":181,"column":43,"nodeType":"1105","messageId":"1106","endLine":181,"endColumn":45},{"ruleId":"1103","severity":1,"message":"1104","line":182,"column":41,"nodeType":"1105","messageId":"1106","endLine":182,"endColumn":43},{"ruleId":"1103","severity":1,"message":"1104","line":183,"column":39,"nodeType":"1105","messageId":"1106","endLine":183,"endColumn":41},{"ruleId":"1103","severity":1,"message":"1104","line":184,"column":41,"nodeType":"1105","messageId":"1106","endLine":184,"endColumn":43},{"ruleId":"1103","severity":1,"message":"1104","line":185,"column":32,"nodeType":"1105","messageId":"1106","endLine":185,"endColumn":34},{"ruleId":"1103","severity":1,"message":"1104","line":186,"column":34,"nodeType":"1105","messageId":"1106","endLine":186,"endColumn":36},{"ruleId":"1103","severity":1,"message":"1104","line":187,"column":32,"nodeType":"1105","messageId":"1106","endLine":187,"endColumn":34},{"ruleId":"1103","severity":1,"message":"1104","line":188,"column":30,"nodeType":"1105","messageId":"1106","endLine":188,"endColumn":32},{"ruleId":"1103","severity":1,"message":"1104","line":222,"column":30,"nodeType":"1105","messageId":"1106","endLine":222,"endColumn":32},{"ruleId":"1103","severity":1,"message":"1104","line":223,"column":43,"nodeType":"1105","messageId":"1106","endLine":223,"endColumn":45},{"ruleId":"1103","severity":1,"message":"1104","line":224,"column":41,"nodeType":"1105","messageId":"1106","endLine":224,"endColumn":43},{"ruleId":"1103","severity":1,"message":"1104","line":225,"column":39,"nodeType":"1105","messageId":"1106","endLine":225,"endColumn":41},{"ruleId":"1103","severity":1,"message":"1104","line":226,"column":41,"nodeType":"1105","messageId":"1106","endLine":226,"endColumn":43},{"ruleId":"1103","severity":1,"message":"1104","line":227,"column":32,"nodeType":"1105","messageId":"1106","endLine":227,"endColumn":34},{"ruleId":"1103","severity":1,"message":"1104","line":228,"column":34,"nodeType":"1105","messageId":"1106","endLine":228,"endColumn":36},{"ruleId":"1103","severity":1,"message":"1104","line":229,"column":32,"nodeType":"1105","messageId":"1106","endLine":229,"endColumn":34},{"ruleId":"1161","severity":1,"message":"1162","line":230,"column":216,"nodeType":"1163","messageId":"1106","endLine":230,"endColumn":223},{"ruleId":"1103","severity":1,"message":"1159","line":261,"column":90,"nodeType":"1105","messageId":"1106","endLine":261,"endColumn":92},{"ruleId":"1103","severity":1,"message":"1104","line":279,"column":63,"nodeType":"1105","messageId":"1106","endLine":279,"endColumn":65},{"ruleId":"1096","severity":1,"message":"1164","line":300,"column":38,"nodeType":"1098","messageId":"1099","endLine":300,"endColumn":55},{"ruleId":"1096","severity":1,"message":"1108","line":300,"column":57,"nodeType":"1098","messageId":"1099","endLine":300,"endColumn":64},{"ruleId":"1096","severity":1,"message":"1165","line":300,"column":89,"nodeType":"1098","messageId":"1099","endLine":300,"endColumn":101},{"ruleId":"1166","severity":1,"message":"1167","line":313,"column":41,"nodeType":"1168","endLine":313,"endColumn":60},{"ruleId":"1166","severity":1,"message":"1167","line":323,"column":41,"nodeType":"1168","endLine":323,"endColumn":60},{"ruleId":"1166","severity":1,"message":"1167","line":346,"column":41,"nodeType":"1168","endLine":346,"endColumn":60},{"ruleId":"1166","severity":1,"message":"1167","line":359,"column":41,"nodeType":"1168","endLine":359,"endColumn":60},{"ruleId":"1166","severity":1,"message":"1167","line":384,"column":41,"nodeType":"1168","endLine":384,"endColumn":60},{"ruleId":"1169","severity":1,"message":"1170","line":427,"column":65,"nodeType":"1168","endLine":427,"endColumn":76},{"ruleId":"1169","severity":1,"message":"1170","line":433,"column":65,"nodeType":"1168","endLine":433,"endColumn":76},{"ruleId":"1169","severity":1,"message":"1170","line":439,"column":65,"nodeType":"1168","endLine":439,"endColumn":76},{"ruleId":"1169","severity":1,"message":"1170","line":445,"column":65,"nodeType":"1168","endLine":445,"endColumn":76},{"ruleId":"1171","severity":1,"message":"1172","line":10,"column":9,"nodeType":"1173","messageId":"1174","endLine":15,"endColumn":17,"fix":"1175"},{"ruleId":"1096","severity":1,"message":"1176","line":13,"column":7,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":14},{"ruleId":"1103","severity":1,"message":"1104","line":37,"column":75,"nodeType":"1105","messageId":"1106","endLine":37,"endColumn":77},{"ruleId":"1096","severity":1,"message":"1100","line":2,"column":16,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1128","line":4,"column":8,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1102","line":8,"column":10,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1129","line":9,"column":10,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1100","line":2,"column":16,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1128","line":4,"column":8,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1177","line":25,"column":43,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1177","line":47,"column":43,"nodeType":"1098","messageId":"1099","endLine":47,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1178","line":14,"column":10,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1179","line":14,"column":18,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":24},{"ruleId":"1096","severity":1,"message":"1180","line":14,"column":26,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":30},{"ruleId":"1096","severity":1,"message":"1181","line":14,"column":32,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":38},{"ruleId":"1096","severity":1,"message":"1153","line":16,"column":8,"nodeType":"1098","messageId":"1099","endLine":16,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1102","line":17,"column":10,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1182","line":18,"column":10,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1124","line":20,"column":5,"nodeType":"1098","messageId":"1099","endLine":20,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1183","line":24,"column":7,"nodeType":"1098","messageId":"1099","endLine":24,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1184","line":89,"column":71,"nodeType":"1098","messageId":"1099","endLine":89,"endColumn":77},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1178","line":14,"column":10,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1179","line":14,"column":18,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":24},{"ruleId":"1096","severity":1,"message":"1180","line":14,"column":26,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":30},{"ruleId":"1096","severity":1,"message":"1181","line":14,"column":32,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":38},{"ruleId":"1096","severity":1,"message":"1153","line":15,"column":8,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1102","line":17,"column":10,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1182","line":18,"column":10,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1124","line":20,"column":5,"nodeType":"1098","messageId":"1099","endLine":20,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1183","line":24,"column":7,"nodeType":"1098","messageId":"1099","endLine":24,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1184","line":85,"column":71,"nodeType":"1098","messageId":"1099","endLine":85,"endColumn":77},{"ruleId":"1096","severity":1,"message":"1097","line":2,"column":26,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":35},{"ruleId":"1096","severity":1,"message":"1185","line":4,"column":8,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1102","line":5,"column":10,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1153","line":6,"column":8,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1124","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1186","line":109,"column":17,"nodeType":"1098","messageId":"1099","endLine":109,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1187","line":109,"column":30,"nodeType":"1098","messageId":"1099","endLine":109,"endColumn":43},{"ruleId":"1096","severity":1,"message":"1126","line":109,"column":45,"nodeType":"1098","messageId":"1099","endLine":109,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1165","line":109,"column":73,"nodeType":"1098","messageId":"1099","endLine":109,"endColumn":85},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1102","line":14,"column":10,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1153","line":15,"column":8,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1124","line":20,"column":5,"nodeType":"1098","messageId":"1099","endLine":20,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1104","line":94,"column":54,"nodeType":"1105","messageId":"1106","endLine":94,"endColumn":56},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1189","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1190","line":14,"column":8,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1124","line":20,"column":5,"nodeType":"1098","messageId":"1099","endLine":20,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1191","line":68,"column":17,"nodeType":"1098","messageId":"1099","endLine":68,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1192","line":78,"column":17,"nodeType":"1098","messageId":"1099","endLine":78,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1193","line":110,"column":27,"nodeType":"1098","messageId":"1099","endLine":110,"endColumn":36},{"ruleId":"1096","severity":1,"message":"1194","line":110,"column":37,"nodeType":"1098","messageId":"1099","endLine":110,"endColumn":44},{"ruleId":"1096","severity":1,"message":"1195","line":110,"column":76,"nodeType":"1098","messageId":"1099","endLine":110,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1196","line":110,"column":89,"nodeType":"1098","messageId":"1099","endLine":110,"endColumn":104},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1102","line":12,"column":10,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1153","line":13,"column":8,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1124","line":19,"column":5,"nodeType":"1098","messageId":"1099","endLine":19,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1149","line":46,"column":19,"nodeType":"1098","messageId":"1099","endLine":46,"endColumn":23},{"ruleId":"1103","severity":1,"message":"1104","line":119,"column":52,"nodeType":"1105","messageId":"1106","endLine":119,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1128","line":16,"column":8,"nodeType":"1098","messageId":"1099","endLine":16,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1197","line":17,"column":8,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1198","line":18,"column":8,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":18},{"ruleId":"1096","severity":1,"message":"1199","line":22,"column":10,"nodeType":"1098","messageId":"1099","endLine":22,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1153","line":25,"column":8,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1200","line":26,"column":8,"nodeType":"1098","messageId":"1099","endLine":26,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1201","line":29,"column":8,"nodeType":"1098","messageId":"1099","endLine":29,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1124","line":30,"column":5,"nodeType":"1098","messageId":"1099","endLine":30,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1104","line":70,"column":79,"nodeType":"1105","messageId":"1106","endLine":70,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":71,"column":85,"nodeType":"1105","messageId":"1106","endLine":71,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":72,"column":49,"nodeType":"1105","messageId":"1106","endLine":72,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1126","line":117,"column":17,"nodeType":"1098","messageId":"1099","endLine":117,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1202","line":145,"column":17,"nodeType":"1098","messageId":"1099","endLine":145,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1202","line":170,"column":17,"nodeType":"1098","messageId":"1099","endLine":170,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1159","line":250,"column":25,"nodeType":"1105","messageId":"1106","endLine":250,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":269,"column":85,"nodeType":"1105","messageId":"1106","endLine":269,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":283,"column":85,"nodeType":"1105","messageId":"1106","endLine":283,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1203","line":307,"column":42,"nodeType":"1098","messageId":"1099","endLine":307,"endColumn":53},{"ruleId":"1103","severity":1,"message":"1104","line":309,"column":25,"nodeType":"1105","messageId":"1106","endLine":309,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":311,"column":79,"nodeType":"1105","messageId":"1106","endLine":311,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":312,"column":119,"nodeType":"1105","messageId":"1106","endLine":312,"endColumn":121},{"ruleId":"1103","severity":1,"message":"1104","line":313,"column":114,"nodeType":"1105","messageId":"1106","endLine":313,"endColumn":116},{"ruleId":"1103","severity":1,"message":"1104","line":319,"column":71,"nodeType":"1105","messageId":"1106","endLine":319,"endColumn":73},{"ruleId":"1103","severity":1,"message":"1104","line":320,"column":115,"nodeType":"1105","messageId":"1106","endLine":320,"endColumn":117},{"ruleId":"1103","severity":1,"message":"1104","line":321,"column":110,"nodeType":"1105","messageId":"1106","endLine":321,"endColumn":112},{"ruleId":"1096","severity":1,"message":"1203","line":328,"column":17,"nodeType":"1098","messageId":"1099","endLine":328,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1202","line":336,"column":146,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":160},{"ruleId":"1096","severity":1,"message":"1165","line":336,"column":162,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":174},{"ruleId":"1096","severity":1,"message":"1187","line":336,"column":189,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":202},{"ruleId":"1103","severity":1,"message":"1104","line":498,"column":69,"nodeType":"1105","messageId":"1106","endLine":498,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":529,"column":89,"nodeType":"1105","messageId":"1106","endLine":529,"endColumn":91},{"ruleId":"1096","severity":1,"message":"1131","line":2,"column":33,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":39},{"ruleId":"1096","severity":1,"message":"1204","line":4,"column":8,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":20},{"ruleId":"1103","severity":1,"message":"1104","line":15,"column":73,"nodeType":"1105","messageId":"1106","endLine":15,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":30,"column":73,"nodeType":"1105","messageId":"1106","endLine":30,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":46,"column":22,"nodeType":"1105","messageId":"1106","endLine":46,"endColumn":24},{"ruleId":"1103","severity":1,"message":"1104","line":58,"column":61,"nodeType":"1105","messageId":"1106","endLine":58,"endColumn":63},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1128","line":16,"column":8,"nodeType":"1098","messageId":"1099","endLine":16,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1197","line":17,"column":8,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1198","line":18,"column":8,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":18},{"ruleId":"1096","severity":1,"message":"1199","line":22,"column":10,"nodeType":"1098","messageId":"1099","endLine":22,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1153","line":25,"column":8,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1200","line":26,"column":8,"nodeType":"1098","messageId":"1099","endLine":26,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1201","line":29,"column":8,"nodeType":"1098","messageId":"1099","endLine":29,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1124","line":30,"column":5,"nodeType":"1098","messageId":"1099","endLine":30,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1104","line":70,"column":79,"nodeType":"1105","messageId":"1106","endLine":70,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":71,"column":85,"nodeType":"1105","messageId":"1106","endLine":71,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":72,"column":49,"nodeType":"1105","messageId":"1106","endLine":72,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1126","line":117,"column":17,"nodeType":"1098","messageId":"1099","endLine":117,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1202","line":145,"column":17,"nodeType":"1098","messageId":"1099","endLine":145,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1202","line":170,"column":17,"nodeType":"1098","messageId":"1099","endLine":170,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1159","line":250,"column":25,"nodeType":"1105","messageId":"1106","endLine":250,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":269,"column":85,"nodeType":"1105","messageId":"1106","endLine":269,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":283,"column":85,"nodeType":"1105","messageId":"1106","endLine":283,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1203","line":307,"column":42,"nodeType":"1098","messageId":"1099","endLine":307,"endColumn":53},{"ruleId":"1103","severity":1,"message":"1104","line":309,"column":25,"nodeType":"1105","messageId":"1106","endLine":309,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":311,"column":79,"nodeType":"1105","messageId":"1106","endLine":311,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":312,"column":119,"nodeType":"1105","messageId":"1106","endLine":312,"endColumn":121},{"ruleId":"1103","severity":1,"message":"1104","line":313,"column":114,"nodeType":"1105","messageId":"1106","endLine":313,"endColumn":116},{"ruleId":"1103","severity":1,"message":"1104","line":319,"column":71,"nodeType":"1105","messageId":"1106","endLine":319,"endColumn":73},{"ruleId":"1103","severity":1,"message":"1104","line":320,"column":115,"nodeType":"1105","messageId":"1106","endLine":320,"endColumn":117},{"ruleId":"1103","severity":1,"message":"1104","line":321,"column":110,"nodeType":"1105","messageId":"1106","endLine":321,"endColumn":112},{"ruleId":"1096","severity":1,"message":"1203","line":328,"column":17,"nodeType":"1098","messageId":"1099","endLine":328,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1202","line":336,"column":146,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":160},{"ruleId":"1096","severity":1,"message":"1165","line":336,"column":162,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":174},{"ruleId":"1096","severity":1,"message":"1187","line":336,"column":189,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":202},{"ruleId":"1103","severity":1,"message":"1104","line":498,"column":69,"nodeType":"1105","messageId":"1106","endLine":498,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":529,"column":89,"nodeType":"1105","messageId":"1106","endLine":529,"endColumn":91},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1128","line":16,"column":8,"nodeType":"1098","messageId":"1099","endLine":16,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1197","line":17,"column":8,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1198","line":18,"column":8,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":18},{"ruleId":"1096","severity":1,"message":"1199","line":23,"column":10,"nodeType":"1098","messageId":"1099","endLine":23,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1153","line":25,"column":8,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1200","line":26,"column":8,"nodeType":"1098","messageId":"1099","endLine":26,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1201","line":29,"column":8,"nodeType":"1098","messageId":"1099","endLine":29,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1124","line":30,"column":5,"nodeType":"1098","messageId":"1099","endLine":30,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1104","line":70,"column":79,"nodeType":"1105","messageId":"1106","endLine":70,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":71,"column":85,"nodeType":"1105","messageId":"1106","endLine":71,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":72,"column":49,"nodeType":"1105","messageId":"1106","endLine":72,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1126","line":117,"column":17,"nodeType":"1098","messageId":"1099","endLine":117,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1202","line":145,"column":17,"nodeType":"1098","messageId":"1099","endLine":145,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1202","line":170,"column":17,"nodeType":"1098","messageId":"1099","endLine":170,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1159","line":250,"column":25,"nodeType":"1105","messageId":"1106","endLine":250,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":269,"column":85,"nodeType":"1105","messageId":"1106","endLine":269,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":283,"column":85,"nodeType":"1105","messageId":"1106","endLine":283,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1203","line":307,"column":42,"nodeType":"1098","messageId":"1099","endLine":307,"endColumn":53},{"ruleId":"1103","severity":1,"message":"1104","line":309,"column":25,"nodeType":"1105","messageId":"1106","endLine":309,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":311,"column":79,"nodeType":"1105","messageId":"1106","endLine":311,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":312,"column":119,"nodeType":"1105","messageId":"1106","endLine":312,"endColumn":121},{"ruleId":"1103","severity":1,"message":"1104","line":313,"column":114,"nodeType":"1105","messageId":"1106","endLine":313,"endColumn":116},{"ruleId":"1103","severity":1,"message":"1104","line":319,"column":71,"nodeType":"1105","messageId":"1106","endLine":319,"endColumn":73},{"ruleId":"1103","severity":1,"message":"1104","line":320,"column":115,"nodeType":"1105","messageId":"1106","endLine":320,"endColumn":117},{"ruleId":"1103","severity":1,"message":"1104","line":321,"column":110,"nodeType":"1105","messageId":"1106","endLine":321,"endColumn":112},{"ruleId":"1096","severity":1,"message":"1203","line":328,"column":17,"nodeType":"1098","messageId":"1099","endLine":328,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1202","line":336,"column":146,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":160},{"ruleId":"1096","severity":1,"message":"1165","line":336,"column":162,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":174},{"ruleId":"1096","severity":1,"message":"1187","line":336,"column":189,"nodeType":"1098","messageId":"1099","endLine":336,"endColumn":202},{"ruleId":"1103","severity":1,"message":"1104","line":498,"column":69,"nodeType":"1105","messageId":"1106","endLine":498,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":529,"column":89,"nodeType":"1105","messageId":"1106","endLine":529,"endColumn":91},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1128","line":16,"column":8,"nodeType":"1098","messageId":"1099","endLine":16,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1197","line":17,"column":8,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1198","line":18,"column":8,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":18},{"ruleId":"1096","severity":1,"message":"1199","line":22,"column":10,"nodeType":"1098","messageId":"1099","endLine":22,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1153","line":25,"column":8,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1200","line":26,"column":8,"nodeType":"1098","messageId":"1099","endLine":26,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1201","line":29,"column":8,"nodeType":"1098","messageId":"1099","endLine":29,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1124","line":31,"column":5,"nodeType":"1098","messageId":"1099","endLine":31,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1104","line":77,"column":79,"nodeType":"1105","messageId":"1106","endLine":77,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":78,"column":85,"nodeType":"1105","messageId":"1106","endLine":78,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":79,"column":49,"nodeType":"1105","messageId":"1106","endLine":79,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1126","line":124,"column":17,"nodeType":"1098","messageId":"1099","endLine":124,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1202","line":152,"column":17,"nodeType":"1098","messageId":"1099","endLine":152,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1202","line":178,"column":17,"nodeType":"1098","messageId":"1099","endLine":178,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1159","line":259,"column":25,"nodeType":"1105","messageId":"1106","endLine":259,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":278,"column":85,"nodeType":"1105","messageId":"1106","endLine":278,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":292,"column":85,"nodeType":"1105","messageId":"1106","endLine":292,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1205","line":300,"column":17,"nodeType":"1098","messageId":"1099","endLine":300,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1206","line":300,"column":36,"nodeType":"1098","messageId":"1099","endLine":300,"endColumn":47},{"ruleId":"1103","severity":1,"message":"1104","line":308,"column":85,"nodeType":"1105","messageId":"1106","endLine":308,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1203","line":333,"column":42,"nodeType":"1098","messageId":"1099","endLine":333,"endColumn":53},{"ruleId":"1103","severity":1,"message":"1104","line":335,"column":25,"nodeType":"1105","messageId":"1106","endLine":335,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":337,"column":79,"nodeType":"1105","messageId":"1106","endLine":337,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":338,"column":119,"nodeType":"1105","messageId":"1106","endLine":338,"endColumn":121},{"ruleId":"1103","severity":1,"message":"1104","line":339,"column":114,"nodeType":"1105","messageId":"1106","endLine":339,"endColumn":116},{"ruleId":"1103","severity":1,"message":"1104","line":345,"column":71,"nodeType":"1105","messageId":"1106","endLine":345,"endColumn":73},{"ruleId":"1103","severity":1,"message":"1104","line":346,"column":115,"nodeType":"1105","messageId":"1106","endLine":346,"endColumn":117},{"ruleId":"1103","severity":1,"message":"1104","line":347,"column":110,"nodeType":"1105","messageId":"1106","endLine":347,"endColumn":112},{"ruleId":"1096","severity":1,"message":"1203","line":354,"column":17,"nodeType":"1098","messageId":"1099","endLine":354,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1202","line":362,"column":146,"nodeType":"1098","messageId":"1099","endLine":362,"endColumn":160},{"ruleId":"1096","severity":1,"message":"1165","line":362,"column":162,"nodeType":"1098","messageId":"1099","endLine":362,"endColumn":174},{"ruleId":"1096","severity":1,"message":"1187","line":362,"column":189,"nodeType":"1098","messageId":"1099","endLine":362,"endColumn":202},{"ruleId":"1103","severity":1,"message":"1104","line":490,"column":48,"nodeType":"1105","messageId":"1106","endLine":490,"endColumn":50},{"ruleId":"1103","severity":1,"message":"1104","line":529,"column":69,"nodeType":"1105","messageId":"1106","endLine":529,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":560,"column":89,"nodeType":"1105","messageId":"1106","endLine":560,"endColumn":91},{"ruleId":"1103","severity":1,"message":"1104","line":616,"column":48,"nodeType":"1105","messageId":"1106","endLine":616,"endColumn":50},{"ruleId":"1096","severity":1,"message":"1207","line":2,"column":15,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":24},{"ruleId":"1096","severity":1,"message":"1097","line":2,"column":26,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":35},{"ruleId":"1096","severity":1,"message":"1208","line":3,"column":9,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":4,"column":9,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1204","line":6,"column":8,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1209","line":15,"column":19,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1115","line":23,"column":10,"nodeType":"1098","messageId":"1099","endLine":23,"endColumn":17},{"ruleId":"1096","severity":1,"message":"1128","line":25,"column":8,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":13},{"ruleId":"1161","severity":1,"message":"1210","line":83,"column":13,"nodeType":"1163","messageId":"1106","endLine":83,"endColumn":22},{"ruleId":"1103","severity":1,"message":"1104","line":103,"column":70,"nodeType":"1105","messageId":"1106","endLine":103,"endColumn":72},{"ruleId":"1096","severity":1,"message":"1211","line":137,"column":23,"nodeType":"1098","messageId":"1099","endLine":137,"endColumn":38},{"ruleId":"1103","severity":1,"message":"1104","line":137,"column":89,"nodeType":"1105","messageId":"1106","endLine":137,"endColumn":91},{"ruleId":"1103","severity":1,"message":"1104","line":156,"column":61,"nodeType":"1105","messageId":"1106","endLine":156,"endColumn":63},{"ruleId":"1096","severity":1,"message":"1212","line":213,"column":19,"nodeType":"1098","messageId":"1099","endLine":213,"endColumn":28},{"ruleId":"1213","severity":1,"message":"1214","line":227,"column":12,"nodeType":"1105","messageId":"1215","endLine":227,"endColumn":32},{"ruleId":"1103","severity":1,"message":"1104","line":227,"column":26,"nodeType":"1105","messageId":"1106","endLine":227,"endColumn":28},{"ruleId":"1103","severity":1,"message":"1104","line":227,"column":50,"nodeType":"1105","messageId":"1106","endLine":227,"endColumn":52},{"ruleId":"1103","severity":1,"message":"1104","line":227,"column":80,"nodeType":"1105","messageId":"1106","endLine":227,"endColumn":82},{"ruleId":"1213","severity":1,"message":"1214","line":230,"column":12,"nodeType":"1105","messageId":"1215","endLine":230,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1104","line":230,"column":25,"nodeType":"1105","messageId":"1106","endLine":230,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":230,"column":48,"nodeType":"1105","messageId":"1106","endLine":230,"endColumn":50},{"ruleId":"1103","severity":1,"message":"1104","line":230,"column":77,"nodeType":"1105","messageId":"1106","endLine":230,"endColumn":79},{"ruleId":"1096","severity":1,"message":"1191","line":258,"column":17,"nodeType":"1098","messageId":"1099","endLine":258,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1104","line":337,"column":17,"nodeType":"1105","messageId":"1106","endLine":337,"endColumn":19},{"ruleId":"1103","severity":1,"message":"1104","line":384,"column":59,"nodeType":"1105","messageId":"1106","endLine":384,"endColumn":61},{"ruleId":"1096","severity":1,"message":"1141","line":402,"column":13,"nodeType":"1098","messageId":"1099","endLine":402,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1216","line":402,"column":22,"nodeType":"1098","messageId":"1099","endLine":402,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1217","line":402,"column":187,"nodeType":"1098","messageId":"1099","endLine":402,"endColumn":196},{"ruleId":"1096","severity":1,"message":"1218","line":405,"column":85,"nodeType":"1098","messageId":"1099","endLine":405,"endColumn":98},{"ruleId":"1103","severity":1,"message":"1104","line":482,"column":69,"nodeType":"1105","messageId":"1106","endLine":482,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":486,"column":60,"nodeType":"1105","messageId":"1106","endLine":486,"endColumn":62},{"ruleId":"1096","severity":1,"message":"1219","line":520,"column":23,"nodeType":"1098","messageId":"1099","endLine":520,"endColumn":35},{"ruleId":"1103","severity":1,"message":"1104","line":526,"column":57,"nodeType":"1105","messageId":"1106","endLine":526,"endColumn":59},{"ruleId":"1096","severity":1,"message":"1216","line":573,"column":22,"nodeType":"1098","messageId":"1099","endLine":573,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1218","line":575,"column":89,"nodeType":"1098","messageId":"1099","endLine":575,"endColumn":102},{"ruleId":"1096","severity":1,"message":"1212","line":575,"column":141,"nodeType":"1098","messageId":"1099","endLine":575,"endColumn":150},{"ruleId":"1096","severity":1,"message":"1220","line":577,"column":19,"nodeType":"1098","messageId":"1099","endLine":577,"endColumn":30},{"ruleId":"1096","severity":1,"message":"1221","line":590,"column":19,"nodeType":"1098","messageId":"1099","endLine":590,"endColumn":28},{"ruleId":"1103","severity":1,"message":"1159","line":690,"column":61,"nodeType":"1105","messageId":"1106","endLine":690,"endColumn":63},{"ruleId":"1103","severity":1,"message":"1104","line":709,"column":17,"nodeType":"1105","messageId":"1106","endLine":709,"endColumn":19},{"ruleId":"1103","severity":1,"message":"1104","line":717,"column":17,"nodeType":"1105","messageId":"1106","endLine":717,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1222","line":739,"column":17,"nodeType":"1098","messageId":"1099","endLine":739,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1216","line":754,"column":22,"nodeType":"1098","messageId":"1099","endLine":754,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1223","line":754,"column":187,"nodeType":"1098","messageId":"1099","endLine":754,"endColumn":195},{"ruleId":"1096","severity":1,"message":"1224","line":807,"column":39,"nodeType":"1098","messageId":"1099","endLine":807,"endColumn":48},{"ruleId":"1096","severity":1,"message":"1225","line":808,"column":13,"nodeType":"1098","messageId":"1099","endLine":808,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1226","line":808,"column":27,"nodeType":"1098","messageId":"1099","endLine":808,"endColumn":39},{"ruleId":"1096","severity":1,"message":"1227","line":808,"column":41,"nodeType":"1098","messageId":"1099","endLine":808,"endColumn":49},{"ruleId":"1096","severity":1,"message":"1216","line":808,"column":60,"nodeType":"1098","messageId":"1099","endLine":808,"endColumn":69},{"ruleId":"1096","severity":1,"message":"1228","line":808,"column":71,"nodeType":"1098","messageId":"1099","endLine":808,"endColumn":80},{"ruleId":"1096","severity":1,"message":"1229","line":808,"column":82,"nodeType":"1098","messageId":"1099","endLine":808,"endColumn":89},{"ruleId":"1096","severity":1,"message":"1202","line":810,"column":13,"nodeType":"1098","messageId":"1099","endLine":810,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1148","line":810,"column":42,"nodeType":"1098","messageId":"1099","endLine":810,"endColumn":57},{"ruleId":"1096","severity":1,"message":"1230","line":810,"column":76,"nodeType":"1098","messageId":"1099","endLine":810,"endColumn":94},{"ruleId":"1096","severity":1,"message":"1150","line":810,"column":96,"nodeType":"1098","messageId":"1099","endLine":810,"endColumn":110},{"ruleId":"1096","severity":1,"message":"1231","line":811,"column":13,"nodeType":"1098","messageId":"1099","endLine":811,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1232","line":811,"column":28,"nodeType":"1098","messageId":"1099","endLine":811,"endColumn":39},{"ruleId":"1103","severity":1,"message":"1104","line":877,"column":48,"nodeType":"1105","messageId":"1106","endLine":877,"endColumn":50},{"ruleId":"1103","severity":1,"message":"1104","line":908,"column":77,"nodeType":"1105","messageId":"1106","endLine":908,"endColumn":79},{"ruleId":"1103","severity":1,"message":"1104","line":927,"column":77,"nodeType":"1105","messageId":"1106","endLine":927,"endColumn":79},{"ruleId":"1103","severity":1,"message":"1104","line":941,"column":73,"nodeType":"1105","messageId":"1106","endLine":941,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":957,"column":73,"nodeType":"1105","messageId":"1106","endLine":957,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":969,"column":73,"nodeType":"1105","messageId":"1106","endLine":969,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":978,"column":171,"nodeType":"1105","messageId":"1106","endLine":978,"endColumn":173},{"ruleId":"1103","severity":1,"message":"1104","line":992,"column":65,"nodeType":"1105","messageId":"1106","endLine":992,"endColumn":67},{"ruleId":"1103","severity":1,"message":"1104","line":1000,"column":69,"nodeType":"1105","messageId":"1106","endLine":1000,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":1011,"column":63,"nodeType":"1105","messageId":"1106","endLine":1011,"endColumn":65},{"ruleId":"1103","severity":1,"message":"1104","line":1019,"column":63,"nodeType":"1105","messageId":"1106","endLine":1019,"endColumn":65},{"ruleId":"1103","severity":1,"message":"1104","line":1073,"column":46,"nodeType":"1105","messageId":"1106","endLine":1073,"endColumn":48},{"ruleId":"1103","severity":1,"message":"1104","line":1085,"column":63,"nodeType":"1105","messageId":"1106","endLine":1085,"endColumn":65},{"ruleId":"1103","severity":1,"message":"1104","line":1095,"column":63,"nodeType":"1105","messageId":"1106","endLine":1095,"endColumn":65},{"ruleId":"1103","severity":1,"message":"1104","line":1100,"column":67,"nodeType":"1105","messageId":"1106","endLine":1100,"endColumn":69},{"ruleId":"1103","severity":1,"message":"1104","line":1103,"column":44,"nodeType":"1105","messageId":"1106","endLine":1103,"endColumn":46},{"ruleId":"1103","severity":1,"message":"1104","line":1109,"column":61,"nodeType":"1105","messageId":"1106","endLine":1109,"endColumn":63},{"ruleId":"1096","severity":1,"message":"1097","line":2,"column":16,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1208","line":3,"column":9,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1209","line":15,"column":19,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1233","line":23,"column":10,"nodeType":"1098","messageId":"1099","endLine":23,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1128","line":25,"column":8,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":13},{"ruleId":"1161","severity":1,"message":"1210","line":82,"column":13,"nodeType":"1163","messageId":"1106","endLine":82,"endColumn":22},{"ruleId":"1103","severity":1,"message":"1104","line":102,"column":70,"nodeType":"1105","messageId":"1106","endLine":102,"endColumn":72},{"ruleId":"1096","severity":1,"message":"1211","line":126,"column":23,"nodeType":"1098","messageId":"1099","endLine":126,"endColumn":38},{"ruleId":"1103","severity":1,"message":"1104","line":126,"column":89,"nodeType":"1105","messageId":"1106","endLine":126,"endColumn":91},{"ruleId":"1103","severity":1,"message":"1104","line":145,"column":61,"nodeType":"1105","messageId":"1106","endLine":145,"endColumn":63},{"ruleId":"1213","severity":1,"message":"1214","line":216,"column":12,"nodeType":"1105","messageId":"1215","endLine":216,"endColumn":32},{"ruleId":"1103","severity":1,"message":"1104","line":216,"column":26,"nodeType":"1105","messageId":"1106","endLine":216,"endColumn":28},{"ruleId":"1103","severity":1,"message":"1104","line":216,"column":50,"nodeType":"1105","messageId":"1106","endLine":216,"endColumn":52},{"ruleId":"1103","severity":1,"message":"1104","line":216,"column":80,"nodeType":"1105","messageId":"1106","endLine":216,"endColumn":82},{"ruleId":"1213","severity":1,"message":"1214","line":219,"column":12,"nodeType":"1105","messageId":"1215","endLine":219,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1104","line":219,"column":25,"nodeType":"1105","messageId":"1106","endLine":219,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":219,"column":48,"nodeType":"1105","messageId":"1106","endLine":219,"endColumn":50},{"ruleId":"1103","severity":1,"message":"1104","line":219,"column":77,"nodeType":"1105","messageId":"1106","endLine":219,"endColumn":79},{"ruleId":"1096","severity":1,"message":"1191","line":247,"column":17,"nodeType":"1098","messageId":"1099","endLine":247,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1104","line":326,"column":17,"nodeType":"1105","messageId":"1106","endLine":326,"endColumn":19},{"ruleId":"1103","severity":1,"message":"1104","line":373,"column":59,"nodeType":"1105","messageId":"1106","endLine":373,"endColumn":61},{"ruleId":"1096","severity":1,"message":"1216","line":391,"column":22,"nodeType":"1098","messageId":"1099","endLine":391,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1217","line":391,"column":187,"nodeType":"1098","messageId":"1099","endLine":391,"endColumn":196},{"ruleId":"1096","severity":1,"message":"1218","line":394,"column":85,"nodeType":"1098","messageId":"1099","endLine":394,"endColumn":98},{"ruleId":"1103","severity":1,"message":"1104","line":471,"column":69,"nodeType":"1105","messageId":"1106","endLine":471,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":475,"column":60,"nodeType":"1105","messageId":"1106","endLine":475,"endColumn":62},{"ruleId":"1103","severity":1,"message":"1104","line":514,"column":57,"nodeType":"1105","messageId":"1106","endLine":514,"endColumn":59},{"ruleId":"1096","severity":1,"message":"1216","line":561,"column":22,"nodeType":"1098","messageId":"1099","endLine":561,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1218","line":563,"column":89,"nodeType":"1098","messageId":"1099","endLine":563,"endColumn":102},{"ruleId":"1096","severity":1,"message":"1212","line":563,"column":141,"nodeType":"1098","messageId":"1099","endLine":563,"endColumn":150},{"ruleId":"1103","severity":1,"message":"1104","line":631,"column":65,"nodeType":"1105","messageId":"1106","endLine":631,"endColumn":67},{"ruleId":"1103","severity":1,"message":"1104","line":636,"column":56,"nodeType":"1105","messageId":"1106","endLine":636,"endColumn":58},{"ruleId":"1103","severity":1,"message":"1104","line":642,"column":68,"nodeType":"1105","messageId":"1106","endLine":642,"endColumn":70},{"ruleId":"1103","severity":1,"message":"1159","line":678,"column":61,"nodeType":"1105","messageId":"1106","endLine":678,"endColumn":63},{"ruleId":"1103","severity":1,"message":"1104","line":697,"column":17,"nodeType":"1105","messageId":"1106","endLine":697,"endColumn":19},{"ruleId":"1103","severity":1,"message":"1104","line":705,"column":17,"nodeType":"1105","messageId":"1106","endLine":705,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1216","line":742,"column":22,"nodeType":"1098","messageId":"1099","endLine":742,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1223","line":742,"column":187,"nodeType":"1098","messageId":"1099","endLine":742,"endColumn":195},{"ruleId":"1096","severity":1,"message":"1224","line":795,"column":39,"nodeType":"1098","messageId":"1099","endLine":795,"endColumn":48},{"ruleId":"1096","severity":1,"message":"1225","line":796,"column":13,"nodeType":"1098","messageId":"1099","endLine":796,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1226","line":796,"column":27,"nodeType":"1098","messageId":"1099","endLine":796,"endColumn":39},{"ruleId":"1096","severity":1,"message":"1227","line":796,"column":41,"nodeType":"1098","messageId":"1099","endLine":796,"endColumn":49},{"ruleId":"1096","severity":1,"message":"1216","line":796,"column":60,"nodeType":"1098","messageId":"1099","endLine":796,"endColumn":69},{"ruleId":"1096","severity":1,"message":"1228","line":796,"column":71,"nodeType":"1098","messageId":"1099","endLine":796,"endColumn":80},{"ruleId":"1096","severity":1,"message":"1229","line":796,"column":82,"nodeType":"1098","messageId":"1099","endLine":796,"endColumn":89},{"ruleId":"1096","severity":1,"message":"1148","line":798,"column":42,"nodeType":"1098","messageId":"1099","endLine":798,"endColumn":57},{"ruleId":"1096","severity":1,"message":"1230","line":798,"column":76,"nodeType":"1098","messageId":"1099","endLine":798,"endColumn":94},{"ruleId":"1096","severity":1,"message":"1150","line":798,"column":96,"nodeType":"1098","messageId":"1099","endLine":798,"endColumn":110},{"ruleId":"1096","severity":1,"message":"1231","line":799,"column":13,"nodeType":"1098","messageId":"1099","endLine":799,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1232","line":799,"column":28,"nodeType":"1098","messageId":"1099","endLine":799,"endColumn":39},{"ruleId":"1103","severity":1,"message":"1104","line":836,"column":153,"nodeType":"1105","messageId":"1106","endLine":836,"endColumn":155},{"ruleId":"1103","severity":1,"message":"1104","line":864,"column":48,"nodeType":"1105","messageId":"1106","endLine":864,"endColumn":50},{"ruleId":"1103","severity":1,"message":"1104","line":895,"column":77,"nodeType":"1105","messageId":"1106","endLine":895,"endColumn":79},{"ruleId":"1103","severity":1,"message":"1104","line":914,"column":77,"nodeType":"1105","messageId":"1106","endLine":914,"endColumn":79},{"ruleId":"1103","severity":1,"message":"1104","line":928,"column":73,"nodeType":"1105","messageId":"1106","endLine":928,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":944,"column":73,"nodeType":"1105","messageId":"1106","endLine":944,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":956,"column":73,"nodeType":"1105","messageId":"1106","endLine":956,"endColumn":75},{"ruleId":"1103","severity":1,"message":"1104","line":965,"column":171,"nodeType":"1105","messageId":"1106","endLine":965,"endColumn":173},{"ruleId":"1103","severity":1,"message":"1104","line":1014,"column":46,"nodeType":"1105","messageId":"1106","endLine":1014,"endColumn":48},{"ruleId":"1103","severity":1,"message":"1104","line":1026,"column":63,"nodeType":"1105","messageId":"1106","endLine":1026,"endColumn":65},{"ruleId":"1103","severity":1,"message":"1104","line":1036,"column":63,"nodeType":"1105","messageId":"1106","endLine":1036,"endColumn":65},{"ruleId":"1103","severity":1,"message":"1104","line":1041,"column":67,"nodeType":"1105","messageId":"1106","endLine":1041,"endColumn":69},{"ruleId":"1103","severity":1,"message":"1104","line":1044,"column":44,"nodeType":"1105","messageId":"1106","endLine":1044,"endColumn":46},{"ruleId":"1103","severity":1,"message":"1104","line":1050,"column":61,"nodeType":"1105","messageId":"1106","endLine":1050,"endColumn":63},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1128","line":16,"column":8,"nodeType":"1098","messageId":"1099","endLine":16,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1197","line":17,"column":8,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1198","line":18,"column":8,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":18},{"ruleId":"1096","severity":1,"message":"1153","line":24,"column":8,"nodeType":"1098","messageId":"1099","endLine":24,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1200","line":25,"column":8,"nodeType":"1098","messageId":"1099","endLine":25,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1201","line":28,"column":8,"nodeType":"1098","messageId":"1099","endLine":28,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1234","line":29,"column":8,"nodeType":"1098","messageId":"1099","endLine":29,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1124","line":30,"column":5,"nodeType":"1098","messageId":"1099","endLine":30,"endColumn":10},{"ruleId":"1103","severity":1,"message":"1104","line":77,"column":79,"nodeType":"1105","messageId":"1106","endLine":77,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":78,"column":85,"nodeType":"1105","messageId":"1106","endLine":78,"endColumn":87},{"ruleId":"1103","severity":1,"message":"1104","line":79,"column":49,"nodeType":"1105","messageId":"1106","endLine":79,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1126","line":146,"column":17,"nodeType":"1098","messageId":"1099","endLine":146,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1202","line":175,"column":17,"nodeType":"1098","messageId":"1099","endLine":175,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1202","line":202,"column":17,"nodeType":"1098","messageId":"1099","endLine":202,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1159","line":285,"column":25,"nodeType":"1105","messageId":"1106","endLine":285,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":305,"column":37,"nodeType":"1105","messageId":"1106","endLine":305,"endColumn":39},{"ruleId":"1103","severity":1,"message":"1104","line":308,"column":82,"nodeType":"1105","messageId":"1106","endLine":308,"endColumn":84},{"ruleId":"1103","severity":1,"message":"1104","line":328,"column":37,"nodeType":"1105","messageId":"1106","endLine":328,"endColumn":39},{"ruleId":"1103","severity":1,"message":"1104","line":331,"column":82,"nodeType":"1105","messageId":"1106","endLine":331,"endColumn":84},{"ruleId":"1096","severity":1,"message":"1205","line":340,"column":17,"nodeType":"1098","messageId":"1099","endLine":340,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1206","line":340,"column":36,"nodeType":"1098","messageId":"1099","endLine":340,"endColumn":47},{"ruleId":"1103","severity":1,"message":"1104","line":348,"column":85,"nodeType":"1105","messageId":"1106","endLine":348,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1205","line":360,"column":17,"nodeType":"1098","messageId":"1099","endLine":360,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1206","line":360,"column":36,"nodeType":"1098","messageId":"1099","endLine":360,"endColumn":47},{"ruleId":"1103","severity":1,"message":"1104","line":368,"column":85,"nodeType":"1105","messageId":"1106","endLine":368,"endColumn":87},{"ruleId":"1096","severity":1,"message":"1203","line":393,"column":42,"nodeType":"1098","messageId":"1099","endLine":393,"endColumn":53},{"ruleId":"1103","severity":1,"message":"1104","line":395,"column":25,"nodeType":"1105","messageId":"1106","endLine":395,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":397,"column":79,"nodeType":"1105","messageId":"1106","endLine":397,"endColumn":81},{"ruleId":"1103","severity":1,"message":"1104","line":398,"column":119,"nodeType":"1105","messageId":"1106","endLine":398,"endColumn":121},{"ruleId":"1103","severity":1,"message":"1104","line":399,"column":114,"nodeType":"1105","messageId":"1106","endLine":399,"endColumn":116},{"ruleId":"1103","severity":1,"message":"1104","line":405,"column":71,"nodeType":"1105","messageId":"1106","endLine":405,"endColumn":73},{"ruleId":"1103","severity":1,"message":"1104","line":406,"column":115,"nodeType":"1105","messageId":"1106","endLine":406,"endColumn":117},{"ruleId":"1103","severity":1,"message":"1104","line":407,"column":110,"nodeType":"1105","messageId":"1106","endLine":407,"endColumn":112},{"ruleId":"1096","severity":1,"message":"1203","line":414,"column":17,"nodeType":"1098","messageId":"1099","endLine":414,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1202","line":423,"column":146,"nodeType":"1098","messageId":"1099","endLine":423,"endColumn":160},{"ruleId":"1096","severity":1,"message":"1165","line":423,"column":162,"nodeType":"1098","messageId":"1099","endLine":423,"endColumn":174},{"ruleId":"1096","severity":1,"message":"1187","line":423,"column":189,"nodeType":"1098","messageId":"1099","endLine":423,"endColumn":202},{"ruleId":"1103","severity":1,"message":"1104","line":592,"column":69,"nodeType":"1105","messageId":"1106","endLine":592,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":623,"column":89,"nodeType":"1105","messageId":"1106","endLine":623,"endColumn":91},{"ruleId":"1096","severity":1,"message":"1235","line":126,"column":17,"nodeType":"1098","messageId":"1099","endLine":126,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1131","line":127,"column":32,"nodeType":"1098","messageId":"1099","endLine":127,"endColumn":38},{"ruleId":"1096","severity":1,"message":"1188","line":127,"column":40,"nodeType":"1098","messageId":"1099","endLine":127,"endColumn":45},{"ruleId":"1096","severity":1,"message":"1236","line":127,"column":47,"nodeType":"1098","messageId":"1099","endLine":127,"endColumn":52},{"ruleId":"1096","severity":1,"message":"1190","line":131,"column":8,"nodeType":"1098","messageId":"1099","endLine":131,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1142","line":135,"column":20,"nodeType":"1098","messageId":"1099","endLine":135,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1237","line":136,"column":20,"nodeType":"1098","messageId":"1099","endLine":136,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1238","line":136,"column":28,"nodeType":"1098","messageId":"1099","endLine":136,"endColumn":38},{"ruleId":"1103","severity":1,"message":"1104","line":145,"column":98,"nodeType":"1105","messageId":"1106","endLine":145,"endColumn":100},{"ruleId":"1103","severity":1,"message":"1104","line":147,"column":48,"nodeType":"1105","messageId":"1106","endLine":147,"endColumn":50},{"ruleId":"1096","severity":1,"message":"1239","line":169,"column":17,"nodeType":"1098","messageId":"1099","endLine":169,"endColumn":21},{"ruleId":"1103","severity":1,"message":"1104","line":243,"column":67,"nodeType":"1105","messageId":"1106","endLine":243,"endColumn":69},{"ruleId":"1096","severity":1,"message":"1100","line":2,"column":16,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1128","line":4,"column":8,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1119","line":3,"column":11,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1120","line":3,"column":16,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":19},{"ruleId":"1240","severity":1,"message":"1241","line":23,"column":21,"nodeType":"1168","endLine":23,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1242","line":2,"column":10,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1119","line":2,"column":15,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":18},{"ruleId":"1096","severity":1,"message":"1120","line":2,"column":19,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":22},{"ruleId":"1103","severity":1,"message":"1104","line":15,"column":28,"nodeType":"1105","messageId":"1106","endLine":15,"endColumn":30},{"ruleId":"1103","severity":1,"message":"1104","line":13,"column":50,"nodeType":"1105","messageId":"1106","endLine":13,"endColumn":52},{"ruleId":"1096","severity":1,"message":"1097","line":2,"column":16,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1208","line":3,"column":9,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1204","line":5,"column":8,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":20},{"ruleId":"1103","severity":1,"message":"1104","line":53,"column":111,"nodeType":"1105","messageId":"1106","endLine":53,"endColumn":113},{"ruleId":"1137","severity":1,"message":"1138","line":71,"column":41,"nodeType":"1139","messageId":"1140","endLine":71,"endColumn":43},{"ruleId":"1096","severity":1,"message":"1191","line":94,"column":17,"nodeType":"1098","messageId":"1099","endLine":94,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1243","line":102,"column":17,"nodeType":"1098","messageId":"1099","endLine":102,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1243","line":138,"column":17,"nodeType":"1098","messageId":"1099","endLine":138,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1244","line":143,"column":15,"nodeType":"1098","messageId":"1099","endLine":143,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1245","line":186,"column":131,"nodeType":"1098","messageId":"1099","endLine":186,"endColumn":136},{"ruleId":"1137","severity":1,"message":"1138","line":200,"column":29,"nodeType":"1139","messageId":"1140","endLine":200,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1104","line":205,"column":64,"nodeType":"1105","messageId":"1106","endLine":205,"endColumn":66},{"ruleId":"1137","severity":1,"message":"1138","line":296,"column":49,"nodeType":"1139","messageId":"1140","endLine":296,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1245","line":334,"column":17,"nodeType":"1098","messageId":"1099","endLine":334,"endColumn":22},{"ruleId":"1096","severity":1,"message":"1246","line":334,"column":24,"nodeType":"1098","messageId":"1099","endLine":334,"endColumn":33},{"ruleId":"1247","severity":1,"message":"1248","line":519,"column":29,"nodeType":"1249","endLine":525,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1208","line":3,"column":9,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1137","severity":1,"message":"1138","line":59,"column":41,"nodeType":"1139","messageId":"1140","endLine":59,"endColumn":43},{"ruleId":"1096","severity":1,"message":"1243","line":122,"column":17,"nodeType":"1098","messageId":"1099","endLine":122,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1250","line":122,"column":38,"nodeType":"1098","messageId":"1099","endLine":122,"endColumn":47},{"ruleId":"1096","severity":1,"message":"1251","line":123,"column":15,"nodeType":"1098","messageId":"1099","endLine":123,"endColumn":24},{"ruleId":"1103","severity":1,"message":"1104","line":131,"column":26,"nodeType":"1105","messageId":"1106","endLine":131,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1191","line":140,"column":17,"nodeType":"1098","messageId":"1099","endLine":140,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1252","line":181,"column":33,"nodeType":"1098","messageId":"1099","endLine":181,"endColumn":42},{"ruleId":"1096","severity":1,"message":"1218","line":181,"column":112,"nodeType":"1098","messageId":"1099","endLine":181,"endColumn":125},{"ruleId":"1103","severity":1,"message":"1104","line":196,"column":62,"nodeType":"1105","messageId":"1106","endLine":196,"endColumn":64},{"ruleId":"1096","severity":1,"message":"1150","line":232,"column":17,"nodeType":"1098","messageId":"1099","endLine":232,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1252","line":232,"column":45,"nodeType":"1098","messageId":"1099","endLine":232,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1218","line":232,"column":124,"nodeType":"1098","messageId":"1099","endLine":232,"endColumn":137},{"ruleId":"1103","severity":1,"message":"1104","line":247,"column":18,"nodeType":"1105","messageId":"1106","endLine":247,"endColumn":20},{"ruleId":"1103","severity":1,"message":"1159","line":312,"column":36,"nodeType":"1105","messageId":"1106","endLine":312,"endColumn":38},{"ruleId":"1103","severity":1,"message":"1104","line":313,"column":56,"nodeType":"1105","messageId":"1106","endLine":313,"endColumn":58},{"ruleId":"1096","severity":1,"message":"1253","line":322,"column":44,"nodeType":"1098","messageId":"1099","endLine":322,"endColumn":51},{"ruleId":"1096","severity":1,"message":"1218","line":322,"column":136,"nodeType":"1098","messageId":"1099","endLine":322,"endColumn":149},{"ruleId":"1096","severity":1,"message":"1254","line":322,"column":165,"nodeType":"1098","messageId":"1099","endLine":322,"endColumn":175},{"ruleId":"1096","severity":1,"message":"1255","line":322,"column":177,"nodeType":"1098","messageId":"1099","endLine":322,"endColumn":187},{"ruleId":"1103","severity":1,"message":"1104","line":437,"column":47,"nodeType":"1105","messageId":"1106","endLine":437,"endColumn":49},{"ruleId":"1103","severity":1,"message":"1104","line":438,"column":47,"nodeType":"1105","messageId":"1106","endLine":438,"endColumn":49},{"ruleId":"1103","severity":1,"message":"1104","line":442,"column":47,"nodeType":"1105","messageId":"1106","endLine":442,"endColumn":49},{"ruleId":"1103","severity":1,"message":"1104","line":443,"column":47,"nodeType":"1105","messageId":"1106","endLine":443,"endColumn":49},{"ruleId":"1096","severity":1,"message":"1208","line":3,"column":9,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1137","severity":1,"message":"1138","line":60,"column":41,"nodeType":"1139","messageId":"1140","endLine":60,"endColumn":43},{"ruleId":"1096","severity":1,"message":"1243","line":115,"column":17,"nodeType":"1098","messageId":"1099","endLine":115,"endColumn":25},{"ruleId":"1096","severity":1,"message":"1141","line":115,"column":27,"nodeType":"1098","messageId":"1099","endLine":115,"endColumn":34},{"ruleId":"1096","severity":1,"message":"1191","line":142,"column":17,"nodeType":"1098","messageId":"1099","endLine":142,"endColumn":31},{"ruleId":"1096","severity":1,"message":"1141","line":168,"column":37,"nodeType":"1098","messageId":"1099","endLine":168,"endColumn":44},{"ruleId":"1096","severity":1,"message":"1218","line":168,"column":113,"nodeType":"1098","messageId":"1099","endLine":168,"endColumn":126},{"ruleId":"1103","severity":1,"message":"1104","line":185,"column":66,"nodeType":"1105","messageId":"1106","endLine":185,"endColumn":68},{"ruleId":"1096","severity":1,"message":"1230","line":219,"column":17,"nodeType":"1098","messageId":"1099","endLine":219,"endColumn":35},{"ruleId":"1096","severity":1,"message":"1141","line":219,"column":49,"nodeType":"1098","messageId":"1099","endLine":219,"endColumn":56},{"ruleId":"1096","severity":1,"message":"1218","line":219,"column":125,"nodeType":"1098","messageId":"1099","endLine":219,"endColumn":138},{"ruleId":"1103","severity":1,"message":"1104","line":237,"column":22,"nodeType":"1105","messageId":"1106","endLine":237,"endColumn":24},{"ruleId":"1096","severity":1,"message":"1253","line":305,"column":64,"nodeType":"1098","messageId":"1099","endLine":305,"endColumn":71},{"ruleId":"1096","severity":1,"message":"1218","line":305,"column":140,"nodeType":"1098","messageId":"1099","endLine":305,"endColumn":153},{"ruleId":"1096","severity":1,"message":"1254","line":305,"column":169,"nodeType":"1098","messageId":"1099","endLine":305,"endColumn":179},{"ruleId":"1096","severity":1,"message":"1255","line":305,"column":181,"nodeType":"1098","messageId":"1099","endLine":305,"endColumn":191},{"ruleId":"1103","severity":1,"message":"1104","line":438,"column":55,"nodeType":"1105","messageId":"1106","endLine":438,"endColumn":57},{"ruleId":"1103","severity":1,"message":"1104","line":439,"column":55,"nodeType":"1105","messageId":"1106","endLine":439,"endColumn":57},{"ruleId":"1103","severity":1,"message":"1104","line":443,"column":55,"nodeType":"1105","messageId":"1106","endLine":443,"endColumn":57},{"ruleId":"1103","severity":1,"message":"1104","line":444,"column":55,"nodeType":"1105","messageId":"1106","endLine":444,"endColumn":57},{"ruleId":"1256","severity":1,"message":"1257","line":6,"column":5,"nodeType":"1258","messageId":"1259","endLine":10,"endColumn":6},{"ruleId":"1103","severity":1,"message":"1104","line":80,"column":69,"nodeType":"1105","messageId":"1106","endLine":80,"endColumn":71},{"ruleId":"1103","severity":1,"message":"1104","line":111,"column":111,"nodeType":"1105","messageId":"1106","endLine":111,"endColumn":113},{"ruleId":"1103","severity":1,"message":"1104","line":12,"column":34,"nodeType":"1105","messageId":"1106","endLine":12,"endColumn":36},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1100","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1236","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1137","severity":1,"message":"1138","line":38,"column":40,"nodeType":"1139","messageId":"1140","endLine":38,"endColumn":42},{"ruleId":"1103","severity":1,"message":"1104","line":39,"column":38,"nodeType":"1105","messageId":"1106","endLine":39,"endColumn":40},{"ruleId":"1137","severity":1,"message":"1138","line":54,"column":36,"nodeType":"1139","messageId":"1140","endLine":54,"endColumn":38},{"ruleId":"1103","severity":1,"message":"1104","line":55,"column":34,"nodeType":"1105","messageId":"1106","endLine":55,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1261","line":63,"column":7,"nodeType":"1262","endLine":63,"endColumn":19,"suggestions":"1263"},{"ruleId":"1096","severity":1,"message":"1264","line":74,"column":11,"nodeType":"1098","messageId":"1099","endLine":74,"endColumn":26},{"ruleId":"1103","severity":1,"message":"1104","line":78,"column":17,"nodeType":"1105","messageId":"1106","endLine":78,"endColumn":19},{"ruleId":"1103","severity":1,"message":"1104","line":79,"column":68,"nodeType":"1105","messageId":"1106","endLine":79,"endColumn":70},{"ruleId":"1103","severity":1,"message":"1104","line":82,"column":66,"nodeType":"1105","messageId":"1106","endLine":82,"endColumn":68},{"ruleId":"1137","severity":1,"message":"1138","line":85,"column":25,"nodeType":"1139","messageId":"1140","endLine":85,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1100","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1120","line":7,"column":5,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":8},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1236","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1265","line":15,"column":10,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1122","line":15,"column":18,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1266","line":29,"column":8,"nodeType":"1262","endLine":29,"endColumn":20,"suggestions":"1267"},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1242","line":4,"column":5,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1100","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1119","line":6,"column":5,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":8},{"ruleId":"1096","severity":1,"message":"1120","line":7,"column":5,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":8},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1236","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1100","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1120","line":7,"column":5,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":8},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1236","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1132","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1133","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1265","line":15,"column":10,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1122","line":15,"column":18,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1268","line":18,"column":12,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":22},{"ruleId":"1096","severity":1,"message":"1269","line":18,"column":24,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":37},{"ruleId":"1096","severity":1,"message":"1270","line":19,"column":12,"nodeType":"1098","messageId":"1099","endLine":19,"endColumn":16},{"ruleId":"1096","severity":1,"message":"1271","line":19,"column":17,"nodeType":"1098","messageId":"1099","endLine":19,"endColumn":24},{"ruleId":"1137","severity":1,"message":"1138","line":35,"column":30,"nodeType":"1139","messageId":"1140","endLine":35,"endColumn":32},{"ruleId":"1096","severity":1,"message":"1272","line":36,"column":21,"nodeType":"1098","messageId":"1099","endLine":36,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1273","line":43,"column":21,"nodeType":"1098","messageId":"1099","endLine":43,"endColumn":31},{"ruleId":"1103","severity":1,"message":"1104","line":44,"column":25,"nodeType":"1105","messageId":"1106","endLine":44,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":50,"column":71,"nodeType":"1105","messageId":"1106","endLine":50,"endColumn":73},{"ruleId":"1103","severity":1,"message":"1104","line":59,"column":71,"nodeType":"1105","messageId":"1106","endLine":59,"endColumn":73},{"ruleId":"1096","severity":1,"message":"1274","line":61,"column":29,"nodeType":"1098","messageId":"1099","endLine":61,"endColumn":45},{"ruleId":"1260","severity":1,"message":"1275","line":66,"column":7,"nodeType":"1262","endLine":66,"endColumn":37,"suggestions":"1276"},{"ruleId":"1096","severity":1,"message":"1191","line":70,"column":17,"nodeType":"1098","messageId":"1099","endLine":70,"endColumn":31},{"ruleId":"1137","severity":1,"message":"1138","line":81,"column":22,"nodeType":"1139","messageId":"1140","endLine":81,"endColumn":24},{"ruleId":"1103","severity":1,"message":"1104","line":87,"column":21,"nodeType":"1105","messageId":"1106","endLine":87,"endColumn":23},{"ruleId":"1137","severity":1,"message":"1138","line":107,"column":25,"nodeType":"1139","messageId":"1140","endLine":107,"endColumn":27},{"ruleId":"1103","severity":1,"message":"1104","line":113,"column":21,"nodeType":"1105","messageId":"1106","endLine":113,"endColumn":23},{"ruleId":"1103","severity":1,"message":"1104","line":128,"column":18,"nodeType":"1105","messageId":"1106","endLine":128,"endColumn":20},{"ruleId":"1103","severity":1,"message":"1104","line":142,"column":17,"nodeType":"1105","messageId":"1106","endLine":142,"endColumn":19},{"ruleId":"1137","severity":1,"message":"1138","line":144,"column":32,"nodeType":"1139","messageId":"1140","endLine":144,"endColumn":34},{"ruleId":"1137","severity":1,"message":"1138","line":153,"column":32,"nodeType":"1139","messageId":"1140","endLine":153,"endColumn":34},{"ruleId":"1103","severity":1,"message":"1104","line":170,"column":17,"nodeType":"1105","messageId":"1106","endLine":170,"endColumn":19},{"ruleId":"1137","severity":1,"message":"1138","line":172,"column":32,"nodeType":"1139","messageId":"1140","endLine":172,"endColumn":34},{"ruleId":"1137","severity":1,"message":"1138","line":181,"column":32,"nodeType":"1139","messageId":"1140","endLine":181,"endColumn":34},{"ruleId":"1137","severity":1,"message":"1138","line":11,"column":25,"nodeType":"1139","messageId":"1140","endLine":11,"endColumn":27},{"ruleId":"1137","severity":1,"message":"1138","line":48,"column":25,"nodeType":"1139","messageId":"1140","endLine":48,"endColumn":27},{"ruleId":"1096","severity":1,"message":"1097","line":4,"column":5,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1242","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1100","line":6,"column":5,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1120","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":8},{"ruleId":"1096","severity":1,"message":"1131","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1121","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1122","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1277","line":13,"column":5,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1278","line":2,"column":10,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1279","line":3,"column":8,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1097","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1242","line":6,"column":5,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1100","line":7,"column":5,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1131","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1121","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1122","line":13,"column":5,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1277","line":14,"column":5,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1127","line":17,"column":8,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1280","line":18,"column":10,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1281","line":19,"column":10,"nodeType":"1098","messageId":"1099","endLine":19,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1282","line":35,"column":45,"nodeType":"1098","messageId":"1099","endLine":35,"endColumn":56},{"ruleId":"1096","severity":1,"message":"1283","line":35,"column":58,"nodeType":"1098","messageId":"1099","endLine":35,"endColumn":67},{"ruleId":"1284","severity":1,"message":"1285","line":41,"column":37,"nodeType":"1286","messageId":"1287","endLine":41,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1288","line":51,"column":15,"nodeType":"1098","messageId":"1099","endLine":51,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1289","line":60,"column":15,"nodeType":"1098","messageId":"1099","endLine":60,"endColumn":26},{"ruleId":"1213","severity":1,"message":"1214","line":84,"column":99,"nodeType":"1105","messageId":"1215","endLine":84,"endColumn":110},{"ruleId":"1103","severity":1,"message":"1104","line":84,"column":104,"nodeType":"1105","messageId":"1106","endLine":84,"endColumn":106},{"ruleId":"1096","severity":1,"message":"1278","line":2,"column":10,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1279","line":3,"column":8,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1097","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1242","line":6,"column":5,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1100","line":7,"column":5,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1131","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1121","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1122","line":13,"column":5,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1277","line":14,"column":5,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1127","line":17,"column":8,"nodeType":"1098","messageId":"1099","endLine":17,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1280","line":18,"column":10,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1281","line":19,"column":10,"nodeType":"1098","messageId":"1099","endLine":19,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1282","line":34,"column":45,"nodeType":"1098","messageId":"1099","endLine":34,"endColumn":56},{"ruleId":"1096","severity":1,"message":"1283","line":34,"column":58,"nodeType":"1098","messageId":"1099","endLine":34,"endColumn":67},{"ruleId":"1284","severity":1,"message":"1285","line":40,"column":37,"nodeType":"1286","messageId":"1287","endLine":40,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1289","line":60,"column":15,"nodeType":"1098","messageId":"1099","endLine":60,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1097","line":4,"column":5,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1242","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1100","line":6,"column":5,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1131","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1121","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1122","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1277","line":13,"column":5,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1281","line":18,"column":10,"nodeType":"1098","messageId":"1099","endLine":18,"endColumn":20},{"ruleId":"1137","severity":1,"message":"1138","line":66,"column":29,"nodeType":"1139","messageId":"1140","endLine":66,"endColumn":31},{"ruleId":"1137","severity":1,"message":"1138","line":111,"column":33,"nodeType":"1139","messageId":"1140","endLine":111,"endColumn":35},{"ruleId":"1096","severity":1,"message":"1278","line":2,"column":10,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1279","line":3,"column":8,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":23},{"ruleId":"1096","severity":1,"message":"1097","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1242","line":6,"column":5,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1131","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1121","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1122","line":13,"column":5,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1277","line":14,"column":5,"nodeType":"1098","messageId":"1099","endLine":14,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1281","line":19,"column":10,"nodeType":"1098","messageId":"1099","endLine":19,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1290","line":20,"column":8,"nodeType":"1098","messageId":"1099","endLine":20,"endColumn":15},{"ruleId":"1096","severity":1,"message":"1291","line":73,"column":27,"nodeType":"1098","messageId":"1099","endLine":73,"endColumn":34},{"ruleId":"1096","severity":1,"message":"1292","line":89,"column":17,"nodeType":"1098","messageId":"1099","endLine":89,"endColumn":23},{"ruleId":"1284","severity":1,"message":"1285","line":96,"column":37,"nodeType":"1286","messageId":"1287","endLine":96,"endColumn":54},{"ruleId":"1096","severity":1,"message":"1289","line":116,"column":15,"nodeType":"1098","messageId":"1099","endLine":116,"endColumn":26},{"ruleId":"1096","severity":1,"message":"1097","line":3,"column":5,"nodeType":"1098","messageId":"1099","endLine":3,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1242","line":4,"column":5,"nodeType":"1098","messageId":"1099","endLine":4,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1100","line":5,"column":5,"nodeType":"1098","messageId":"1099","endLine":5,"endColumn":9},{"ruleId":"1096","severity":1,"message":"1119","line":6,"column":5,"nodeType":"1098","messageId":"1099","endLine":6,"endColumn":8},{"ruleId":"1096","severity":1,"message":"1120","line":7,"column":5,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":8},{"ruleId":"1096","severity":1,"message":"1131","line":8,"column":5,"nodeType":"1098","messageId":"1099","endLine":8,"endColumn":11},{"ruleId":"1096","severity":1,"message":"1188","line":9,"column":5,"nodeType":"1098","messageId":"1099","endLine":9,"endColumn":10},{"ruleId":"1096","severity":1,"message":"1121","line":10,"column":5,"nodeType":"1098","messageId":"1099","endLine":10,"endColumn":19},{"ruleId":"1096","severity":1,"message":"1122","line":11,"column":5,"nodeType":"1098","messageId":"1099","endLine":11,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1277","line":12,"column":5,"nodeType":"1098","messageId":"1099","endLine":12,"endColumn":12},{"ruleId":"1096","severity":1,"message":"1293","line":13,"column":5,"nodeType":"1098","messageId":"1099","endLine":13,"endColumn":14},{"ruleId":"1096","severity":1,"message":"1265","line":15,"column":15,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1294","line":15,"column":22,"nodeType":"1098","messageId":"1099","endLine":15,"endColumn":28},{"ruleId":"1096","severity":1,"message":"1295","line":45,"column":15,"nodeType":"1098","messageId":"1099","endLine":45,"endColumn":21},{"ruleId":"1096","severity":1,"message":"1296","line":48,"column":15,"nodeType":"1098","messageId":"1099","endLine":48,"endColumn":20},{"ruleId":"1096","severity":1,"message":"1242","line":2,"column":33,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":37},{"ruleId":"1096","severity":1,"message":"1297","line":2,"column":39,"nodeType":"1098","messageId":"1099","endLine":2,"endColumn":49},{"ruleId":"1096","severity":1,"message":"1209","line":7,"column":10,"nodeType":"1098","messageId":"1099","endLine":7,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1298","line":22,"column":7,"nodeType":"1262","endLine":22,"endColumn":24,"suggestions":"1299"},{"ruleId":"1103","severity":1,"message":"1159","line":26,"column":56,"nodeType":"1105","messageId":"1106","endLine":26,"endColumn":58},{"ruleId":"1137","severity":1,"message":"1138","line":30,"column":26,"nodeType":"1139","messageId":"1140","endLine":30,"endColumn":28},{"ruleId":"1103","severity":1,"message":"1104","line":35,"column":21,"nodeType":"1105","messageId":"1106","endLine":35,"endColumn":23},{"ruleId":"1103","severity":1,"message":"1159","line":54,"column":57,"nodeType":"1105","messageId":"1106","endLine":54,"endColumn":59},{"ruleId":"1137","severity":1,"message":"1138","line":59,"column":26,"nodeType":"1139","messageId":"1140","endLine":59,"endColumn":28},{"ruleId":"1103","severity":1,"message":"1104","line":64,"column":21,"nodeType":"1105","messageId":"1106","endLine":64,"endColumn":23},{"ruleId":"1137","severity":1,"message":"1138","line":67,"column":37,"nodeType":"1139","messageId":"1140","endLine":67,"endColumn":39},{"ruleId":"1137","severity":1,"message":"1138","line":77,"column":33,"nodeType":"1139","messageId":"1140","endLine":77,"endColumn":35},{"ruleId":"1103","severity":1,"message":"1104","line":154,"column":31,"nodeType":"1105","messageId":"1106","endLine":154,"endColumn":33},{"ruleId":"1096","severity":1,"message":"1300","line":1,"column":8,"nodeType":"1098","messageId":"1099","endLine":1,"endColumn":13},{"ruleId":"1096","severity":1,"message":"1301","line":93,"column":7,"nodeType":"1098","messageId":"1099","endLine":93,"endColumn":16},{"ruleId":"1137","severity":1,"message":"1138","line":5,"column":21,"nodeType":"1139","messageId":"1140","endLine":5,"endColumn":23},"no-native-reassign",["1302"],"no-negated-in-lhs",["1303"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'swal' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'user_name' is assigned a value but never used.","'country' is assigned a value but never used.","'user_type' is assigned a value but never used.","'position' is assigned a value but never used.","'contact_person' is assigned a value but never used.","'department' is assigned a value but never used.","'password' is assigned a value but never used.","'role' is assigned a value but never used.","'Divider' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'NavDropdown' is defined but never used.","'token' is assigned a value but never used.","'country_object' is assigned a value but never used.","'status' is assigned a value but never used.","'axiosInstance' is defined but never used.","'axios' is defined but never used.","'useHistory' is defined but never used.","'iconStyle' is assigned a value but never used.","'Button' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Currency' is defined but never used.","'marginList' is assigned a value but never used.","'summary' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'cont_id' is assigned a value but never used.","'client_list' is assigned a value but never used.","'data' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","'year_chart_list' is assigned a value but never used.","'contractor_list' is assigned a value but never used.","'user' is assigned a value but never used.","'client_invoice' is assigned a value but never used.","'cont_invoice' is assigned a value but never used.","'PurpleSwitch' is assigned a value but never used.","'Swal' is defined but never used.","'Select' is defined but never used.","'ReactCountryFlag' is defined but never used.","'ReactFlagsSelect' is defined but never used.","'Us' is defined but never used.","'indexOf' is defined but never used.","Expected '!==' and instead saw '!='.","'unselected' is assigned a value but never used.","no-dupe-keys","Duplicate key 'country'.","ObjectExpression","'selectedcountries' is assigned a value but never used.","'country_list' is assigned a value but never used.","react/style-prop-object","Style prop value must be an object","JSXAttribute","jsx-a11y/scope","The scope prop can only be used on <th> elements.","no-whitespace-before-property","Unexpected whitespace before property then.","MemberExpression","unexpectedWhitespace",{"range":"1304","text":"1305"},"'history' is assigned a value but never used.","'oldPassword' is assigned a value but never used.","'pathOr' is defined but never used.","'equals' is defined but never used.","'head' is defined but never used.","'filter' is defined but never used.","'Alert' is defined but never used.","'validateForm' is assigned a value but never used.","'errors' is assigned a value but never used.","'CustomTextBox' is defined but never used.","'emailSearch' is assigned a value but never used.","'countrySearch' is assigned a value but never used.","'Image' is defined but never used.","'Input' is defined but never used.","'Logo' is defined but never used.","'formattedValue' is assigned a value but never used.","'invoice_id' is assigned a value but never used.","'cust_name' is assigned a value but never used.","'cust_id' is assigned a value but never used.","'client_name' is assigned a value but never used.","'contractor_name' is assigned a value but never used.","'Invoice' is defined but never used.","'DatePicker' is defined but never used.","'Radio' is defined but never used.","'Payment' is defined but never used.","'EditQuotation' is defined but never used.","'quotation_list' is assigned a value but never used.","'paymentShow' is assigned a value but never used.","'CustomButton' is defined but never used.","'pagenumber' is assigned a value but never used.","'total_pages' is assigned a value but never used.","'CardGroup' is defined but never used.","'Label' is defined but never used.","'data' is defined but never used.","Duplicate key 'po_amount'.","'filtered_quotes' is assigned a value but never used.","'timestamp' is assigned a value but never used.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","'PO_number' is assigned a value but never used.","'comments2' is assigned a value but never used.","'invoiceCredit' is assigned a value but never used.","'parent_quote' is assigned a value but never used.","'Invoicedata' is assigned a value but never used.","'Cont_data' is assigned a value but never used.","'client_po' is assigned a value but never used.","'comments' is assigned a value but never used.","'parent_id' is assigned a value but never used.","'workCommence' is assigned a value but never used.","'workComplete' is assigned a value but never used.","'contName' is assigned a value but never used.","'PO_amount' is assigned a value but never used.","'PO_date' is assigned a value but never used.","'contractor_invoice' is assigned a value but never used.","'client_amount' is assigned a value but never used.","'cont_amount' is assigned a value but never used.","'Popup' is defined but never used.","'SearchAccordion' is defined but never used.","'Component' is defined but never used.","'Table' is defined but never used.","'clients' is assigned a value but never used.","'setClients' is assigned a value but never used.","'name' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","'Card' is defined but never used.","'quote_id' is assigned a value but never used.","'po_details' is assigned a value but never used.","'po_id' is assigned a value but never used.","'po_number' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component ContPO_list must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'client_PO' is assigned a value but never used.","'condition' is assigned a value but never used.","'client_id' is assigned a value but never used.","'tempamt' is assigned a value but never used.","'creditNote' is assigned a value but never used.","'creditDate' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.client_list', 'props.cont_list', 'props.quote.client_invoice_id', and 'props.quote.cont_invoice_id'. Either include them or remove the dependency array.","ArrayExpression",["1306"],"'CalcTotalCredit' is assigned a value but never used.","'Header' is defined but never used.","React Hook useEffect has missing dependencies: 'props.list' and 'props.user'. Either include them or remove the dependency array. If 'setlist' needs the current value of 'props.list', you can also switch to useReducer instead of useState and read 'props.list' in the reducer.",["1307"],"'creditList' is assigned a value but never used.","'setCreditList' is assigned a value but never used.","'date' is assigned a value but never used.","'setDate' is assigned a value but never used.","'total' is assigned a value but never used.","'continvarr' is assigned a value but never used.","'ContcreditAmount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientinvIdList', 'continvIdList', 'invId', and 'user'. Either include them or remove the dependency array.",["1308"],"'Spinner' is defined but never used.","'Bar' is defined but never used.","'ChartDataLabels' is defined but never used.","'DateFormat' is defined but never used.","'DateFilter' is defined but never used.","'client_data' is assigned a value but never used.","'cont_data' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'button' is assigned a value but never used.","'labelAmount' is assigned a value but never used.","'Curreny' is defined but never used.","'invoice' is assigned a value but never used.","'labels' is assigned a value but never used.","'ListGroup' is defined but never used.","'Rating' is defined but never used.","'amount' is assigned a value but never used.","'label' is assigned a value but never used.","'ModalTitle' is defined but never used.","React Hook useEffect has missing dependencies: 'Invlist', 'credit.credit_amount', 'credit.credit_date', 'credit.credit_note', 'payment.payment_date', and 'payment.price'. Either include them or remove the dependency array. If 'setPrice' needs the current value of 'payment.price', you can also switch to useReducer instead of useState and read 'payment.price' in the reducer.",["1309"],"'Chart' is defined but never used.","'pieLegend' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[427,429],".",{"desc":"1310","fix":"1311"},{"desc":"1312","fix":"1313"},{"desc":"1314","fix":"1315"},{"desc":"1316","fix":"1317"},"Update the dependencies array to be: [props.client_list, props.cont_list, props.quote.client_invoice_id, props.quote.cont_invoice_id, props.show]",{"range":"1318","text":"1319"},"Update the dependencies array to be: [props.list, props.show, props.user]",{"range":"1320","text":"1321"},"Update the dependencies array to be: [showPayment, refresh, showEdit, invId, user, clientinvIdList, continvIdList]",{"range":"1322","text":"1323"},"Update the dependencies array to be: [Invlist, credit.credit_amount, credit.credit_date, credit.credit_note, payment.payment_date, payment.price, showPaymentEdit]",{"range":"1324","text":"1325"},[2390,2402],"[props.client_list, props.cont_list, props.quote.client_invoice_id, props.quote.cont_invoice_id, props.show]",[673,685],"[props.list, props.show, props.user]",[3089,3119],"[showPayment, refresh, showEdit, invId, user, clientinvIdList, continvIdList]",[1153,1170],"[Invlist, credit.credit_amount, credit.credit_date, credit.credit_note, payment.payment_date, payment.price, showPaymentEdit]"]